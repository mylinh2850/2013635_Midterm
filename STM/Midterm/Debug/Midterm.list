
Midterm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002af0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002bfc  08002bfc  00012bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c1c  08002c1c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08002c1c  08002c1c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c1c  08002c1c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c1c  08002c1c  00012c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c20  08002c20  00012c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000060  08002c84  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002c84  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c10  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa5  00000000  00000000  00028c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002a740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002b200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d2a  00000000  00000000  0002bbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba28  00000000  00000000  000428da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082337  00000000  00000000  0004e302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0639  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a10  00000000  00000000  000d068c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08002be4 	.word	0x08002be4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08002be4 	.word	0x08002be4

0800014c <isButton1Pressed>:
int KeyReg10 = NORMAL_STATE;
int KeyReg11 = NORMAL_STATE;

int TimerForKeyPress = 200;

int isButton1Pressed() {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (button1_flag == 1) {
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	2000007c 	.word	0x2000007c

08000170 <isButton2Pressed>:

int isButton2Pressed() {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (button2_flag == 1) {
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000080 	.word	0x20000080

08000194 <isButton3Pressed>:

int isButton3Pressed() {
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (button3_flag == 1) {
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000084 	.word	0x20000084

080001b8 <subKeyProcess1>:

void subKeyProcess1() {
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	//TODO
	button1_flag = 1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <subKeyProcess1+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	2000007c 	.word	0x2000007c

080001d0 <subKeyProcess2>:

void subKeyProcess2() {
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	//TODO
	button2_flag = 1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <subKeyProcess2+0x14>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000080 	.word	0x20000080

080001e8 <getKeyInput1>:
void subKeyProcess3() {
	//TODO
	button3_flag = 1;
}

void getKeyInput1() {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 80001ec:	4b1e      	ldr	r3, [pc, #120]	; (8000268 <getKeyInput1+0x80>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a1e      	ldr	r2, [pc, #120]	; (800026c <getKeyInput1+0x84>)
 80001f2:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 80001f4:	4b1e      	ldr	r3, [pc, #120]	; (8000270 <getKeyInput1+0x88>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a1b      	ldr	r2, [pc, #108]	; (8000268 <getKeyInput1+0x80>)
 80001fa:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80001fc:	2102      	movs	r1, #2
 80001fe:	481d      	ldr	r0, [pc, #116]	; (8000274 <getKeyInput1+0x8c>)
 8000200:	f001 fcb0 	bl	8001b64 <HAL_GPIO_ReadPin>
 8000204:	4603      	mov	r3, r0
 8000206:	461a      	mov	r2, r3
 8000208:	4b19      	ldr	r3, [pc, #100]	; (8000270 <getKeyInput1+0x88>)
 800020a:	601a      	str	r2, [r3, #0]

	if ((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)) {
 800020c:	4b17      	ldr	r3, [pc, #92]	; (800026c <getKeyInput1+0x84>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b15      	ldr	r3, [pc, #84]	; (8000268 <getKeyInput1+0x80>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	429a      	cmp	r2, r3
 8000216:	d125      	bne.n	8000264 <getKeyInput1+0x7c>
 8000218:	4b13      	ldr	r3, [pc, #76]	; (8000268 <getKeyInput1+0x80>)
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	4b14      	ldr	r3, [pc, #80]	; (8000270 <getKeyInput1+0x88>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	429a      	cmp	r2, r3
 8000222:	d11f      	bne.n	8000264 <getKeyInput1+0x7c>
		if (KeyReg3 != KeyReg2) {
 8000224:	4b14      	ldr	r3, [pc, #80]	; (8000278 <getKeyInput1+0x90>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b11      	ldr	r3, [pc, #68]	; (8000270 <getKeyInput1+0x88>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	429a      	cmp	r2, r3
 800022e:	d00d      	beq.n	800024c <getKeyInput1+0x64>
			KeyReg3 = KeyReg2;
 8000230:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <getKeyInput1+0x88>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a10      	ldr	r2, [pc, #64]	; (8000278 <getKeyInput1+0x90>)
 8000236:	6013      	str	r3, [r2, #0]
			if (KeyReg2 == PRESSED_STATE) {
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <getKeyInput1+0x88>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d111      	bne.n	8000264 <getKeyInput1+0x7c>
				//TODO
				subKeyProcess1();
 8000240:	f7ff ffba 	bl	80001b8 <subKeyProcess1>
				TimerForKeyPress = 200;
 8000244:	4b0d      	ldr	r3, [pc, #52]	; (800027c <getKeyInput1+0x94>)
 8000246:	22c8      	movs	r2, #200	; 0xc8
 8000248:	601a      	str	r2, [r3, #0]
			if (TimerForKeyPress == 0) {
				KeyReg3 = NORMAL_STATE;
			}
		}
	}
}
 800024a:	e00b      	b.n	8000264 <getKeyInput1+0x7c>
			TimerForKeyPress--;
 800024c:	4b0b      	ldr	r3, [pc, #44]	; (800027c <getKeyInput1+0x94>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	3b01      	subs	r3, #1
 8000252:	4a0a      	ldr	r2, [pc, #40]	; (800027c <getKeyInput1+0x94>)
 8000254:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress == 0) {
 8000256:	4b09      	ldr	r3, [pc, #36]	; (800027c <getKeyInput1+0x94>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d102      	bne.n	8000264 <getKeyInput1+0x7c>
				KeyReg3 = NORMAL_STATE;
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <getKeyInput1+0x90>)
 8000260:	2201      	movs	r2, #1
 8000262:	601a      	str	r2, [r3, #0]
}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000004 	.word	0x20000004
 800026c:	20000000 	.word	0x20000000
 8000270:	20000008 	.word	0x20000008
 8000274:	40010800 	.word	0x40010800
 8000278:	2000000c 	.word	0x2000000c
 800027c:	20000020 	.word	0x20000020

08000280 <getKeyInput2>:

void getKeyInput2() {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	KeyReg4 = KeyReg5;
 8000284:	4b1e      	ldr	r3, [pc, #120]	; (8000300 <getKeyInput2+0x80>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a1e      	ldr	r2, [pc, #120]	; (8000304 <getKeyInput2+0x84>)
 800028a:	6013      	str	r3, [r2, #0]
	KeyReg5 = KeyReg6;
 800028c:	4b1e      	ldr	r3, [pc, #120]	; (8000308 <getKeyInput2+0x88>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a1b      	ldr	r2, [pc, #108]	; (8000300 <getKeyInput2+0x80>)
 8000292:	6013      	str	r3, [r2, #0]
	KeyReg6 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000294:	2104      	movs	r1, #4
 8000296:	481d      	ldr	r0, [pc, #116]	; (800030c <getKeyInput2+0x8c>)
 8000298:	f001 fc64 	bl	8001b64 <HAL_GPIO_ReadPin>
 800029c:	4603      	mov	r3, r0
 800029e:	461a      	mov	r2, r3
 80002a0:	4b19      	ldr	r3, [pc, #100]	; (8000308 <getKeyInput2+0x88>)
 80002a2:	601a      	str	r2, [r3, #0]

	if ((KeyReg4 == KeyReg5) && (KeyReg5 == KeyReg6)) {
 80002a4:	4b17      	ldr	r3, [pc, #92]	; (8000304 <getKeyInput2+0x84>)
 80002a6:	681a      	ldr	r2, [r3, #0]
 80002a8:	4b15      	ldr	r3, [pc, #84]	; (8000300 <getKeyInput2+0x80>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d125      	bne.n	80002fc <getKeyInput2+0x7c>
 80002b0:	4b13      	ldr	r3, [pc, #76]	; (8000300 <getKeyInput2+0x80>)
 80002b2:	681a      	ldr	r2, [r3, #0]
 80002b4:	4b14      	ldr	r3, [pc, #80]	; (8000308 <getKeyInput2+0x88>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	429a      	cmp	r2, r3
 80002ba:	d11f      	bne.n	80002fc <getKeyInput2+0x7c>
		if (KeyReg7 != KeyReg6) {
 80002bc:	4b14      	ldr	r3, [pc, #80]	; (8000310 <getKeyInput2+0x90>)
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	4b11      	ldr	r3, [pc, #68]	; (8000308 <getKeyInput2+0x88>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d00d      	beq.n	80002e4 <getKeyInput2+0x64>
			KeyReg7 = KeyReg6;
 80002c8:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <getKeyInput2+0x88>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a10      	ldr	r2, [pc, #64]	; (8000310 <getKeyInput2+0x90>)
 80002ce:	6013      	str	r3, [r2, #0]
			if (KeyReg6 == PRESSED_STATE) {
 80002d0:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <getKeyInput2+0x88>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d111      	bne.n	80002fc <getKeyInput2+0x7c>
				//TODO
				subKeyProcess2();
 80002d8:	f7ff ff7a 	bl	80001d0 <subKeyProcess2>
				TimerForKeyPress = 200;
 80002dc:	4b0d      	ldr	r3, [pc, #52]	; (8000314 <getKeyInput2+0x94>)
 80002de:	22c8      	movs	r2, #200	; 0xc8
 80002e0:	601a      	str	r2, [r3, #0]
			if (TimerForKeyPress == 0) {
				KeyReg7 = NORMAL_STATE;
			}
		}
	}
}
 80002e2:	e00b      	b.n	80002fc <getKeyInput2+0x7c>
			TimerForKeyPress--;
 80002e4:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <getKeyInput2+0x94>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	3b01      	subs	r3, #1
 80002ea:	4a0a      	ldr	r2, [pc, #40]	; (8000314 <getKeyInput2+0x94>)
 80002ec:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress == 0) {
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <getKeyInput2+0x94>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d102      	bne.n	80002fc <getKeyInput2+0x7c>
				KeyReg7 = NORMAL_STATE;
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <getKeyInput2+0x90>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	601a      	str	r2, [r3, #0]
}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000014 	.word	0x20000014
 8000304:	20000010 	.word	0x20000010
 8000308:	20000018 	.word	0x20000018
 800030c:	40010800 	.word	0x40010800
 8000310:	2000001c 	.word	0x2000001c
 8000314:	20000020 	.word	0x20000020

08000318 <display7SEG1>:
 *  Created on: Nov 1, 2022
 *      Author: Linh
 */
#include "display7SEG.h"

void display7SEG1(int num) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	switch (num) {
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	2b09      	cmp	r3, #9
 8000324:	f200 8180 	bhi.w	8000628 <display7SEG1+0x310>
 8000328:	a201      	add	r2, pc, #4	; (adr r2, 8000330 <display7SEG1+0x18>)
 800032a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800032e:	bf00      	nop
 8000330:	08000359 	.word	0x08000359
 8000334:	080003a1 	.word	0x080003a1
 8000338:	080003e9 	.word	0x080003e9
 800033c:	08000431 	.word	0x08000431
 8000340:	08000479 	.word	0x08000479
 8000344:	080004c1 	.word	0x080004c1
 8000348:	08000509 	.word	0x08000509
 800034c:	08000551 	.word	0x08000551
 8000350:	08000599 	.word	0x08000599
 8000354:	080005e1 	.word	0x080005e1
	case 0:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2101      	movs	r1, #1
 800035c:	48c6      	ldr	r0, [pc, #792]	; (8000678 <display7SEG1+0x360>)
 800035e:	f001 fc18 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000362:	2200      	movs	r2, #0
 8000364:	2102      	movs	r1, #2
 8000366:	48c4      	ldr	r0, [pc, #784]	; (8000678 <display7SEG1+0x360>)
 8000368:	f001 fc13 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	2104      	movs	r1, #4
 8000370:	48c1      	ldr	r0, [pc, #772]	; (8000678 <display7SEG1+0x360>)
 8000372:	f001 fc0e 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	2108      	movs	r1, #8
 800037a:	48bf      	ldr	r0, [pc, #764]	; (8000678 <display7SEG1+0x360>)
 800037c:	f001 fc09 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	2110      	movs	r1, #16
 8000384:	48bc      	ldr	r0, [pc, #752]	; (8000678 <display7SEG1+0x360>)
 8000386:	f001 fc04 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	2120      	movs	r1, #32
 800038e:	48ba      	ldr	r0, [pc, #744]	; (8000678 <display7SEG1+0x360>)
 8000390:	f001 fbff 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000394:	2201      	movs	r2, #1
 8000396:	2140      	movs	r1, #64	; 0x40
 8000398:	48b7      	ldr	r0, [pc, #732]	; (8000678 <display7SEG1+0x360>)
 800039a:	f001 fbfa 	bl	8001b92 <HAL_GPIO_WritePin>
		break;
 800039e:	e167      	b.n	8000670 <display7SEG1+0x358>
	case 1:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 80003a0:	2201      	movs	r2, #1
 80003a2:	2101      	movs	r1, #1
 80003a4:	48b4      	ldr	r0, [pc, #720]	; (8000678 <display7SEG1+0x360>)
 80003a6:	f001 fbf4 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2102      	movs	r1, #2
 80003ae:	48b2      	ldr	r0, [pc, #712]	; (8000678 <display7SEG1+0x360>)
 80003b0:	f001 fbef 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2104      	movs	r1, #4
 80003b8:	48af      	ldr	r0, [pc, #700]	; (8000678 <display7SEG1+0x360>)
 80003ba:	f001 fbea 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80003be:	2201      	movs	r2, #1
 80003c0:	2108      	movs	r1, #8
 80003c2:	48ad      	ldr	r0, [pc, #692]	; (8000678 <display7SEG1+0x360>)
 80003c4:	f001 fbe5 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2110      	movs	r1, #16
 80003cc:	48aa      	ldr	r0, [pc, #680]	; (8000678 <display7SEG1+0x360>)
 80003ce:	f001 fbe0 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80003d2:	2201      	movs	r2, #1
 80003d4:	2120      	movs	r1, #32
 80003d6:	48a8      	ldr	r0, [pc, #672]	; (8000678 <display7SEG1+0x360>)
 80003d8:	f001 fbdb 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	2140      	movs	r1, #64	; 0x40
 80003e0:	48a5      	ldr	r0, [pc, #660]	; (8000678 <display7SEG1+0x360>)
 80003e2:	f001 fbd6 	bl	8001b92 <HAL_GPIO_WritePin>
		break;
 80003e6:	e143      	b.n	8000670 <display7SEG1+0x358>
	case 2:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2101      	movs	r1, #1
 80003ec:	48a2      	ldr	r0, [pc, #648]	; (8000678 <display7SEG1+0x360>)
 80003ee:	f001 fbd0 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2102      	movs	r1, #2
 80003f6:	48a0      	ldr	r0, [pc, #640]	; (8000678 <display7SEG1+0x360>)
 80003f8:	f001 fbcb 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2104      	movs	r1, #4
 8000400:	489d      	ldr	r0, [pc, #628]	; (8000678 <display7SEG1+0x360>)
 8000402:	f001 fbc6 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2108      	movs	r1, #8
 800040a:	489b      	ldr	r0, [pc, #620]	; (8000678 <display7SEG1+0x360>)
 800040c:	f001 fbc1 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2110      	movs	r1, #16
 8000414:	4898      	ldr	r0, [pc, #608]	; (8000678 <display7SEG1+0x360>)
 8000416:	f001 fbbc 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 800041a:	2201      	movs	r2, #1
 800041c:	2120      	movs	r1, #32
 800041e:	4896      	ldr	r0, [pc, #600]	; (8000678 <display7SEG1+0x360>)
 8000420:	f001 fbb7 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2140      	movs	r1, #64	; 0x40
 8000428:	4893      	ldr	r0, [pc, #588]	; (8000678 <display7SEG1+0x360>)
 800042a:	f001 fbb2 	bl	8001b92 <HAL_GPIO_WritePin>
		break;
 800042e:	e11f      	b.n	8000670 <display7SEG1+0x358>
	case 3:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	2101      	movs	r1, #1
 8000434:	4890      	ldr	r0, [pc, #576]	; (8000678 <display7SEG1+0x360>)
 8000436:	f001 fbac 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2102      	movs	r1, #2
 800043e:	488e      	ldr	r0, [pc, #568]	; (8000678 <display7SEG1+0x360>)
 8000440:	f001 fba7 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	2104      	movs	r1, #4
 8000448:	488b      	ldr	r0, [pc, #556]	; (8000678 <display7SEG1+0x360>)
 800044a:	f001 fba2 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	2108      	movs	r1, #8
 8000452:	4889      	ldr	r0, [pc, #548]	; (8000678 <display7SEG1+0x360>)
 8000454:	f001 fb9d 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000458:	2201      	movs	r2, #1
 800045a:	2110      	movs	r1, #16
 800045c:	4886      	ldr	r0, [pc, #536]	; (8000678 <display7SEG1+0x360>)
 800045e:	f001 fb98 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000462:	2201      	movs	r2, #1
 8000464:	2120      	movs	r1, #32
 8000466:	4884      	ldr	r0, [pc, #528]	; (8000678 <display7SEG1+0x360>)
 8000468:	f001 fb93 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	2140      	movs	r1, #64	; 0x40
 8000470:	4881      	ldr	r0, [pc, #516]	; (8000678 <display7SEG1+0x360>)
 8000472:	f001 fb8e 	bl	8001b92 <HAL_GPIO_WritePin>
		break;
 8000476:	e0fb      	b.n	8000670 <display7SEG1+0x358>
	case 4:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000478:	2201      	movs	r2, #1
 800047a:	2101      	movs	r1, #1
 800047c:	487e      	ldr	r0, [pc, #504]	; (8000678 <display7SEG1+0x360>)
 800047e:	f001 fb88 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	2102      	movs	r1, #2
 8000486:	487c      	ldr	r0, [pc, #496]	; (8000678 <display7SEG1+0x360>)
 8000488:	f001 fb83 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	2104      	movs	r1, #4
 8000490:	4879      	ldr	r0, [pc, #484]	; (8000678 <display7SEG1+0x360>)
 8000492:	f001 fb7e 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000496:	2201      	movs	r2, #1
 8000498:	2108      	movs	r1, #8
 800049a:	4877      	ldr	r0, [pc, #476]	; (8000678 <display7SEG1+0x360>)
 800049c:	f001 fb79 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80004a0:	2201      	movs	r2, #1
 80004a2:	2110      	movs	r1, #16
 80004a4:	4874      	ldr	r0, [pc, #464]	; (8000678 <display7SEG1+0x360>)
 80004a6:	f001 fb74 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2120      	movs	r1, #32
 80004ae:	4872      	ldr	r0, [pc, #456]	; (8000678 <display7SEG1+0x360>)
 80004b0:	f001 fb6f 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2140      	movs	r1, #64	; 0x40
 80004b8:	486f      	ldr	r0, [pc, #444]	; (8000678 <display7SEG1+0x360>)
 80004ba:	f001 fb6a 	bl	8001b92 <HAL_GPIO_WritePin>
		break;
 80004be:	e0d7      	b.n	8000670 <display7SEG1+0x358>
	case 5:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2101      	movs	r1, #1
 80004c4:	486c      	ldr	r0, [pc, #432]	; (8000678 <display7SEG1+0x360>)
 80004c6:	f001 fb64 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 80004ca:	2201      	movs	r2, #1
 80004cc:	2102      	movs	r1, #2
 80004ce:	486a      	ldr	r0, [pc, #424]	; (8000678 <display7SEG1+0x360>)
 80004d0:	f001 fb5f 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2104      	movs	r1, #4
 80004d8:	4867      	ldr	r0, [pc, #412]	; (8000678 <display7SEG1+0x360>)
 80004da:	f001 fb5a 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	2108      	movs	r1, #8
 80004e2:	4865      	ldr	r0, [pc, #404]	; (8000678 <display7SEG1+0x360>)
 80004e4:	f001 fb55 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2110      	movs	r1, #16
 80004ec:	4862      	ldr	r0, [pc, #392]	; (8000678 <display7SEG1+0x360>)
 80004ee:	f001 fb50 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2120      	movs	r1, #32
 80004f6:	4860      	ldr	r0, [pc, #384]	; (8000678 <display7SEG1+0x360>)
 80004f8:	f001 fb4b 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2140      	movs	r1, #64	; 0x40
 8000500:	485d      	ldr	r0, [pc, #372]	; (8000678 <display7SEG1+0x360>)
 8000502:	f001 fb46 	bl	8001b92 <HAL_GPIO_WritePin>
		break;
 8000506:	e0b3      	b.n	8000670 <display7SEG1+0x358>
	case 6:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2101      	movs	r1, #1
 800050c:	485a      	ldr	r0, [pc, #360]	; (8000678 <display7SEG1+0x360>)
 800050e:	f001 fb40 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000512:	2201      	movs	r2, #1
 8000514:	2102      	movs	r1, #2
 8000516:	4858      	ldr	r0, [pc, #352]	; (8000678 <display7SEG1+0x360>)
 8000518:	f001 fb3b 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2104      	movs	r1, #4
 8000520:	4855      	ldr	r0, [pc, #340]	; (8000678 <display7SEG1+0x360>)
 8000522:	f001 fb36 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2108      	movs	r1, #8
 800052a:	4853      	ldr	r0, [pc, #332]	; (8000678 <display7SEG1+0x360>)
 800052c:	f001 fb31 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	2110      	movs	r1, #16
 8000534:	4850      	ldr	r0, [pc, #320]	; (8000678 <display7SEG1+0x360>)
 8000536:	f001 fb2c 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2120      	movs	r1, #32
 800053e:	484e      	ldr	r0, [pc, #312]	; (8000678 <display7SEG1+0x360>)
 8000540:	f001 fb27 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2140      	movs	r1, #64	; 0x40
 8000548:	484b      	ldr	r0, [pc, #300]	; (8000678 <display7SEG1+0x360>)
 800054a:	f001 fb22 	bl	8001b92 <HAL_GPIO_WritePin>
		break;
 800054e:	e08f      	b.n	8000670 <display7SEG1+0x358>
	case 7:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2101      	movs	r1, #1
 8000554:	4848      	ldr	r0, [pc, #288]	; (8000678 <display7SEG1+0x360>)
 8000556:	f001 fb1c 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2102      	movs	r1, #2
 800055e:	4846      	ldr	r0, [pc, #280]	; (8000678 <display7SEG1+0x360>)
 8000560:	f001 fb17 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	2104      	movs	r1, #4
 8000568:	4843      	ldr	r0, [pc, #268]	; (8000678 <display7SEG1+0x360>)
 800056a:	f001 fb12 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2108      	movs	r1, #8
 8000572:	4841      	ldr	r0, [pc, #260]	; (8000678 <display7SEG1+0x360>)
 8000574:	f001 fb0d 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000578:	2201      	movs	r2, #1
 800057a:	2110      	movs	r1, #16
 800057c:	483e      	ldr	r0, [pc, #248]	; (8000678 <display7SEG1+0x360>)
 800057e:	f001 fb08 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000582:	2201      	movs	r2, #1
 8000584:	2120      	movs	r1, #32
 8000586:	483c      	ldr	r0, [pc, #240]	; (8000678 <display7SEG1+0x360>)
 8000588:	f001 fb03 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2140      	movs	r1, #64	; 0x40
 8000590:	4839      	ldr	r0, [pc, #228]	; (8000678 <display7SEG1+0x360>)
 8000592:	f001 fafe 	bl	8001b92 <HAL_GPIO_WritePin>
		break;
 8000596:	e06b      	b.n	8000670 <display7SEG1+0x358>
	case 8:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2101      	movs	r1, #1
 800059c:	4836      	ldr	r0, [pc, #216]	; (8000678 <display7SEG1+0x360>)
 800059e:	f001 faf8 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2102      	movs	r1, #2
 80005a6:	4834      	ldr	r0, [pc, #208]	; (8000678 <display7SEG1+0x360>)
 80005a8:	f001 faf3 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2104      	movs	r1, #4
 80005b0:	4831      	ldr	r0, [pc, #196]	; (8000678 <display7SEG1+0x360>)
 80005b2:	f001 faee 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2108      	movs	r1, #8
 80005ba:	482f      	ldr	r0, [pc, #188]	; (8000678 <display7SEG1+0x360>)
 80005bc:	f001 fae9 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2110      	movs	r1, #16
 80005c4:	482c      	ldr	r0, [pc, #176]	; (8000678 <display7SEG1+0x360>)
 80005c6:	f001 fae4 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2120      	movs	r1, #32
 80005ce:	482a      	ldr	r0, [pc, #168]	; (8000678 <display7SEG1+0x360>)
 80005d0:	f001 fadf 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2140      	movs	r1, #64	; 0x40
 80005d8:	4827      	ldr	r0, [pc, #156]	; (8000678 <display7SEG1+0x360>)
 80005da:	f001 fada 	bl	8001b92 <HAL_GPIO_WritePin>
		break;
 80005de:	e047      	b.n	8000670 <display7SEG1+0x358>
	case 9:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2101      	movs	r1, #1
 80005e4:	4824      	ldr	r0, [pc, #144]	; (8000678 <display7SEG1+0x360>)
 80005e6:	f001 fad4 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2102      	movs	r1, #2
 80005ee:	4822      	ldr	r0, [pc, #136]	; (8000678 <display7SEG1+0x360>)
 80005f0:	f001 facf 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2104      	movs	r1, #4
 80005f8:	481f      	ldr	r0, [pc, #124]	; (8000678 <display7SEG1+0x360>)
 80005fa:	f001 faca 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2108      	movs	r1, #8
 8000602:	481d      	ldr	r0, [pc, #116]	; (8000678 <display7SEG1+0x360>)
 8000604:	f001 fac5 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000608:	2201      	movs	r2, #1
 800060a:	2110      	movs	r1, #16
 800060c:	481a      	ldr	r0, [pc, #104]	; (8000678 <display7SEG1+0x360>)
 800060e:	f001 fac0 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2120      	movs	r1, #32
 8000616:	4818      	ldr	r0, [pc, #96]	; (8000678 <display7SEG1+0x360>)
 8000618:	f001 fabb 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2140      	movs	r1, #64	; 0x40
 8000620:	4815      	ldr	r0, [pc, #84]	; (8000678 <display7SEG1+0x360>)
 8000622:	f001 fab6 	bl	8001b92 <HAL_GPIO_WritePin>
		break;
 8000626:	e023      	b.n	8000670 <display7SEG1+0x358>
	default:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2101      	movs	r1, #1
 800062c:	4812      	ldr	r0, [pc, #72]	; (8000678 <display7SEG1+0x360>)
 800062e:	f001 fab0 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2102      	movs	r1, #2
 8000636:	4810      	ldr	r0, [pc, #64]	; (8000678 <display7SEG1+0x360>)
 8000638:	f001 faab 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 800063c:	2201      	movs	r2, #1
 800063e:	2104      	movs	r1, #4
 8000640:	480d      	ldr	r0, [pc, #52]	; (8000678 <display7SEG1+0x360>)
 8000642:	f001 faa6 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000646:	2201      	movs	r2, #1
 8000648:	2108      	movs	r1, #8
 800064a:	480b      	ldr	r0, [pc, #44]	; (8000678 <display7SEG1+0x360>)
 800064c:	f001 faa1 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2110      	movs	r1, #16
 8000654:	4808      	ldr	r0, [pc, #32]	; (8000678 <display7SEG1+0x360>)
 8000656:	f001 fa9c 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 800065a:	2201      	movs	r2, #1
 800065c:	2120      	movs	r1, #32
 800065e:	4806      	ldr	r0, [pc, #24]	; (8000678 <display7SEG1+0x360>)
 8000660:	f001 fa97 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2140      	movs	r1, #64	; 0x40
 8000668:	4803      	ldr	r0, [pc, #12]	; (8000678 <display7SEG1+0x360>)
 800066a:	f001 fa92 	bl	8001b92 <HAL_GPIO_WritePin>
		break;
 800066e:	bf00      	nop

	}
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40010c00 	.word	0x40010c00

0800067c <display7SEG2>:

void display7SEG2(int num) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	switch (num) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b09      	cmp	r3, #9
 8000688:	f200 81be 	bhi.w	8000a08 <display7SEG2+0x38c>
 800068c:	a201      	add	r2, pc, #4	; (adr r2, 8000694 <display7SEG2+0x18>)
 800068e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000692:	bf00      	nop
 8000694:	080006bd 	.word	0x080006bd
 8000698:	08000711 	.word	0x08000711
 800069c:	08000765 	.word	0x08000765
 80006a0:	080007b9 	.word	0x080007b9
 80006a4:	0800080d 	.word	0x0800080d
 80006a8:	08000861 	.word	0x08000861
 80006ac:	080008b5 	.word	0x080008b5
 80006b0:	08000909 	.word	0x08000909
 80006b4:	0800095d 	.word	0x0800095d
 80006b8:	080009b1 	.word	0x080009b1
	case 0:
		HAL_GPIO_WritePin(SEG00_GPIO_Port, SEG00_Pin, RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2180      	movs	r1, #128	; 0x80
 80006c0:	48d0      	ldr	r0, [pc, #832]	; (8000a04 <display7SEG2+0x388>)
 80006c2:	f001 fa66 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG01_GPIO_Port, SEG01_Pin, RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006cc:	48cd      	ldr	r0, [pc, #820]	; (8000a04 <display7SEG2+0x388>)
 80006ce:	f001 fa60 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG02_GPIO_Port, SEG02_Pin, RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d8:	48ca      	ldr	r0, [pc, #808]	; (8000a04 <display7SEG2+0x388>)
 80006da:	f001 fa5a 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG03_GPIO_Port, SEG03_Pin, RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e4:	48c7      	ldr	r0, [pc, #796]	; (8000a04 <display7SEG2+0x388>)
 80006e6:	f001 fa54 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG04_GPIO_Port, SEG04_Pin, RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006f0:	48c4      	ldr	r0, [pc, #784]	; (8000a04 <display7SEG2+0x388>)
 80006f2:	f001 fa4e 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG05_GPIO_Port, SEG05_Pin, RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006fc:	48c1      	ldr	r0, [pc, #772]	; (8000a04 <display7SEG2+0x388>)
 80006fe:	f001 fa48 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG06_GPIO_Port, SEG06_Pin, SET);
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000708:	48be      	ldr	r0, [pc, #760]	; (8000a04 <display7SEG2+0x388>)
 800070a:	f001 fa42 	bl	8001b92 <HAL_GPIO_WritePin>
		break;
 800070e:	e1a5      	b.n	8000a5c <display7SEG2+0x3e0>
	case 1:
		HAL_GPIO_WritePin(SEG00_GPIO_Port, SEG00_Pin, SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2180      	movs	r1, #128	; 0x80
 8000714:	48bb      	ldr	r0, [pc, #748]	; (8000a04 <display7SEG2+0x388>)
 8000716:	f001 fa3c 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG01_GPIO_Port, SEG01_Pin, RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000720:	48b8      	ldr	r0, [pc, #736]	; (8000a04 <display7SEG2+0x388>)
 8000722:	f001 fa36 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG02_GPIO_Port, SEG02_Pin, RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072c:	48b5      	ldr	r0, [pc, #724]	; (8000a04 <display7SEG2+0x388>)
 800072e:	f001 fa30 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG03_GPIO_Port, SEG03_Pin, SET);
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000738:	48b2      	ldr	r0, [pc, #712]	; (8000a04 <display7SEG2+0x388>)
 800073a:	f001 fa2a 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG04_GPIO_Port, SEG04_Pin, SET);
 800073e:	2201      	movs	r2, #1
 8000740:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000744:	48af      	ldr	r0, [pc, #700]	; (8000a04 <display7SEG2+0x388>)
 8000746:	f001 fa24 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG05_GPIO_Port, SEG05_Pin, SET);
 800074a:	2201      	movs	r2, #1
 800074c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000750:	48ac      	ldr	r0, [pc, #688]	; (8000a04 <display7SEG2+0x388>)
 8000752:	f001 fa1e 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG06_GPIO_Port, SEG06_Pin, SET);
 8000756:	2201      	movs	r2, #1
 8000758:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075c:	48a9      	ldr	r0, [pc, #676]	; (8000a04 <display7SEG2+0x388>)
 800075e:	f001 fa18 	bl	8001b92 <HAL_GPIO_WritePin>
		break;
 8000762:	e17b      	b.n	8000a5c <display7SEG2+0x3e0>
	case 2:
		HAL_GPIO_WritePin(SEG00_GPIO_Port, SEG00_Pin, RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	48a6      	ldr	r0, [pc, #664]	; (8000a04 <display7SEG2+0x388>)
 800076a:	f001 fa12 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG01_GPIO_Port, SEG01_Pin, RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000774:	48a3      	ldr	r0, [pc, #652]	; (8000a04 <display7SEG2+0x388>)
 8000776:	f001 fa0c 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG02_GPIO_Port, SEG02_Pin, SET);
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000780:	48a0      	ldr	r0, [pc, #640]	; (8000a04 <display7SEG2+0x388>)
 8000782:	f001 fa06 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG03_GPIO_Port, SEG03_Pin, RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078c:	489d      	ldr	r0, [pc, #628]	; (8000a04 <display7SEG2+0x388>)
 800078e:	f001 fa00 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG04_GPIO_Port, SEG04_Pin, RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000798:	489a      	ldr	r0, [pc, #616]	; (8000a04 <display7SEG2+0x388>)
 800079a:	f001 f9fa 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG05_GPIO_Port, SEG05_Pin, SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a4:	4897      	ldr	r0, [pc, #604]	; (8000a04 <display7SEG2+0x388>)
 80007a6:	f001 f9f4 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG06_GPIO_Port, SEG06_Pin, RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b0:	4894      	ldr	r0, [pc, #592]	; (8000a04 <display7SEG2+0x388>)
 80007b2:	f001 f9ee 	bl	8001b92 <HAL_GPIO_WritePin>
		break;
 80007b6:	e151      	b.n	8000a5c <display7SEG2+0x3e0>
	case 3:
		HAL_GPIO_WritePin(SEG00_GPIO_Port, SEG00_Pin, RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	4891      	ldr	r0, [pc, #580]	; (8000a04 <display7SEG2+0x388>)
 80007be:	f001 f9e8 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG01_GPIO_Port, SEG01_Pin, RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c8:	488e      	ldr	r0, [pc, #568]	; (8000a04 <display7SEG2+0x388>)
 80007ca:	f001 f9e2 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG02_GPIO_Port, SEG02_Pin, RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d4:	488b      	ldr	r0, [pc, #556]	; (8000a04 <display7SEG2+0x388>)
 80007d6:	f001 f9dc 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG03_GPIO_Port, SEG03_Pin, RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007e0:	4888      	ldr	r0, [pc, #544]	; (8000a04 <display7SEG2+0x388>)
 80007e2:	f001 f9d6 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG04_GPIO_Port, SEG04_Pin, SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ec:	4885      	ldr	r0, [pc, #532]	; (8000a04 <display7SEG2+0x388>)
 80007ee:	f001 f9d0 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG05_GPIO_Port, SEG05_Pin, SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f8:	4882      	ldr	r0, [pc, #520]	; (8000a04 <display7SEG2+0x388>)
 80007fa:	f001 f9ca 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG06_GPIO_Port, SEG06_Pin, RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000804:	487f      	ldr	r0, [pc, #508]	; (8000a04 <display7SEG2+0x388>)
 8000806:	f001 f9c4 	bl	8001b92 <HAL_GPIO_WritePin>
		break;
 800080a:	e127      	b.n	8000a5c <display7SEG2+0x3e0>
	case 4:
		HAL_GPIO_WritePin(SEG00_GPIO_Port, SEG00_Pin, SET);
 800080c:	2201      	movs	r2, #1
 800080e:	2180      	movs	r1, #128	; 0x80
 8000810:	487c      	ldr	r0, [pc, #496]	; (8000a04 <display7SEG2+0x388>)
 8000812:	f001 f9be 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG01_GPIO_Port, SEG01_Pin, RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081c:	4879      	ldr	r0, [pc, #484]	; (8000a04 <display7SEG2+0x388>)
 800081e:	f001 f9b8 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG02_GPIO_Port, SEG02_Pin, RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000828:	4876      	ldr	r0, [pc, #472]	; (8000a04 <display7SEG2+0x388>)
 800082a:	f001 f9b2 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG03_GPIO_Port, SEG03_Pin, SET);
 800082e:	2201      	movs	r2, #1
 8000830:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000834:	4873      	ldr	r0, [pc, #460]	; (8000a04 <display7SEG2+0x388>)
 8000836:	f001 f9ac 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG04_GPIO_Port, SEG04_Pin, SET);
 800083a:	2201      	movs	r2, #1
 800083c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000840:	4870      	ldr	r0, [pc, #448]	; (8000a04 <display7SEG2+0x388>)
 8000842:	f001 f9a6 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG05_GPIO_Port, SEG05_Pin, RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800084c:	486d      	ldr	r0, [pc, #436]	; (8000a04 <display7SEG2+0x388>)
 800084e:	f001 f9a0 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG06_GPIO_Port, SEG06_Pin, RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000858:	486a      	ldr	r0, [pc, #424]	; (8000a04 <display7SEG2+0x388>)
 800085a:	f001 f99a 	bl	8001b92 <HAL_GPIO_WritePin>
		break;
 800085e:	e0fd      	b.n	8000a5c <display7SEG2+0x3e0>
	case 5:
		HAL_GPIO_WritePin(SEG00_GPIO_Port, SEG00_Pin, RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	2180      	movs	r1, #128	; 0x80
 8000864:	4867      	ldr	r0, [pc, #412]	; (8000a04 <display7SEG2+0x388>)
 8000866:	f001 f994 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG01_GPIO_Port, SEG01_Pin, SET);
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000870:	4864      	ldr	r0, [pc, #400]	; (8000a04 <display7SEG2+0x388>)
 8000872:	f001 f98e 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG02_GPIO_Port, SEG02_Pin, RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 7100 	mov.w	r1, #512	; 0x200
 800087c:	4861      	ldr	r0, [pc, #388]	; (8000a04 <display7SEG2+0x388>)
 800087e:	f001 f988 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG03_GPIO_Port, SEG03_Pin, RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000888:	485e      	ldr	r0, [pc, #376]	; (8000a04 <display7SEG2+0x388>)
 800088a:	f001 f982 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG04_GPIO_Port, SEG04_Pin, SET);
 800088e:	2201      	movs	r2, #1
 8000890:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000894:	485b      	ldr	r0, [pc, #364]	; (8000a04 <display7SEG2+0x388>)
 8000896:	f001 f97c 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG05_GPIO_Port, SEG05_Pin, RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008a0:	4858      	ldr	r0, [pc, #352]	; (8000a04 <display7SEG2+0x388>)
 80008a2:	f001 f976 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG06_GPIO_Port, SEG06_Pin, RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ac:	4855      	ldr	r0, [pc, #340]	; (8000a04 <display7SEG2+0x388>)
 80008ae:	f001 f970 	bl	8001b92 <HAL_GPIO_WritePin>
		break;
 80008b2:	e0d3      	b.n	8000a5c <display7SEG2+0x3e0>
	case 6:
		HAL_GPIO_WritePin(SEG00_GPIO_Port, SEG00_Pin, RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2180      	movs	r1, #128	; 0x80
 80008b8:	4852      	ldr	r0, [pc, #328]	; (8000a04 <display7SEG2+0x388>)
 80008ba:	f001 f96a 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG01_GPIO_Port, SEG01_Pin, SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c4:	484f      	ldr	r0, [pc, #316]	; (8000a04 <display7SEG2+0x388>)
 80008c6:	f001 f964 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG02_GPIO_Port, SEG02_Pin, RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d0:	484c      	ldr	r0, [pc, #304]	; (8000a04 <display7SEG2+0x388>)
 80008d2:	f001 f95e 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG03_GPIO_Port, SEG03_Pin, RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008dc:	4849      	ldr	r0, [pc, #292]	; (8000a04 <display7SEG2+0x388>)
 80008de:	f001 f958 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG04_GPIO_Port, SEG04_Pin, RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008e8:	4846      	ldr	r0, [pc, #280]	; (8000a04 <display7SEG2+0x388>)
 80008ea:	f001 f952 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG05_GPIO_Port, SEG05_Pin, RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008f4:	4843      	ldr	r0, [pc, #268]	; (8000a04 <display7SEG2+0x388>)
 80008f6:	f001 f94c 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG06_GPIO_Port, SEG06_Pin, RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000900:	4840      	ldr	r0, [pc, #256]	; (8000a04 <display7SEG2+0x388>)
 8000902:	f001 f946 	bl	8001b92 <HAL_GPIO_WritePin>
		break;
 8000906:	e0a9      	b.n	8000a5c <display7SEG2+0x3e0>
	case 7:
		HAL_GPIO_WritePin(SEG00_GPIO_Port, SEG00_Pin, RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	2180      	movs	r1, #128	; 0x80
 800090c:	483d      	ldr	r0, [pc, #244]	; (8000a04 <display7SEG2+0x388>)
 800090e:	f001 f940 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG01_GPIO_Port, SEG01_Pin, RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000918:	483a      	ldr	r0, [pc, #232]	; (8000a04 <display7SEG2+0x388>)
 800091a:	f001 f93a 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG02_GPIO_Port, SEG02_Pin, RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000924:	4837      	ldr	r0, [pc, #220]	; (8000a04 <display7SEG2+0x388>)
 8000926:	f001 f934 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG03_GPIO_Port, SEG03_Pin, SET);
 800092a:	2201      	movs	r2, #1
 800092c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000930:	4834      	ldr	r0, [pc, #208]	; (8000a04 <display7SEG2+0x388>)
 8000932:	f001 f92e 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG04_GPIO_Port, SEG04_Pin, SET);
 8000936:	2201      	movs	r2, #1
 8000938:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800093c:	4831      	ldr	r0, [pc, #196]	; (8000a04 <display7SEG2+0x388>)
 800093e:	f001 f928 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG05_GPIO_Port, SEG05_Pin, SET);
 8000942:	2201      	movs	r2, #1
 8000944:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000948:	482e      	ldr	r0, [pc, #184]	; (8000a04 <display7SEG2+0x388>)
 800094a:	f001 f922 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG06_GPIO_Port, SEG06_Pin, SET);
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000954:	482b      	ldr	r0, [pc, #172]	; (8000a04 <display7SEG2+0x388>)
 8000956:	f001 f91c 	bl	8001b92 <HAL_GPIO_WritePin>
		break;
 800095a:	e07f      	b.n	8000a5c <display7SEG2+0x3e0>
	case 8:
		HAL_GPIO_WritePin(SEG00_GPIO_Port, SEG00_Pin, RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	2180      	movs	r1, #128	; 0x80
 8000960:	4828      	ldr	r0, [pc, #160]	; (8000a04 <display7SEG2+0x388>)
 8000962:	f001 f916 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG01_GPIO_Port, SEG01_Pin, RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 7180 	mov.w	r1, #256	; 0x100
 800096c:	4825      	ldr	r0, [pc, #148]	; (8000a04 <display7SEG2+0x388>)
 800096e:	f001 f910 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG02_GPIO_Port, SEG02_Pin, RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000978:	4822      	ldr	r0, [pc, #136]	; (8000a04 <display7SEG2+0x388>)
 800097a:	f001 f90a 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG03_GPIO_Port, SEG03_Pin, RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000984:	481f      	ldr	r0, [pc, #124]	; (8000a04 <display7SEG2+0x388>)
 8000986:	f001 f904 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG04_GPIO_Port, SEG04_Pin, RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000990:	481c      	ldr	r0, [pc, #112]	; (8000a04 <display7SEG2+0x388>)
 8000992:	f001 f8fe 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG05_GPIO_Port, SEG05_Pin, RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800099c:	4819      	ldr	r0, [pc, #100]	; (8000a04 <display7SEG2+0x388>)
 800099e:	f001 f8f8 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG06_GPIO_Port, SEG06_Pin, RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a8:	4816      	ldr	r0, [pc, #88]	; (8000a04 <display7SEG2+0x388>)
 80009aa:	f001 f8f2 	bl	8001b92 <HAL_GPIO_WritePin>
		break;
 80009ae:	e055      	b.n	8000a5c <display7SEG2+0x3e0>
	case 9:
		HAL_GPIO_WritePin(SEG00_GPIO_Port, SEG00_Pin, RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2180      	movs	r1, #128	; 0x80
 80009b4:	4813      	ldr	r0, [pc, #76]	; (8000a04 <display7SEG2+0x388>)
 80009b6:	f001 f8ec 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG01_GPIO_Port, SEG01_Pin, RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c0:	4810      	ldr	r0, [pc, #64]	; (8000a04 <display7SEG2+0x388>)
 80009c2:	f001 f8e6 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG02_GPIO_Port, SEG02_Pin, RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009cc:	480d      	ldr	r0, [pc, #52]	; (8000a04 <display7SEG2+0x388>)
 80009ce:	f001 f8e0 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG03_GPIO_Port, SEG03_Pin, RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d8:	480a      	ldr	r0, [pc, #40]	; (8000a04 <display7SEG2+0x388>)
 80009da:	f001 f8da 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG04_GPIO_Port, SEG04_Pin, SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009e4:	4807      	ldr	r0, [pc, #28]	; (8000a04 <display7SEG2+0x388>)
 80009e6:	f001 f8d4 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG05_GPIO_Port, SEG05_Pin, RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <display7SEG2+0x388>)
 80009f2:	f001 f8ce 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG06_GPIO_Port, SEG06_Pin, RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fc:	4801      	ldr	r0, [pc, #4]	; (8000a04 <display7SEG2+0x388>)
 80009fe:	f001 f8c8 	bl	8001b92 <HAL_GPIO_WritePin>
		break;
 8000a02:	e02b      	b.n	8000a5c <display7SEG2+0x3e0>
 8000a04:	40010c00 	.word	0x40010c00
	default:
		HAL_GPIO_WritePin(SEG00_GPIO_Port, SEG00_Pin, SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2180      	movs	r1, #128	; 0x80
 8000a0c:	4815      	ldr	r0, [pc, #84]	; (8000a64 <display7SEG2+0x3e8>)
 8000a0e:	f001 f8c0 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG01_GPIO_Port, SEG01_Pin, SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a18:	4812      	ldr	r0, [pc, #72]	; (8000a64 <display7SEG2+0x3e8>)
 8000a1a:	f001 f8ba 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG02_GPIO_Port, SEG02_Pin, SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a24:	480f      	ldr	r0, [pc, #60]	; (8000a64 <display7SEG2+0x3e8>)
 8000a26:	f001 f8b4 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG03_GPIO_Port, SEG03_Pin, SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a30:	480c      	ldr	r0, [pc, #48]	; (8000a64 <display7SEG2+0x3e8>)
 8000a32:	f001 f8ae 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG04_GPIO_Port, SEG04_Pin, SET);
 8000a36:	2201      	movs	r2, #1
 8000a38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <display7SEG2+0x3e8>)
 8000a3e:	f001 f8a8 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG05_GPIO_Port, SEG05_Pin, SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a48:	4806      	ldr	r0, [pc, #24]	; (8000a64 <display7SEG2+0x3e8>)
 8000a4a:	f001 f8a2 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG06_GPIO_Port, SEG06_Pin, SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a54:	4803      	ldr	r0, [pc, #12]	; (8000a64 <display7SEG2+0x3e8>)
 8000a56:	f001 f89c 	bl	8001b92 <HAL_GPIO_WritePin>
		break;
 8000a5a:	bf00      	nop

	}
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40010c00 	.word	0x40010c00

08000a68 <update7SEG1>:

void update7SEG1(int index) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	int led1_display = time1_display / 10;
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <update7SEG1+0x84>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a1e      	ldr	r2, [pc, #120]	; (8000af0 <update7SEG1+0x88>)
 8000a76:	fb82 1203 	smull	r1, r2, r2, r3
 8000a7a:	1092      	asrs	r2, r2, #2
 8000a7c:	17db      	asrs	r3, r3, #31
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	60fb      	str	r3, [r7, #12]
	int led2_display = time1_display % 10;
 8000a82:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <update7SEG1+0x84>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <update7SEG1+0x88>)
 8000a88:	fb83 1302 	smull	r1, r3, r3, r2
 8000a8c:	1099      	asrs	r1, r3, #2
 8000a8e:	17d3      	asrs	r3, r2, #31
 8000a90:	1ac9      	subs	r1, r1, r3
 8000a92:	460b      	mov	r3, r1
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	440b      	add	r3, r1
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	60bb      	str	r3, [r7, #8]

	switch (index) {
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d003      	beq.n	8000aac <update7SEG1+0x44>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d00e      	beq.n	8000ac8 <update7SEG1+0x60>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
		display7SEG1(led2_display);
		break;
	default:
		break;
 8000aaa:	e01b      	b.n	8000ae4 <update7SEG1+0x7c>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2110      	movs	r1, #16
 8000ab0:	4810      	ldr	r0, [pc, #64]	; (8000af4 <update7SEG1+0x8c>)
 8000ab2:	f001 f86e 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2120      	movs	r1, #32
 8000aba:	480e      	ldr	r0, [pc, #56]	; (8000af4 <update7SEG1+0x8c>)
 8000abc:	f001 f869 	bl	8001b92 <HAL_GPIO_WritePin>
		display7SEG1(led1_display);
 8000ac0:	68f8      	ldr	r0, [r7, #12]
 8000ac2:	f7ff fc29 	bl	8000318 <display7SEG1>
		break;
 8000ac6:	e00d      	b.n	8000ae4 <update7SEG1+0x7c>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2110      	movs	r1, #16
 8000acc:	4809      	ldr	r0, [pc, #36]	; (8000af4 <update7SEG1+0x8c>)
 8000ace:	f001 f860 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2120      	movs	r1, #32
 8000ad6:	4807      	ldr	r0, [pc, #28]	; (8000af4 <update7SEG1+0x8c>)
 8000ad8:	f001 f85b 	bl	8001b92 <HAL_GPIO_WritePin>
		display7SEG1(led2_display);
 8000adc:	68b8      	ldr	r0, [r7, #8]
 8000ade:	f7ff fc1b 	bl	8000318 <display7SEG1>
		break;
 8000ae2:	bf00      	nop
	}
}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000028 	.word	0x20000028
 8000af0:	66666667 	.word	0x66666667
 8000af4:	40010800 	.word	0x40010800

08000af8 <update7SEG2>:

void update7SEG2(int index) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	int led3_display = time2_display / 10;
 8000b00:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <update7SEG2+0x84>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a1e      	ldr	r2, [pc, #120]	; (8000b80 <update7SEG2+0x88>)
 8000b06:	fb82 1203 	smull	r1, r2, r2, r3
 8000b0a:	1092      	asrs	r2, r2, #2
 8000b0c:	17db      	asrs	r3, r3, #31
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	60fb      	str	r3, [r7, #12]
	int led4_display = time2_display % 10;
 8000b12:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <update7SEG2+0x84>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <update7SEG2+0x88>)
 8000b18:	fb83 1302 	smull	r1, r3, r3, r2
 8000b1c:	1099      	asrs	r1, r3, #2
 8000b1e:	17d3      	asrs	r3, r2, #31
 8000b20:	1ac9      	subs	r1, r1, r3
 8000b22:	460b      	mov	r3, r1
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	440b      	add	r3, r1
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	60bb      	str	r3, [r7, #8]

	switch (index) {
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <update7SEG2+0x44>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d00e      	beq.n	8000b58 <update7SEG2+0x60>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
		display7SEG2(led4_display);
		break;
	default:
		break;
 8000b3a:	e01b      	b.n	8000b74 <update7SEG2+0x7c>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2140      	movs	r1, #64	; 0x40
 8000b40:	4810      	ldr	r0, [pc, #64]	; (8000b84 <update7SEG2+0x8c>)
 8000b42:	f001 f826 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000b46:	2201      	movs	r2, #1
 8000b48:	2180      	movs	r1, #128	; 0x80
 8000b4a:	480e      	ldr	r0, [pc, #56]	; (8000b84 <update7SEG2+0x8c>)
 8000b4c:	f001 f821 	bl	8001b92 <HAL_GPIO_WritePin>
		display7SEG2(led3_display);
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f7ff fd93 	bl	800067c <display7SEG2>
		break;
 8000b56:	e00d      	b.n	8000b74 <update7SEG2+0x7c>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2140      	movs	r1, #64	; 0x40
 8000b5c:	4809      	ldr	r0, [pc, #36]	; (8000b84 <update7SEG2+0x8c>)
 8000b5e:	f001 f818 	bl	8001b92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2180      	movs	r1, #128	; 0x80
 8000b66:	4807      	ldr	r0, [pc, #28]	; (8000b84 <update7SEG2+0x8c>)
 8000b68:	f001 f813 	bl	8001b92 <HAL_GPIO_WritePin>
		display7SEG2(led4_display);
 8000b6c:	68b8      	ldr	r0, [r7, #8]
 8000b6e:	f7ff fd85 	bl	800067c <display7SEG2>
		break;
 8000b72:	bf00      	nop
	}
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	2000002c 	.word	0x2000002c
 8000b80:	66666667 	.word	0x66666667
 8000b84:	40010800 	.word	0x40010800

08000b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8c:	f000 fcfe 	bl	800158c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b90:	f000 f824 	bl	8000bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b94:	f000 f8aa 	bl	8000cec <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b98:	f000 f85c 	bl	8000c54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000b9c:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <main+0x3c>)
 8000b9e:	f001 fc61 	bl	8002464 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	status1 = INIT;
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <main+0x40>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	601a      	str	r2, [r3, #0]
	status2 = INIT;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <main+0x44>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	601a      	str	r2, [r3, #0]
	idx = 1;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <main+0x48>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]
	counter = 10;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <main+0x4c>)
 8000bb6:	220a      	movs	r2, #10
 8000bb8:	601a      	str	r2, [r3, #0]
	timeCounter = 100;
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <main+0x50>)
 8000bbc:	2264      	movs	r2, #100	; 0x64
 8000bbe:	601a      	str	r2, [r3, #0]
	while (1) {
 8000bc0:	e7fe      	b.n	8000bc0 <main+0x38>
 8000bc2:	bf00      	nop
 8000bc4:	20000090 	.word	0x20000090
 8000bc8:	20000088 	.word	0x20000088
 8000bcc:	2000008c 	.word	0x2000008c
 8000bd0:	20000024 	.word	0x20000024
 8000bd4:	2000004c 	.word	0x2000004c
 8000bd8:	20000030 	.word	0x20000030

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b090      	sub	sp, #64	; 0x40
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	f107 0318 	add.w	r3, r7, #24
 8000be6:	2228      	movs	r2, #40	; 0x28
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f001 fff2 	bl	8002bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c02:	2301      	movs	r3, #1
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c06:	2310      	movs	r3, #16
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0e:	f107 0318 	add.w	r3, r7, #24
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 ffee 	bl	8001bf4 <HAL_RCC_OscConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c1e:	f000 f8d7 	bl	8000dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c22:	230f      	movs	r3, #15
 8000c24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 fa5c 	bl	80020f8 <HAL_RCC_ClockConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c46:	f000 f8c3 	bl	8000dd0 <Error_Handler>
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3740      	adds	r7, #64	; 0x40
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c68:	463b      	mov	r3, r7
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c70:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <MX_TIM2_Init+0x94>)
 8000c72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <MX_TIM2_Init+0x94>)
 8000c7a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <MX_TIM2_Init+0x94>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <MX_TIM2_Init+0x94>)
 8000c88:	2209      	movs	r2, #9
 8000c8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_TIM2_Init+0x94>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <MX_TIM2_Init+0x94>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c98:	4813      	ldr	r0, [pc, #76]	; (8000ce8 <MX_TIM2_Init+0x94>)
 8000c9a:	f001 fb93 	bl	80023c4 <HAL_TIM_Base_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ca4:	f000 f894 	bl	8000dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <MX_TIM2_Init+0x94>)
 8000cb6:	f001 fd29 	bl	800270c <HAL_TIM_ConfigClockSource>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cc0:	f000 f886 	bl	8000dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ccc:	463b      	mov	r3, r7
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_TIM2_Init+0x94>)
 8000cd2:	f001 fef1 	bl	8002ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cdc:	f000 f878 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000090 	.word	0x20000090

08000cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf2:	f107 0308 	add.w	r3, r7, #8
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <MX_GPIO_Init+0xb8>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a27      	ldr	r2, [pc, #156]	; (8000da4 <MX_GPIO_Init+0xb8>)
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b25      	ldr	r3, [pc, #148]	; (8000da4 <MX_GPIO_Init+0xb8>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <MX_GPIO_Init+0xb8>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a21      	ldr	r2, [pc, #132]	; (8000da4 <MX_GPIO_Init+0xb8>)
 8000d1e:	f043 0308 	orr.w	r3, r3, #8
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <MX_GPIO_Init+0xb8>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0308 	and.w	r3, r3, #8
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000d30:	2200      	movs	r2, #0
 8000d32:	f643 71f0 	movw	r1, #16368	; 0x3ff0
 8000d36:	481c      	ldr	r0, [pc, #112]	; (8000da8 <MX_GPIO_Init+0xbc>)
 8000d38:	f000 ff2b 	bl	8001b92 <HAL_GPIO_WritePin>
                          |R1_Pin|G1_Pin|Y1_Pin|R2_Pin
                          |G2_Pin|Y2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG03_Pin
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000d42:	481a      	ldr	r0, [pc, #104]	; (8000dac <MX_GPIO_Init+0xc0>)
 8000d44:	f000 ff25 	bl	8001b92 <HAL_GPIO_WritePin>
                          |SEG04_Pin|SEG05_Pin|SEG06_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|SEG00_Pin
                          |SEG01_Pin|SEG02_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8000d48:	230e      	movs	r3, #14
 8000d4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 0308 	add.w	r3, r7, #8
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4813      	ldr	r0, [pc, #76]	; (8000da8 <MX_GPIO_Init+0xbc>)
 8000d5c:	f000 fd86 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           R1_Pin G1_Pin Y1_Pin R2_Pin
                           G2_Pin Y2_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000d60:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8000d64:	60bb      	str	r3, [r7, #8]
                          |R1_Pin|G1_Pin|Y1_Pin|R2_Pin
                          |G2_Pin|Y2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	4619      	mov	r1, r3
 8000d78:	480b      	ldr	r0, [pc, #44]	; (8000da8 <MX_GPIO_Init+0xbc>)
 8000d7a:	f000 fd77 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG03_Pin
                           SEG04_Pin SEG05_Pin SEG06_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin SEG00_Pin
                           SEG01_Pin SEG02_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG03_Pin
 8000d7e:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000d82:	60bb      	str	r3, [r7, #8]
                          |SEG04_Pin|SEG05_Pin|SEG06_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|SEG00_Pin
                          |SEG01_Pin|SEG02_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d90:	f107 0308 	add.w	r3, r7, #8
 8000d94:	4619      	mov	r1, r3
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_GPIO_Init+0xc0>)
 8000d98:	f000 fd68 	bl	800186c <HAL_GPIO_Init>

}
 8000d9c:	bf00      	nop
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40010800 	.word	0x40010800
 8000dac:	40010c00 	.word	0x40010c00

08000db0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	timerRun();
 8000db8:	f000 fae6 	bl	8001388 <timerRun>
	mode1_control();
 8000dbc:	f000 f8aa 	bl	8000f14 <mode1_control>
//	mode2_control();
	getKeyInput1();
 8000dc0:	f7ff fa12 	bl	80001e8 <getKeyInput1>
	getKeyInput2();
 8000dc4:	f7ff fa5c 	bl	8000280 <getKeyInput2>
//	getKeyInput3();

}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd4:	b672      	cpsid	i
}
 8000dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000dd8:	e7fe      	b.n	8000dd8 <Error_Handler+0x8>
	...

08000ddc <normal_mode>:
 *      Author: Linh
 */

#include "mode_control.h"

void normal_mode() {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0

	if (timeCounter == 0) {
 8000de0:	4b45      	ldr	r3, [pc, #276]	; (8000ef8 <normal_mode+0x11c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d160      	bne.n	8000eaa <normal_mode+0xce>
		timeCounter = 100;
 8000de8:	4b43      	ldr	r3, [pc, #268]	; (8000ef8 <normal_mode+0x11c>)
 8000dea:	2264      	movs	r2, #100	; 0x64
 8000dec:	601a      	str	r2, [r3, #0]
		if (counter == 0) {
 8000dee:	4b43      	ldr	r3, [pc, #268]	; (8000efc <normal_mode+0x120>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d109      	bne.n	8000e0a <normal_mode+0x2e>
			counter = redTime + greenTime + yellowTime;
 8000df6:	4b42      	ldr	r3, [pc, #264]	; (8000f00 <normal_mode+0x124>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b42      	ldr	r3, [pc, #264]	; (8000f04 <normal_mode+0x128>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	441a      	add	r2, r3
 8000e00:	4b41      	ldr	r3, [pc, #260]	; (8000f08 <normal_mode+0x12c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a3d      	ldr	r2, [pc, #244]	; (8000efc <normal_mode+0x120>)
 8000e08:	6013      	str	r3, [r2, #0]
		}

		if (counter == redTime + greenTime + yellowTime) {
 8000e0a:	4b3d      	ldr	r3, [pc, #244]	; (8000f00 <normal_mode+0x124>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4b3d      	ldr	r3, [pc, #244]	; (8000f04 <normal_mode+0x128>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	441a      	add	r2, r3
 8000e14:	4b3c      	ldr	r3, [pc, #240]	; (8000f08 <normal_mode+0x12c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	441a      	add	r2, r3
 8000e1a:	4b38      	ldr	r3, [pc, #224]	; (8000efc <normal_mode+0x120>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d10c      	bne.n	8000e3c <normal_mode+0x60>
			//Red1 led and Green2 led on.
			//Red1 led
			setRed1Light();
 8000e22:	f000 fa21 	bl	8001268 <setRed1Light>
			time1_display = redTime;
 8000e26:	4b36      	ldr	r3, [pc, #216]	; (8000f00 <normal_mode+0x124>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a38      	ldr	r2, [pc, #224]	; (8000f0c <normal_mode+0x130>)
 8000e2c:	6013      	str	r3, [r2, #0]
			//Green2 led
			setGreen2Light();
 8000e2e:	f000 fa7b 	bl	8001328 <setGreen2Light>
			time2_display = greenTime;
 8000e32:	4b34      	ldr	r3, [pc, #208]	; (8000f04 <normal_mode+0x128>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a36      	ldr	r2, [pc, #216]	; (8000f10 <normal_mode+0x134>)
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	e031      	b.n	8000ea0 <normal_mode+0xc4>
		}

		else if (counter == redTime + yellowTime) {
 8000e3c:	4b30      	ldr	r3, [pc, #192]	; (8000f00 <normal_mode+0x124>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b31      	ldr	r3, [pc, #196]	; (8000f08 <normal_mode+0x12c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	441a      	add	r2, r3
 8000e46:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <normal_mode+0x120>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d106      	bne.n	8000e5c <normal_mode+0x80>
			//Red1 led and Yellow2 led on.
			//Yellow2 led
			setYellow2Light();
 8000e4e:	f000 fa83 	bl	8001358 <setYellow2Light>
			time2_display = yellowTime;
 8000e52:	4b2d      	ldr	r3, [pc, #180]	; (8000f08 <normal_mode+0x12c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a2e      	ldr	r2, [pc, #184]	; (8000f10 <normal_mode+0x134>)
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	e021      	b.n	8000ea0 <normal_mode+0xc4>
		}

		else if (counter == greenTime + yellowTime) {
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <normal_mode+0x128>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <normal_mode+0x12c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	441a      	add	r2, r3
 8000e66:	4b25      	ldr	r3, [pc, #148]	; (8000efc <normal_mode+0x120>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d10c      	bne.n	8000e88 <normal_mode+0xac>
			//Green1 led and Red2 led on.
			//Green1 led
			setGreen1Light();
 8000e6e:	f000 fa13 	bl	8001298 <setGreen1Light>
			time1_display = greenTime;
 8000e72:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <normal_mode+0x128>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a25      	ldr	r2, [pc, #148]	; (8000f0c <normal_mode+0x130>)
 8000e78:	6013      	str	r3, [r2, #0]
			//Red2 led
			setRed2Light();
 8000e7a:	f000 fa3d 	bl	80012f8 <setRed2Light>
			time2_display = redTime;
 8000e7e:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <normal_mode+0x124>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a23      	ldr	r2, [pc, #140]	; (8000f10 <normal_mode+0x134>)
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	e00b      	b.n	8000ea0 <normal_mode+0xc4>
		}

		else if (counter == yellowTime) {
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <normal_mode+0x120>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <normal_mode+0x12c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d105      	bne.n	8000ea0 <normal_mode+0xc4>
			//Yellow1 led and Red2 led on.
			//Yellow1 led
			setYellow1Light();
 8000e94:	f000 fa18 	bl	80012c8 <setYellow1Light>
			time1_display = yellowTime;
 8000e98:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <normal_mode+0x12c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <normal_mode+0x130>)
 8000e9e:	6013      	str	r3, [r2, #0]
		}

		counter--;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <normal_mode+0x120>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	4a15      	ldr	r2, [pc, #84]	; (8000efc <normal_mode+0x120>)
 8000ea8:	6013      	str	r3, [r2, #0]
	}

	if (timeCounter == 100) {
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <normal_mode+0x11c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b64      	cmp	r3, #100	; 0x64
 8000eb0:	d106      	bne.n	8000ec0 <normal_mode+0xe4>
		update7SEG1(0);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f7ff fdd8 	bl	8000a68 <update7SEG1>
		update7SEG2(0);
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f7ff fe1d 	bl	8000af8 <update7SEG2>
 8000ebe:	e013      	b.n	8000ee8 <normal_mode+0x10c>
	}

	else if (timeCounter == 50) {
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <normal_mode+0x11c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b32      	cmp	r3, #50	; 0x32
 8000ec6:	d10f      	bne.n	8000ee8 <normal_mode+0x10c>
		update7SEG1(1);
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f7ff fdcd 	bl	8000a68 <update7SEG1>
		update7SEG2(1);
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f7ff fe12 	bl	8000af8 <update7SEG2>

		time1_display--;
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <normal_mode+0x130>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <normal_mode+0x130>)
 8000edc:	6013      	str	r3, [r2, #0]
		time2_display--;
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <normal_mode+0x134>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <normal_mode+0x134>)
 8000ee6:	6013      	str	r3, [r2, #0]
	}

	timeCounter--;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <normal_mode+0x11c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	4a02      	ldr	r2, [pc, #8]	; (8000ef8 <normal_mode+0x11c>)
 8000ef0:	6013      	str	r3, [r2, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000030 	.word	0x20000030
 8000efc:	2000004c 	.word	0x2000004c
 8000f00:	20000034 	.word	0x20000034
 8000f04:	20000038 	.word	0x20000038
 8000f08:	2000003c 	.word	0x2000003c
 8000f0c:	20000028 	.word	0x20000028
 8000f10:	2000002c 	.word	0x2000002c

08000f14 <mode1_control>:

void mode1_control() {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	if (isButton1Pressed() == 1) {
 8000f18:	f7ff f918 	bl	800014c <isButton1Pressed>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d10b      	bne.n	8000f3a <mode1_control+0x26>
		modeCounter++;
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <mode1_control+0x68>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	3301      	adds	r3, #1
 8000f28:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <mode1_control+0x68>)
 8000f2a:	6013      	str	r3, [r2, #0]
		if (modeCounter > 4) {
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <mode1_control+0x68>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b04      	cmp	r3, #4
 8000f32:	dd02      	ble.n	8000f3a <mode1_control+0x26>
			modeCounter = 1;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <mode1_control+0x68>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	601a      	str	r2, [r3, #0]
		}
	}

	switch (modeCounter) {
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <mode1_control+0x68>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	2b03      	cmp	r3, #3
 8000f42:	d817      	bhi.n	8000f74 <mode1_control+0x60>
 8000f44:	a201      	add	r2, pc, #4	; (adr r2, 8000f4c <mode1_control+0x38>)
 8000f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4a:	bf00      	nop
 8000f4c:	08000f5d 	.word	0x08000f5d
 8000f50:	08000f63 	.word	0x08000f63
 8000f54:	08000f69 	.word	0x08000f69
 8000f58:	08000f6f 	.word	0x08000f6f
	case 1:
		normal_mode();
 8000f5c:	f7ff ff3e 	bl	8000ddc <normal_mode>
		break;
 8000f60:	e009      	b.n	8000f76 <mode1_control+0x62>
	case 2:
		mode2_control();
 8000f62:	f000 f80d 	bl	8000f80 <mode2_control>
		break;
 8000f66:	e006      	b.n	8000f76 <mode1_control+0x62>
	case 3:
		mode3_control();
 8000f68:	f000 f886 	bl	8001078 <mode3_control>
		break;
 8000f6c:	e003      	b.n	8000f76 <mode1_control+0x62>
	case 4:
		mode4_control();
 8000f6e:	f000 f8ff 	bl	8001170 <mode4_control>
		break;
 8000f72:	e000      	b.n	8000f76 <mode1_control+0x62>
	default:
		break;
 8000f74:	bf00      	nop
	}
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000050 	.word	0x20000050

08000f80 <mode2_control>:

void mode2_control() {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	time2_display = 2;
 8000f84:	4b33      	ldr	r3, [pc, #204]	; (8001054 <mode2_control+0xd4>)
 8000f86:	2202      	movs	r2, #2
 8000f88:	601a      	str	r2, [r3, #0]

	if (isButton2Pressed() == 1) {
 8000f8a:	f7ff f8f1 	bl	8000170 <isButton2Pressed>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d117      	bne.n	8000fc4 <mode2_control+0x44>
		red_temp++;
 8000f94:	4b30      	ldr	r3, [pc, #192]	; (8001058 <mode2_control+0xd8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	4a2f      	ldr	r2, [pc, #188]	; (8001058 <mode2_control+0xd8>)
 8000f9c:	6013      	str	r3, [r2, #0]
		time1_display++;
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	; (800105c <mode2_control+0xdc>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	4a2d      	ldr	r2, [pc, #180]	; (800105c <mode2_control+0xdc>)
 8000fa6:	6013      	str	r3, [r2, #0]
		if (red_temp > 99 || time1_display > 99) {
 8000fa8:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <mode2_control+0xd8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b63      	cmp	r3, #99	; 0x63
 8000fae:	dc03      	bgt.n	8000fb8 <mode2_control+0x38>
 8000fb0:	4b2a      	ldr	r3, [pc, #168]	; (800105c <mode2_control+0xdc>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b63      	cmp	r3, #99	; 0x63
 8000fb6:	dd05      	ble.n	8000fc4 <mode2_control+0x44>
			red_temp = 1;
 8000fb8:	4b27      	ldr	r3, [pc, #156]	; (8001058 <mode2_control+0xd8>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]
			time1_display = 1;
 8000fbe:	4b27      	ldr	r3, [pc, #156]	; (800105c <mode2_control+0xdc>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]
		}
	}

	if (isButton3Pressed() == 1)
 8000fc4:	f7ff f8e6 	bl	8000194 <isButton3Pressed>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d10d      	bne.n	8000fea <mode2_control+0x6a>
	{
		redTime = red_temp;
 8000fce:	4b22      	ldr	r3, [pc, #136]	; (8001058 <mode2_control+0xd8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a23      	ldr	r2, [pc, #140]	; (8001060 <mode2_control+0xe0>)
 8000fd4:	6013      	str	r3, [r2, #0]
		counter = red_temp + green_temp + yellow_temp;
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <mode2_control+0xd8>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b22      	ldr	r3, [pc, #136]	; (8001064 <mode2_control+0xe4>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	441a      	add	r2, r3
 8000fe0:	4b21      	ldr	r3, [pc, #132]	; (8001068 <mode2_control+0xe8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4a21      	ldr	r2, [pc, #132]	; (800106c <mode2_control+0xec>)
 8000fe8:	6013      	str	r3, [r2, #0]
	}

	if (timeCounter == 0) {
 8000fea:	4b21      	ldr	r3, [pc, #132]	; (8001070 <mode2_control+0xf0>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d102      	bne.n	8000ff8 <mode2_control+0x78>
		timeCounter = 100;
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <mode2_control+0xf0>)
 8000ff4:	2264      	movs	r2, #100	; 0x64
 8000ff6:	601a      	str	r2, [r3, #0]
	}

	if (timeCounter == 100 || timeCounter == 50) {
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <mode2_control+0xf0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b64      	cmp	r3, #100	; 0x64
 8000ffe:	d003      	beq.n	8001008 <mode2_control+0x88>
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <mode2_control+0xf0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b32      	cmp	r3, #50	; 0x32
 8001006:	d11e      	bne.n	8001046 <mode2_control+0xc6>
		HAL_GPIO_TogglePin(R1_GPIO_Port, R1_Pin);
 8001008:	f44f 7180 	mov.w	r1, #256	; 0x100
 800100c:	4819      	ldr	r0, [pc, #100]	; (8001074 <mode2_control+0xf4>)
 800100e:	f000 fdd8 	bl	8001bc2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(R2_GPIO_Port, R2_Pin);
 8001012:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001016:	4817      	ldr	r0, [pc, #92]	; (8001074 <mode2_control+0xf4>)
 8001018:	f000 fdd3 	bl	8001bc2 <HAL_GPIO_TogglePin>

		if (timeCounter == 100) {
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <mode2_control+0xf0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b64      	cmp	r3, #100	; 0x64
 8001022:	d106      	bne.n	8001032 <mode2_control+0xb2>
			update7SEG1(0);
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff fd1f 	bl	8000a68 <update7SEG1>
			update7SEG2(0);
 800102a:	2000      	movs	r0, #0
 800102c:	f7ff fd64 	bl	8000af8 <update7SEG2>
 8001030:	e009      	b.n	8001046 <mode2_control+0xc6>
		} else if (timeCounter == 50) {
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <mode2_control+0xf0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b32      	cmp	r3, #50	; 0x32
 8001038:	d105      	bne.n	8001046 <mode2_control+0xc6>
			update7SEG1(1);
 800103a:	2001      	movs	r0, #1
 800103c:	f7ff fd14 	bl	8000a68 <update7SEG1>
			update7SEG2(1);
 8001040:	2001      	movs	r0, #1
 8001042:	f7ff fd59 	bl	8000af8 <update7SEG2>
		}
	}



	timeCounter--;
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <mode2_control+0xf0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	3b01      	subs	r3, #1
 800104c:	4a08      	ldr	r2, [pc, #32]	; (8001070 <mode2_control+0xf0>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	2000002c 	.word	0x2000002c
 8001058:	20000040 	.word	0x20000040
 800105c:	20000028 	.word	0x20000028
 8001060:	20000034 	.word	0x20000034
 8001064:	20000044 	.word	0x20000044
 8001068:	20000048 	.word	0x20000048
 800106c:	2000004c 	.word	0x2000004c
 8001070:	20000030 	.word	0x20000030
 8001074:	40010800 	.word	0x40010800

08001078 <mode3_control>:



void mode3_control() {
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	time2_display = 3;
 800107c:	4b33      	ldr	r3, [pc, #204]	; (800114c <mode3_control+0xd4>)
 800107e:	2203      	movs	r2, #3
 8001080:	601a      	str	r2, [r3, #0]

	if (isButton2Pressed() == 1) {
 8001082:	f7ff f875 	bl	8000170 <isButton2Pressed>
 8001086:	4603      	mov	r3, r0
 8001088:	2b01      	cmp	r3, #1
 800108a:	d117      	bne.n	80010bc <mode3_control+0x44>
		yellow_temp++;
 800108c:	4b30      	ldr	r3, [pc, #192]	; (8001150 <mode3_control+0xd8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	3301      	adds	r3, #1
 8001092:	4a2f      	ldr	r2, [pc, #188]	; (8001150 <mode3_control+0xd8>)
 8001094:	6013      	str	r3, [r2, #0]
		time1_display++;
 8001096:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <mode3_control+0xdc>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	3301      	adds	r3, #1
 800109c:	4a2d      	ldr	r2, [pc, #180]	; (8001154 <mode3_control+0xdc>)
 800109e:	6013      	str	r3, [r2, #0]
		if (yellow_temp > 99 || time1_display > 99) {
 80010a0:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <mode3_control+0xd8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b63      	cmp	r3, #99	; 0x63
 80010a6:	dc03      	bgt.n	80010b0 <mode3_control+0x38>
 80010a8:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <mode3_control+0xdc>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b63      	cmp	r3, #99	; 0x63
 80010ae:	dd05      	ble.n	80010bc <mode3_control+0x44>
			yellow_temp = 1;
 80010b0:	4b27      	ldr	r3, [pc, #156]	; (8001150 <mode3_control+0xd8>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	601a      	str	r2, [r3, #0]
			time1_display = 1;
 80010b6:	4b27      	ldr	r3, [pc, #156]	; (8001154 <mode3_control+0xdc>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	601a      	str	r2, [r3, #0]
		}
	}

	if (isButton3Pressed() == 1)
 80010bc:	f7ff f86a 	bl	8000194 <isButton3Pressed>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d10d      	bne.n	80010e2 <mode3_control+0x6a>
	{
		yellowTime = yellow_temp;
 80010c6:	4b22      	ldr	r3, [pc, #136]	; (8001150 <mode3_control+0xd8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a23      	ldr	r2, [pc, #140]	; (8001158 <mode3_control+0xe0>)
 80010cc:	6013      	str	r3, [r2, #0]
		counter = red_temp + green_temp + yellow_temp;
 80010ce:	4b23      	ldr	r3, [pc, #140]	; (800115c <mode3_control+0xe4>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4b23      	ldr	r3, [pc, #140]	; (8001160 <mode3_control+0xe8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	441a      	add	r2, r3
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <mode3_control+0xd8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4413      	add	r3, r2
 80010de:	4a21      	ldr	r2, [pc, #132]	; (8001164 <mode3_control+0xec>)
 80010e0:	6013      	str	r3, [r2, #0]
	}

	if (timeCounter == 0) {
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <mode3_control+0xf0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d102      	bne.n	80010f0 <mode3_control+0x78>
		timeCounter = 100;
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <mode3_control+0xf0>)
 80010ec:	2264      	movs	r2, #100	; 0x64
 80010ee:	601a      	str	r2, [r3, #0]
	}

	if (timeCounter == 100 || timeCounter == 50) {
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <mode3_control+0xf0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b64      	cmp	r3, #100	; 0x64
 80010f6:	d003      	beq.n	8001100 <mode3_control+0x88>
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <mode3_control+0xf0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b32      	cmp	r3, #50	; 0x32
 80010fe:	d11e      	bne.n	800113e <mode3_control+0xc6>
		HAL_GPIO_TogglePin(Y1_GPIO_Port, Y1_Pin);
 8001100:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001104:	4819      	ldr	r0, [pc, #100]	; (800116c <mode3_control+0xf4>)
 8001106:	f000 fd5c 	bl	8001bc2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(Y2_GPIO_Port, Y2_Pin);
 800110a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800110e:	4817      	ldr	r0, [pc, #92]	; (800116c <mode3_control+0xf4>)
 8001110:	f000 fd57 	bl	8001bc2 <HAL_GPIO_TogglePin>

		if (timeCounter == 100) {
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <mode3_control+0xf0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b64      	cmp	r3, #100	; 0x64
 800111a:	d106      	bne.n	800112a <mode3_control+0xb2>
			update7SEG1(0);
 800111c:	2000      	movs	r0, #0
 800111e:	f7ff fca3 	bl	8000a68 <update7SEG1>
			update7SEG2(0);
 8001122:	2000      	movs	r0, #0
 8001124:	f7ff fce8 	bl	8000af8 <update7SEG2>
 8001128:	e009      	b.n	800113e <mode3_control+0xc6>
		} else if (timeCounter == 50) {
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <mode3_control+0xf0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b32      	cmp	r3, #50	; 0x32
 8001130:	d105      	bne.n	800113e <mode3_control+0xc6>
			update7SEG1(1);
 8001132:	2001      	movs	r0, #1
 8001134:	f7ff fc98 	bl	8000a68 <update7SEG1>
			update7SEG2(1);
 8001138:	2001      	movs	r0, #1
 800113a:	f7ff fcdd 	bl	8000af8 <update7SEG2>
		}
	}



	timeCounter--;
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <mode3_control+0xf0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3b01      	subs	r3, #1
 8001144:	4a08      	ldr	r2, [pc, #32]	; (8001168 <mode3_control+0xf0>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000002c 	.word	0x2000002c
 8001150:	20000048 	.word	0x20000048
 8001154:	20000028 	.word	0x20000028
 8001158:	2000003c 	.word	0x2000003c
 800115c:	20000040 	.word	0x20000040
 8001160:	20000044 	.word	0x20000044
 8001164:	2000004c 	.word	0x2000004c
 8001168:	20000030 	.word	0x20000030
 800116c:	40010800 	.word	0x40010800

08001170 <mode4_control>:


void mode4_control() {
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	time2_display = 4;
 8001174:	4b33      	ldr	r3, [pc, #204]	; (8001244 <mode4_control+0xd4>)
 8001176:	2204      	movs	r2, #4
 8001178:	601a      	str	r2, [r3, #0]

	if (isButton2Pressed() == 1) {
 800117a:	f7fe fff9 	bl	8000170 <isButton2Pressed>
 800117e:	4603      	mov	r3, r0
 8001180:	2b01      	cmp	r3, #1
 8001182:	d117      	bne.n	80011b4 <mode4_control+0x44>
		green_temp++;
 8001184:	4b30      	ldr	r3, [pc, #192]	; (8001248 <mode4_control+0xd8>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	4a2f      	ldr	r2, [pc, #188]	; (8001248 <mode4_control+0xd8>)
 800118c:	6013      	str	r3, [r2, #0]
		time1_display++;
 800118e:	4b2f      	ldr	r3, [pc, #188]	; (800124c <mode4_control+0xdc>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	3301      	adds	r3, #1
 8001194:	4a2d      	ldr	r2, [pc, #180]	; (800124c <mode4_control+0xdc>)
 8001196:	6013      	str	r3, [r2, #0]
		if (green_temp > 99 || time1_display > 99) {
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <mode4_control+0xd8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b63      	cmp	r3, #99	; 0x63
 800119e:	dc03      	bgt.n	80011a8 <mode4_control+0x38>
 80011a0:	4b2a      	ldr	r3, [pc, #168]	; (800124c <mode4_control+0xdc>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b63      	cmp	r3, #99	; 0x63
 80011a6:	dd05      	ble.n	80011b4 <mode4_control+0x44>
			green_temp = 1;
 80011a8:	4b27      	ldr	r3, [pc, #156]	; (8001248 <mode4_control+0xd8>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	601a      	str	r2, [r3, #0]
			time1_display = 1;
 80011ae:	4b27      	ldr	r3, [pc, #156]	; (800124c <mode4_control+0xdc>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
		}
	}

	if (isButton3Pressed() == 1)
 80011b4:	f7fe ffee 	bl	8000194 <isButton3Pressed>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d10d      	bne.n	80011da <mode4_control+0x6a>
	{
		greenTime = green_temp;
 80011be:	4b22      	ldr	r3, [pc, #136]	; (8001248 <mode4_control+0xd8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a23      	ldr	r2, [pc, #140]	; (8001250 <mode4_control+0xe0>)
 80011c4:	6013      	str	r3, [r2, #0]
		counter = red_temp + green_temp + yellow_temp;
 80011c6:	4b23      	ldr	r3, [pc, #140]	; (8001254 <mode4_control+0xe4>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <mode4_control+0xd8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	441a      	add	r2, r3
 80011d0:	4b21      	ldr	r3, [pc, #132]	; (8001258 <mode4_control+0xe8>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4413      	add	r3, r2
 80011d6:	4a21      	ldr	r2, [pc, #132]	; (800125c <mode4_control+0xec>)
 80011d8:	6013      	str	r3, [r2, #0]
	}

	if (timeCounter == 0) {
 80011da:	4b21      	ldr	r3, [pc, #132]	; (8001260 <mode4_control+0xf0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d102      	bne.n	80011e8 <mode4_control+0x78>
		timeCounter = 100;
 80011e2:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <mode4_control+0xf0>)
 80011e4:	2264      	movs	r2, #100	; 0x64
 80011e6:	601a      	str	r2, [r3, #0]
	}

	if (timeCounter == 100 || timeCounter == 50) {
 80011e8:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <mode4_control+0xf0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b64      	cmp	r3, #100	; 0x64
 80011ee:	d003      	beq.n	80011f8 <mode4_control+0x88>
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <mode4_control+0xf0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b32      	cmp	r3, #50	; 0x32
 80011f6:	d11e      	bne.n	8001236 <mode4_control+0xc6>
		HAL_GPIO_TogglePin(G1_GPIO_Port, G1_Pin);
 80011f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011fc:	4819      	ldr	r0, [pc, #100]	; (8001264 <mode4_control+0xf4>)
 80011fe:	f000 fce0 	bl	8001bc2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(G2_GPIO_Port, G2_Pin);
 8001202:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001206:	4817      	ldr	r0, [pc, #92]	; (8001264 <mode4_control+0xf4>)
 8001208:	f000 fcdb 	bl	8001bc2 <HAL_GPIO_TogglePin>

		if (timeCounter == 100) {
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <mode4_control+0xf0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b64      	cmp	r3, #100	; 0x64
 8001212:	d106      	bne.n	8001222 <mode4_control+0xb2>
			update7SEG1(0);
 8001214:	2000      	movs	r0, #0
 8001216:	f7ff fc27 	bl	8000a68 <update7SEG1>
			update7SEG2(0);
 800121a:	2000      	movs	r0, #0
 800121c:	f7ff fc6c 	bl	8000af8 <update7SEG2>
 8001220:	e009      	b.n	8001236 <mode4_control+0xc6>
		} else if (timeCounter == 50) {
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <mode4_control+0xf0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b32      	cmp	r3, #50	; 0x32
 8001228:	d105      	bne.n	8001236 <mode4_control+0xc6>
			update7SEG1(1);
 800122a:	2001      	movs	r0, #1
 800122c:	f7ff fc1c 	bl	8000a68 <update7SEG1>
			update7SEG2(1);
 8001230:	2001      	movs	r0, #1
 8001232:	f7ff fc61 	bl	8000af8 <update7SEG2>
		}
	}



	timeCounter--;
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <mode4_control+0xf0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3b01      	subs	r3, #1
 800123c:	4a08      	ldr	r2, [pc, #32]	; (8001260 <mode4_control+0xf0>)
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2000002c 	.word	0x2000002c
 8001248:	20000044 	.word	0x20000044
 800124c:	20000028 	.word	0x20000028
 8001250:	20000038 	.word	0x20000038
 8001254:	20000040 	.word	0x20000040
 8001258:	20000048 	.word	0x20000048
 800125c:	2000004c 	.word	0x2000004c
 8001260:	20000030 	.word	0x20000030
 8001264:	40010800 	.word	0x40010800

08001268 <setRed1Light>:
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, RESET);
	HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
	HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, RESET);
}

void setRed1Light() {
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 800126c:	2201      	movs	r2, #1
 800126e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001272:	4808      	ldr	r0, [pc, #32]	; (8001294 <setRed1Light+0x2c>)
 8001274:	f000 fc8d 	bl	8001b92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <setRed1Light+0x2c>)
 8001280:	f000 fc87 	bl	8001b92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128a:	4802      	ldr	r0, [pc, #8]	; (8001294 <setRed1Light+0x2c>)
 800128c:	f000 fc81 	bl	8001b92 <HAL_GPIO_WritePin>
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40010800 	.word	0x40010800

08001298 <setGreen1Light>:

void setGreen1Light() {
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a2:	4808      	ldr	r0, [pc, #32]	; (80012c4 <setGreen1Light+0x2c>)
 80012a4:	f000 fc75 	bl	8001b92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <setGreen1Light+0x2c>)
 80012b0:	f000 fc6f 	bl	8001b92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ba:	4802      	ldr	r0, [pc, #8]	; (80012c4 <setGreen1Light+0x2c>)
 80012bc:	f000 fc69 	bl	8001b92 <HAL_GPIO_WritePin>
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40010800 	.word	0x40010800

080012c8 <setYellow1Light>:

void setYellow1Light() {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012d2:	4808      	ldr	r0, [pc, #32]	; (80012f4 <setYellow1Light+0x2c>)
 80012d4:	f000 fc5d 	bl	8001b92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <setYellow1Light+0x2c>)
 80012e0:	f000 fc57 	bl	8001b92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 80012e4:	2201      	movs	r2, #1
 80012e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ea:	4802      	ldr	r0, [pc, #8]	; (80012f4 <setYellow1Light+0x2c>)
 80012ec:	f000 fc51 	bl	8001b92 <HAL_GPIO_WritePin>
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40010800 	.word	0x40010800

080012f8 <setRed2Light>:

void setRed2Light() {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001302:	4808      	ldr	r0, [pc, #32]	; (8001324 <setRed2Light+0x2c>)
 8001304:	f000 fc45 	bl	8001b92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <setRed2Light+0x2c>)
 8001310:	f000 fc3f 	bl	8001b92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800131a:	4802      	ldr	r0, [pc, #8]	; (8001324 <setRed2Light+0x2c>)
 800131c:	f000 fc39 	bl	8001b92 <HAL_GPIO_WritePin>
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40010800 	.word	0x40010800

08001328 <setGreen2Light>:

void setGreen2Light() {
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001332:	4808      	ldr	r0, [pc, #32]	; (8001354 <setGreen2Light+0x2c>)
 8001334:	f000 fc2d 	bl	8001b92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 8001338:	2201      	movs	r2, #1
 800133a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <setGreen2Light+0x2c>)
 8001340:	f000 fc27 	bl	8001b92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800134a:	4802      	ldr	r0, [pc, #8]	; (8001354 <setGreen2Light+0x2c>)
 800134c:	f000 fc21 	bl	8001b92 <HAL_GPIO_WritePin>
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40010800 	.word	0x40010800

08001358 <setYellow2Light>:

void setYellow2Light() {
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001362:	4808      	ldr	r0, [pc, #32]	; (8001384 <setYellow2Light+0x2c>)
 8001364:	f000 fc15 	bl	8001b92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <setYellow2Light+0x2c>)
 8001370:	f000 fc0f 	bl	8001b92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, SET);
 8001374:	2201      	movs	r2, #1
 8001376:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800137a:	4802      	ldr	r0, [pc, #8]	; (8001384 <setYellow2Light+0x2c>)
 800137c:	f000 fc09 	bl	8001b92 <HAL_GPIO_WritePin>
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40010800 	.word	0x40010800

08001388 <timerRun>:
void setTimer4(int duration) {
	timer4_counter = duration / TICK;
	timer4_flag = 0;
}

void timerRun() {
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <timerRun+0x9c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	dd04      	ble.n	800139e <timerRun+0x16>
		timer1_counter--;
 8001394:	4b23      	ldr	r3, [pc, #140]	; (8001424 <timerRun+0x9c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3b01      	subs	r3, #1
 800139a:	4a22      	ldr	r2, [pc, #136]	; (8001424 <timerRun+0x9c>)
 800139c:	6013      	str	r3, [r2, #0]
	}
	if (timer1_counter <= 0) {
 800139e:	4b21      	ldr	r3, [pc, #132]	; (8001424 <timerRun+0x9c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	dc04      	bgt.n	80013b0 <timerRun+0x28>
		timer1_flag++;
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <timerRun+0xa0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	4a1e      	ldr	r2, [pc, #120]	; (8001428 <timerRun+0xa0>)
 80013ae:	6013      	str	r3, [r2, #0]
	}
	if (timer2_counter > 0) {
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <timerRun+0xa4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	dd04      	ble.n	80013c2 <timerRun+0x3a>
		timer2_counter--;
 80013b8:	4b1c      	ldr	r3, [pc, #112]	; (800142c <timerRun+0xa4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	3b01      	subs	r3, #1
 80013be:	4a1b      	ldr	r2, [pc, #108]	; (800142c <timerRun+0xa4>)
 80013c0:	6013      	str	r3, [r2, #0]
	}
	if (timer2_counter <= 0) {
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <timerRun+0xa4>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	dc04      	bgt.n	80013d4 <timerRun+0x4c>
		timer2_flag++;
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <timerRun+0xa8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	4a17      	ldr	r2, [pc, #92]	; (8001430 <timerRun+0xa8>)
 80013d2:	6013      	str	r3, [r2, #0]
	}
	if (timer3_counter > 0) {
 80013d4:	4b17      	ldr	r3, [pc, #92]	; (8001434 <timerRun+0xac>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	dd04      	ble.n	80013e6 <timerRun+0x5e>
		timer3_counter--;
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <timerRun+0xac>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	4a14      	ldr	r2, [pc, #80]	; (8001434 <timerRun+0xac>)
 80013e4:	6013      	str	r3, [r2, #0]
	}
	if (timer3_counter <= 0) {
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <timerRun+0xac>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	dc04      	bgt.n	80013f8 <timerRun+0x70>
		timer3_flag++;
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <timerRun+0xb0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	3301      	adds	r3, #1
 80013f4:	4a10      	ldr	r2, [pc, #64]	; (8001438 <timerRun+0xb0>)
 80013f6:	6013      	str	r3, [r2, #0]
	}
	if (timer4_counter > 0) {
 80013f8:	4b10      	ldr	r3, [pc, #64]	; (800143c <timerRun+0xb4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	dd04      	ble.n	800140a <timerRun+0x82>
		timer4_counter--;
 8001400:	4b0e      	ldr	r3, [pc, #56]	; (800143c <timerRun+0xb4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	3b01      	subs	r3, #1
 8001406:	4a0d      	ldr	r2, [pc, #52]	; (800143c <timerRun+0xb4>)
 8001408:	6013      	str	r3, [r2, #0]
	}
	if (timer4_counter <= 0) {
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <timerRun+0xb4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	dc04      	bgt.n	800141c <timerRun+0x94>
		timer4_flag++;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <timerRun+0xb8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	3301      	adds	r3, #1
 8001418:	4a09      	ldr	r2, [pc, #36]	; (8001440 <timerRun+0xb8>)
 800141a:	6013      	str	r3, [r2, #0]
	}
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	200000dc 	.word	0x200000dc
 8001428:	200000d8 	.word	0x200000d8
 800142c:	200000e4 	.word	0x200000e4
 8001430:	200000e0 	.word	0x200000e0
 8001434:	200000ec 	.word	0x200000ec
 8001438:	200000e8 	.word	0x200000e8
 800143c:	200000f4 	.word	0x200000f4
 8001440:	200000f0 	.word	0x200000f0

08001444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_MspInit+0x40>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <HAL_MspInit+0x40>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6193      	str	r3, [r2, #24]
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <HAL_MspInit+0x40>)
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <HAL_MspInit+0x40>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	4a07      	ldr	r2, [pc, #28]	; (8001484 <HAL_MspInit+0x40>)
 8001468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146c:	61d3      	str	r3, [r2, #28]
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <HAL_MspInit+0x40>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	40021000 	.word	0x40021000

08001488 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001498:	d113      	bne.n	80014c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <HAL_TIM_Base_MspInit+0x44>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <HAL_TIM_Base_MspInit+0x44>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	61d3      	str	r3, [r2, #28]
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <HAL_TIM_Base_MspInit+0x44>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	201c      	movs	r0, #28
 80014b8:	f000 f9a1 	bl	80017fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014bc:	201c      	movs	r0, #28
 80014be:	f000 f9ba 	bl	8001836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000

080014d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <NMI_Handler+0x4>

080014d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <HardFault_Handler+0x4>

080014dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <MemManage_Handler+0x4>

080014e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <BusFault_Handler+0x4>

080014e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <UsageFault_Handler+0x4>

080014ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr

080014fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr

08001512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001516:	f000 f87f 	bl	8001618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <TIM2_IRQHandler+0x10>)
 8001526:	f000 ffe9 	bl	80024fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000090 	.word	0x20000090

08001534 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001540:	480c      	ldr	r0, [pc, #48]	; (8001574 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001542:	490d      	ldr	r1, [pc, #52]	; (8001578 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001544:	4a0d      	ldr	r2, [pc, #52]	; (800157c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001548:	e002      	b.n	8001550 <LoopCopyDataInit>

0800154a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800154c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154e:	3304      	adds	r3, #4

08001550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001554:	d3f9      	bcc.n	800154a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001558:	4c0a      	ldr	r4, [pc, #40]	; (8001584 <LoopFillZerobss+0x22>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800155c:	e001      	b.n	8001562 <LoopFillZerobss>

0800155e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001560:	3204      	adds	r2, #4

08001562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001564:	d3fb      	bcc.n	800155e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001566:	f7ff ffe5 	bl	8001534 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800156a:	f001 fb0f 	bl	8002b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800156e:	f7ff fb0b 	bl	8000b88 <main>
  bx lr
 8001572:	4770      	bx	lr
  ldr r0, =_sdata
 8001574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001578:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800157c:	08002c24 	.word	0x08002c24
  ldr r2, =_sbss
 8001580:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001584:	200000fc 	.word	0x200000fc

08001588 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001588:	e7fe      	b.n	8001588 <ADC1_2_IRQHandler>
	...

0800158c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_Init+0x28>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <HAL_Init+0x28>)
 8001596:	f043 0310 	orr.w	r3, r3, #16
 800159a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800159c:	2003      	movs	r0, #3
 800159e:	f000 f923 	bl	80017e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015a2:	200f      	movs	r0, #15
 80015a4:	f000 f808 	bl	80015b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a8:	f7ff ff4c 	bl	8001444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40022000 	.word	0x40022000

080015b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_InitTick+0x54>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_InitTick+0x58>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f93b 	bl	8001852 <HAL_SYSTICK_Config>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00e      	b.n	8001604 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b0f      	cmp	r3, #15
 80015ea:	d80a      	bhi.n	8001602 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ec:	2200      	movs	r2, #0
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f000 f903 	bl	80017fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f8:	4a06      	ldr	r2, [pc, #24]	; (8001614 <HAL_InitTick+0x5c>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e000      	b.n	8001604 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000054 	.word	0x20000054
 8001610:	2000005c 	.word	0x2000005c
 8001614:	20000058 	.word	0x20000058

08001618 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_IncTick+0x1c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_IncTick+0x20>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4413      	add	r3, r2
 8001628:	4a03      	ldr	r2, [pc, #12]	; (8001638 <HAL_IncTick+0x20>)
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	2000005c 	.word	0x2000005c
 8001638:	200000f8 	.word	0x200000f8

0800163c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return uwTick;
 8001640:	4b02      	ldr	r3, [pc, #8]	; (800164c <HAL_GetTick+0x10>)
 8001642:	681b      	ldr	r3, [r3, #0]
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	200000f8 	.word	0x200000f8

08001650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800166c:	4013      	ands	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800167c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001682:	4a04      	ldr	r2, [pc, #16]	; (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	60d3      	str	r3, [r2, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <__NVIC_GetPriorityGrouping+0x18>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	f003 0307 	and.w	r3, r3, #7
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	db0b      	blt.n	80016de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	f003 021f 	and.w	r2, r3, #31
 80016cc:	4906      	ldr	r1, [pc, #24]	; (80016e8 <__NVIC_EnableIRQ+0x34>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	095b      	lsrs	r3, r3, #5
 80016d4:	2001      	movs	r0, #1
 80016d6:	fa00 f202 	lsl.w	r2, r0, r2
 80016da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	e000e100 	.word	0xe000e100

080016ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	6039      	str	r1, [r7, #0]
 80016f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	db0a      	blt.n	8001716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	b2da      	uxtb	r2, r3
 8001704:	490c      	ldr	r1, [pc, #48]	; (8001738 <__NVIC_SetPriority+0x4c>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	0112      	lsls	r2, r2, #4
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	440b      	add	r3, r1
 8001710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001714:	e00a      	b.n	800172c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4908      	ldr	r1, [pc, #32]	; (800173c <__NVIC_SetPriority+0x50>)
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	3b04      	subs	r3, #4
 8001724:	0112      	lsls	r2, r2, #4
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	440b      	add	r3, r1
 800172a:	761a      	strb	r2, [r3, #24]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000e100 	.word	0xe000e100
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f1c3 0307 	rsb	r3, r3, #7
 800175a:	2b04      	cmp	r3, #4
 800175c:	bf28      	it	cs
 800175e:	2304      	movcs	r3, #4
 8001760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3304      	adds	r3, #4
 8001766:	2b06      	cmp	r3, #6
 8001768:	d902      	bls.n	8001770 <NVIC_EncodePriority+0x30>
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3b03      	subs	r3, #3
 800176e:	e000      	b.n	8001772 <NVIC_EncodePriority+0x32>
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	f04f 32ff 	mov.w	r2, #4294967295
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43da      	mvns	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	401a      	ands	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001788:	f04f 31ff 	mov.w	r1, #4294967295
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	fa01 f303 	lsl.w	r3, r1, r3
 8001792:	43d9      	mvns	r1, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	4313      	orrs	r3, r2
         );
}
 800179a:	4618      	mov	r0, r3
 800179c:	3724      	adds	r7, #36	; 0x24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b4:	d301      	bcc.n	80017ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00f      	b.n	80017da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ba:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <SysTick_Config+0x40>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3b01      	subs	r3, #1
 80017c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017c2:	210f      	movs	r1, #15
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295
 80017c8:	f7ff ff90 	bl	80016ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <SysTick_Config+0x40>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d2:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <SysTick_Config+0x40>)
 80017d4:	2207      	movs	r2, #7
 80017d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	e000e010 	.word	0xe000e010

080017e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff ff2d 	bl	8001650 <__NVIC_SetPriorityGrouping>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017fe:	b580      	push	{r7, lr}
 8001800:	b086      	sub	sp, #24
 8001802:	af00      	add	r7, sp, #0
 8001804:	4603      	mov	r3, r0
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
 800180a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001810:	f7ff ff42 	bl	8001698 <__NVIC_GetPriorityGrouping>
 8001814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	68b9      	ldr	r1, [r7, #8]
 800181a:	6978      	ldr	r0, [r7, #20]
 800181c:	f7ff ff90 	bl	8001740 <NVIC_EncodePriority>
 8001820:	4602      	mov	r2, r0
 8001822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001826:	4611      	mov	r1, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff5f 	bl	80016ec <__NVIC_SetPriority>
}
 800182e:	bf00      	nop
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff35 	bl	80016b4 <__NVIC_EnableIRQ>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff ffa2 	bl	80017a4 <SysTick_Config>
 8001860:	4603      	mov	r3, r0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800186c:	b480      	push	{r7}
 800186e:	b08b      	sub	sp, #44	; 0x2c
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187e:	e161      	b.n	8001b44 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001880:	2201      	movs	r2, #1
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	429a      	cmp	r2, r3
 800189a:	f040 8150 	bne.w	8001b3e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4a97      	ldr	r2, [pc, #604]	; (8001b00 <HAL_GPIO_Init+0x294>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d05e      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
 80018a8:	4a95      	ldr	r2, [pc, #596]	; (8001b00 <HAL_GPIO_Init+0x294>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d875      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018ae:	4a95      	ldr	r2, [pc, #596]	; (8001b04 <HAL_GPIO_Init+0x298>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d058      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
 80018b4:	4a93      	ldr	r2, [pc, #588]	; (8001b04 <HAL_GPIO_Init+0x298>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d86f      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018ba:	4a93      	ldr	r2, [pc, #588]	; (8001b08 <HAL_GPIO_Init+0x29c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d052      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
 80018c0:	4a91      	ldr	r2, [pc, #580]	; (8001b08 <HAL_GPIO_Init+0x29c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d869      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018c6:	4a91      	ldr	r2, [pc, #580]	; (8001b0c <HAL_GPIO_Init+0x2a0>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d04c      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
 80018cc:	4a8f      	ldr	r2, [pc, #572]	; (8001b0c <HAL_GPIO_Init+0x2a0>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d863      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018d2:	4a8f      	ldr	r2, [pc, #572]	; (8001b10 <HAL_GPIO_Init+0x2a4>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d046      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
 80018d8:	4a8d      	ldr	r2, [pc, #564]	; (8001b10 <HAL_GPIO_Init+0x2a4>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d85d      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018de:	2b12      	cmp	r3, #18
 80018e0:	d82a      	bhi.n	8001938 <HAL_GPIO_Init+0xcc>
 80018e2:	2b12      	cmp	r3, #18
 80018e4:	d859      	bhi.n	800199a <HAL_GPIO_Init+0x12e>
 80018e6:	a201      	add	r2, pc, #4	; (adr r2, 80018ec <HAL_GPIO_Init+0x80>)
 80018e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ec:	08001967 	.word	0x08001967
 80018f0:	08001941 	.word	0x08001941
 80018f4:	08001953 	.word	0x08001953
 80018f8:	08001995 	.word	0x08001995
 80018fc:	0800199b 	.word	0x0800199b
 8001900:	0800199b 	.word	0x0800199b
 8001904:	0800199b 	.word	0x0800199b
 8001908:	0800199b 	.word	0x0800199b
 800190c:	0800199b 	.word	0x0800199b
 8001910:	0800199b 	.word	0x0800199b
 8001914:	0800199b 	.word	0x0800199b
 8001918:	0800199b 	.word	0x0800199b
 800191c:	0800199b 	.word	0x0800199b
 8001920:	0800199b 	.word	0x0800199b
 8001924:	0800199b 	.word	0x0800199b
 8001928:	0800199b 	.word	0x0800199b
 800192c:	0800199b 	.word	0x0800199b
 8001930:	08001949 	.word	0x08001949
 8001934:	0800195d 	.word	0x0800195d
 8001938:	4a76      	ldr	r2, [pc, #472]	; (8001b14 <HAL_GPIO_Init+0x2a8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d013      	beq.n	8001966 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800193e:	e02c      	b.n	800199a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	623b      	str	r3, [r7, #32]
          break;
 8001946:	e029      	b.n	800199c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	3304      	adds	r3, #4
 800194e:	623b      	str	r3, [r7, #32]
          break;
 8001950:	e024      	b.n	800199c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	3308      	adds	r3, #8
 8001958:	623b      	str	r3, [r7, #32]
          break;
 800195a:	e01f      	b.n	800199c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	330c      	adds	r3, #12
 8001962:	623b      	str	r3, [r7, #32]
          break;
 8001964:	e01a      	b.n	800199c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d102      	bne.n	8001974 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800196e:	2304      	movs	r3, #4
 8001970:	623b      	str	r3, [r7, #32]
          break;
 8001972:	e013      	b.n	800199c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d105      	bne.n	8001988 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800197c:	2308      	movs	r3, #8
 800197e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	611a      	str	r2, [r3, #16]
          break;
 8001986:	e009      	b.n	800199c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001988:	2308      	movs	r3, #8
 800198a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	615a      	str	r2, [r3, #20]
          break;
 8001992:	e003      	b.n	800199c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001994:	2300      	movs	r3, #0
 8001996:	623b      	str	r3, [r7, #32]
          break;
 8001998:	e000      	b.n	800199c <HAL_GPIO_Init+0x130>
          break;
 800199a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	2bff      	cmp	r3, #255	; 0xff
 80019a0:	d801      	bhi.n	80019a6 <HAL_GPIO_Init+0x13a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	e001      	b.n	80019aa <HAL_GPIO_Init+0x13e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3304      	adds	r3, #4
 80019aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	2bff      	cmp	r3, #255	; 0xff
 80019b0:	d802      	bhi.n	80019b8 <HAL_GPIO_Init+0x14c>
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	e002      	b.n	80019be <HAL_GPIO_Init+0x152>
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	3b08      	subs	r3, #8
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	210f      	movs	r1, #15
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	fa01 f303 	lsl.w	r3, r1, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	401a      	ands	r2, r3
 80019d0:	6a39      	ldr	r1, [r7, #32]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	fa01 f303 	lsl.w	r3, r1, r3
 80019d8:	431a      	orrs	r2, r3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 80a9 	beq.w	8001b3e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019ec:	4b4a      	ldr	r3, [pc, #296]	; (8001b18 <HAL_GPIO_Init+0x2ac>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a49      	ldr	r2, [pc, #292]	; (8001b18 <HAL_GPIO_Init+0x2ac>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b47      	ldr	r3, [pc, #284]	; (8001b18 <HAL_GPIO_Init+0x2ac>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a04:	4a45      	ldr	r2, [pc, #276]	; (8001b1c <HAL_GPIO_Init+0x2b0>)
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	089b      	lsrs	r3, r3, #2
 8001a0a:	3302      	adds	r3, #2
 8001a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	220f      	movs	r2, #15
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	4013      	ands	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a3d      	ldr	r2, [pc, #244]	; (8001b20 <HAL_GPIO_Init+0x2b4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d00d      	beq.n	8001a4c <HAL_GPIO_Init+0x1e0>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a3c      	ldr	r2, [pc, #240]	; (8001b24 <HAL_GPIO_Init+0x2b8>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d007      	beq.n	8001a48 <HAL_GPIO_Init+0x1dc>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a3b      	ldr	r2, [pc, #236]	; (8001b28 <HAL_GPIO_Init+0x2bc>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d101      	bne.n	8001a44 <HAL_GPIO_Init+0x1d8>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e004      	b.n	8001a4e <HAL_GPIO_Init+0x1e2>
 8001a44:	2303      	movs	r3, #3
 8001a46:	e002      	b.n	8001a4e <HAL_GPIO_Init+0x1e2>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <HAL_GPIO_Init+0x1e2>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a50:	f002 0203 	and.w	r2, r2, #3
 8001a54:	0092      	lsls	r2, r2, #2
 8001a56:	4093      	lsls	r3, r2
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a5e:	492f      	ldr	r1, [pc, #188]	; (8001b1c <HAL_GPIO_Init+0x2b0>)
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	3302      	adds	r3, #2
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d006      	beq.n	8001a86 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a78:	4b2c      	ldr	r3, [pc, #176]	; (8001b2c <HAL_GPIO_Init+0x2c0>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	492b      	ldr	r1, [pc, #172]	; (8001b2c <HAL_GPIO_Init+0x2c0>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	600b      	str	r3, [r1, #0]
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a86:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <HAL_GPIO_Init+0x2c0>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	4927      	ldr	r1, [pc, #156]	; (8001b2c <HAL_GPIO_Init+0x2c0>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d006      	beq.n	8001aae <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aa0:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <HAL_GPIO_Init+0x2c0>)
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	4921      	ldr	r1, [pc, #132]	; (8001b2c <HAL_GPIO_Init+0x2c0>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aae:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <HAL_GPIO_Init+0x2c0>)
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	491d      	ldr	r1, [pc, #116]	; (8001b2c <HAL_GPIO_Init+0x2c0>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d006      	beq.n	8001ad6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ac8:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <HAL_GPIO_Init+0x2c0>)
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	4917      	ldr	r1, [pc, #92]	; (8001b2c <HAL_GPIO_Init+0x2c0>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	608b      	str	r3, [r1, #8]
 8001ad4:	e006      	b.n	8001ae4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <HAL_GPIO_Init+0x2c0>)
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	4913      	ldr	r1, [pc, #76]	; (8001b2c <HAL_GPIO_Init+0x2c0>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d01f      	beq.n	8001b30 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_GPIO_Init+0x2c0>)
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	490d      	ldr	r1, [pc, #52]	; (8001b2c <HAL_GPIO_Init+0x2c0>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	60cb      	str	r3, [r1, #12]
 8001afc:	e01f      	b.n	8001b3e <HAL_GPIO_Init+0x2d2>
 8001afe:	bf00      	nop
 8001b00:	10320000 	.word	0x10320000
 8001b04:	10310000 	.word	0x10310000
 8001b08:	10220000 	.word	0x10220000
 8001b0c:	10210000 	.word	0x10210000
 8001b10:	10120000 	.word	0x10120000
 8001b14:	10110000 	.word	0x10110000
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40010000 	.word	0x40010000
 8001b20:	40010800 	.word	0x40010800
 8001b24:	40010c00 	.word	0x40010c00
 8001b28:	40011000 	.word	0x40011000
 8001b2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_GPIO_Init+0x2f4>)
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	4909      	ldr	r1, [pc, #36]	; (8001b60 <HAL_GPIO_Init+0x2f4>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	3301      	adds	r3, #1
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f47f ae96 	bne.w	8001880 <HAL_GPIO_Init+0x14>
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	372c      	adds	r7, #44	; 0x2c
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	40010400 	.word	0x40010400

08001b64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	887b      	ldrh	r3, [r7, #2]
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
 8001b80:	e001      	b.n	8001b86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr

08001b92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	807b      	strh	r3, [r7, #2]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ba2:	787b      	ldrb	r3, [r7, #1]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba8:	887a      	ldrh	r2, [r7, #2]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bae:	e003      	b.n	8001bb8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bb0:	887b      	ldrh	r3, [r7, #2]
 8001bb2:	041a      	lsls	r2, r3, #16
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	611a      	str	r2, [r3, #16]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b085      	sub	sp, #20
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bd4:	887a      	ldrh	r2, [r7, #2]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	041a      	lsls	r2, r3, #16
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	43d9      	mvns	r1, r3
 8001be0:	887b      	ldrh	r3, [r7, #2]
 8001be2:	400b      	ands	r3, r1
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	611a      	str	r2, [r3, #16]
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e272      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 8087 	beq.w	8001d22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c14:	4b92      	ldr	r3, [pc, #584]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 030c 	and.w	r3, r3, #12
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d00c      	beq.n	8001c3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c20:	4b8f      	ldr	r3, [pc, #572]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 030c 	and.w	r3, r3, #12
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d112      	bne.n	8001c52 <HAL_RCC_OscConfig+0x5e>
 8001c2c:	4b8c      	ldr	r3, [pc, #560]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c38:	d10b      	bne.n	8001c52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3a:	4b89      	ldr	r3, [pc, #548]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d06c      	beq.n	8001d20 <HAL_RCC_OscConfig+0x12c>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d168      	bne.n	8001d20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e24c      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCC_OscConfig+0x76>
 8001c5c:	4b80      	ldr	r3, [pc, #512]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a7f      	ldr	r2, [pc, #508]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	e02e      	b.n	8001cc8 <HAL_RCC_OscConfig+0xd4>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x98>
 8001c72:	4b7b      	ldr	r3, [pc, #492]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a7a      	ldr	r2, [pc, #488]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	4b78      	ldr	r3, [pc, #480]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a77      	ldr	r2, [pc, #476]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e01d      	b.n	8001cc8 <HAL_RCC_OscConfig+0xd4>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c94:	d10c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0xbc>
 8001c96:	4b72      	ldr	r3, [pc, #456]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a71      	ldr	r2, [pc, #452]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	4b6f      	ldr	r3, [pc, #444]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a6e      	ldr	r2, [pc, #440]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e00b      	b.n	8001cc8 <HAL_RCC_OscConfig+0xd4>
 8001cb0:	4b6b      	ldr	r3, [pc, #428]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a6a      	ldr	r2, [pc, #424]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	4b68      	ldr	r3, [pc, #416]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a67      	ldr	r2, [pc, #412]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d013      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fcb4 	bl	800163c <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd8:	f7ff fcb0 	bl	800163c <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	; 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e200      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	4b5d      	ldr	r3, [pc, #372]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0xe4>
 8001cf6:	e014      	b.n	8001d22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7ff fca0 	bl	800163c <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d00:	f7ff fc9c 	bl	800163c <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e1ec      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d12:	4b53      	ldr	r3, [pc, #332]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x10c>
 8001d1e:	e000      	b.n	8001d22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d063      	beq.n	8001df6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d2e:	4b4c      	ldr	r3, [pc, #304]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00b      	beq.n	8001d52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d3a:	4b49      	ldr	r3, [pc, #292]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d11c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x18c>
 8001d46:	4b46      	ldr	r3, [pc, #280]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d116      	bne.n	8001d80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d52:	4b43      	ldr	r3, [pc, #268]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d005      	beq.n	8001d6a <HAL_RCC_OscConfig+0x176>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d001      	beq.n	8001d6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e1c0      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6a:	4b3d      	ldr	r3, [pc, #244]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4939      	ldr	r1, [pc, #228]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7e:	e03a      	b.n	8001df6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d020      	beq.n	8001dca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d88:	4b36      	ldr	r3, [pc, #216]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8e:	f7ff fc55 	bl	800163c <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d96:	f7ff fc51 	bl	800163c <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e1a1      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da8:	4b2d      	ldr	r3, [pc, #180]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db4:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4927      	ldr	r1, [pc, #156]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	600b      	str	r3, [r1, #0]
 8001dc8:	e015      	b.n	8001df6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dca:	4b26      	ldr	r3, [pc, #152]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7ff fc34 	bl	800163c <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd8:	f7ff fc30 	bl	800163c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e180      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dea:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d03a      	beq.n	8001e78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d019      	beq.n	8001e3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e0a:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <HAL_RCC_OscConfig+0x274>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e10:	f7ff fc14 	bl	800163c <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e18:	f7ff fc10 	bl	800163c <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e160      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e36:	2001      	movs	r0, #1
 8001e38:	f000 faa6 	bl	8002388 <RCC_Delay>
 8001e3c:	e01c      	b.n	8001e78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_RCC_OscConfig+0x274>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e44:	f7ff fbfa 	bl	800163c <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e4a:	e00f      	b.n	8001e6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4c:	f7ff fbf6 	bl	800163c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d908      	bls.n	8001e6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e146      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000
 8001e64:	42420000 	.word	0x42420000
 8001e68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e6c:	4b92      	ldr	r3, [pc, #584]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1e9      	bne.n	8001e4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 80a6 	beq.w	8001fd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e86:	2300      	movs	r3, #0
 8001e88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e8a:	4b8b      	ldr	r3, [pc, #556]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10d      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e96:	4b88      	ldr	r3, [pc, #544]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	4a87      	ldr	r2, [pc, #540]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	61d3      	str	r3, [r2, #28]
 8001ea2:	4b85      	ldr	r3, [pc, #532]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb2:	4b82      	ldr	r3, [pc, #520]	; (80020bc <HAL_RCC_OscConfig+0x4c8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d118      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ebe:	4b7f      	ldr	r3, [pc, #508]	; (80020bc <HAL_RCC_OscConfig+0x4c8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a7e      	ldr	r2, [pc, #504]	; (80020bc <HAL_RCC_OscConfig+0x4c8>)
 8001ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eca:	f7ff fbb7 	bl	800163c <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed2:	f7ff fbb3 	bl	800163c <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b64      	cmp	r3, #100	; 0x64
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e103      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	4b75      	ldr	r3, [pc, #468]	; (80020bc <HAL_RCC_OscConfig+0x4c8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f0      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d106      	bne.n	8001f06 <HAL_RCC_OscConfig+0x312>
 8001ef8:	4b6f      	ldr	r3, [pc, #444]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	4a6e      	ldr	r2, [pc, #440]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	6213      	str	r3, [r2, #32]
 8001f04:	e02d      	b.n	8001f62 <HAL_RCC_OscConfig+0x36e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10c      	bne.n	8001f28 <HAL_RCC_OscConfig+0x334>
 8001f0e:	4b6a      	ldr	r3, [pc, #424]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	4a69      	ldr	r2, [pc, #420]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	f023 0301 	bic.w	r3, r3, #1
 8001f18:	6213      	str	r3, [r2, #32]
 8001f1a:	4b67      	ldr	r3, [pc, #412]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	4a66      	ldr	r2, [pc, #408]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	f023 0304 	bic.w	r3, r3, #4
 8001f24:	6213      	str	r3, [r2, #32]
 8001f26:	e01c      	b.n	8001f62 <HAL_RCC_OscConfig+0x36e>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	2b05      	cmp	r3, #5
 8001f2e:	d10c      	bne.n	8001f4a <HAL_RCC_OscConfig+0x356>
 8001f30:	4b61      	ldr	r3, [pc, #388]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4a60      	ldr	r2, [pc, #384]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	f043 0304 	orr.w	r3, r3, #4
 8001f3a:	6213      	str	r3, [r2, #32]
 8001f3c:	4b5e      	ldr	r3, [pc, #376]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	4a5d      	ldr	r2, [pc, #372]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6213      	str	r3, [r2, #32]
 8001f48:	e00b      	b.n	8001f62 <HAL_RCC_OscConfig+0x36e>
 8001f4a:	4b5b      	ldr	r3, [pc, #364]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	4a5a      	ldr	r2, [pc, #360]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	6213      	str	r3, [r2, #32]
 8001f56:	4b58      	ldr	r3, [pc, #352]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	4a57      	ldr	r2, [pc, #348]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	f023 0304 	bic.w	r3, r3, #4
 8001f60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d015      	beq.n	8001f96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6a:	f7ff fb67 	bl	800163c <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f70:	e00a      	b.n	8001f88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f72:	f7ff fb63 	bl	800163c <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e0b1      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f88:	4b4b      	ldr	r3, [pc, #300]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0ee      	beq.n	8001f72 <HAL_RCC_OscConfig+0x37e>
 8001f94:	e014      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f96:	f7ff fb51 	bl	800163c <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9e:	f7ff fb4d 	bl	800163c <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e09b      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb4:	4b40      	ldr	r3, [pc, #256]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1ee      	bne.n	8001f9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fc0:	7dfb      	ldrb	r3, [r7, #23]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d105      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc6:	4b3c      	ldr	r3, [pc, #240]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	4a3b      	ldr	r2, [pc, #236]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 8087 	beq.w	80020ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fdc:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 030c 	and.w	r3, r3, #12
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d061      	beq.n	80020ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d146      	bne.n	800207e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff0:	4b33      	ldr	r3, [pc, #204]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff6:	f7ff fb21 	bl	800163c <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffe:	f7ff fb1d 	bl	800163c <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e06d      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002010:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1f0      	bne.n	8001ffe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002024:	d108      	bne.n	8002038 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002026:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	4921      	ldr	r1, [pc, #132]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002038:	4b1f      	ldr	r3, [pc, #124]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a19      	ldr	r1, [r3, #32]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	430b      	orrs	r3, r1
 800204a:	491b      	ldr	r1, [pc, #108]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8002052:	2201      	movs	r2, #1
 8002054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002056:	f7ff faf1 	bl	800163c <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205e:	f7ff faed 	bl	800163c <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e03d      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x46a>
 800207c:	e035      	b.n	80020ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7ff fada 	bl	800163c <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208c:	f7ff fad6 	bl	800163c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e026      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x498>
 80020aa:	e01e      	b.n	80020ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d107      	bne.n	80020c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e019      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40007000 	.word	0x40007000
 80020c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_RCC_OscConfig+0x500>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d106      	bne.n	80020e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d001      	beq.n	80020ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40021000 	.word	0x40021000

080020f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0d0      	b.n	80022ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800210c:	4b6a      	ldr	r3, [pc, #424]	; (80022b8 <HAL_RCC_ClockConfig+0x1c0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d910      	bls.n	800213c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211a:	4b67      	ldr	r3, [pc, #412]	; (80022b8 <HAL_RCC_ClockConfig+0x1c0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 0207 	bic.w	r2, r3, #7
 8002122:	4965      	ldr	r1, [pc, #404]	; (80022b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212a:	4b63      	ldr	r3, [pc, #396]	; (80022b8 <HAL_RCC_ClockConfig+0x1c0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d001      	beq.n	800213c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0b8      	b.n	80022ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d020      	beq.n	800218a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002154:	4b59      	ldr	r3, [pc, #356]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	4a58      	ldr	r2, [pc, #352]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800215e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800216c:	4b53      	ldr	r3, [pc, #332]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	4a52      	ldr	r2, [pc, #328]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002176:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002178:	4b50      	ldr	r3, [pc, #320]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	494d      	ldr	r1, [pc, #308]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	4313      	orrs	r3, r2
 8002188:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d040      	beq.n	8002218 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d107      	bne.n	80021ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	4b47      	ldr	r3, [pc, #284]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d115      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e07f      	b.n	80022ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d107      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b6:	4b41      	ldr	r3, [pc, #260]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d109      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e073      	b.n	80022ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c6:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e06b      	b.n	80022ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021d6:	4b39      	ldr	r3, [pc, #228]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f023 0203 	bic.w	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4936      	ldr	r1, [pc, #216]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021e8:	f7ff fa28 	bl	800163c <HAL_GetTick>
 80021ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ee:	e00a      	b.n	8002206 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f0:	f7ff fa24 	bl	800163c <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fe:	4293      	cmp	r3, r2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e053      	b.n	80022ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002206:	4b2d      	ldr	r3, [pc, #180]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 020c 	and.w	r2, r3, #12
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	429a      	cmp	r2, r3
 8002216:	d1eb      	bne.n	80021f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002218:	4b27      	ldr	r3, [pc, #156]	; (80022b8 <HAL_RCC_ClockConfig+0x1c0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d210      	bcs.n	8002248 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002226:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 0207 	bic.w	r2, r3, #7
 800222e:	4922      	ldr	r1, [pc, #136]	; (80022b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002236:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e032      	b.n	80022ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d008      	beq.n	8002266 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002254:	4b19      	ldr	r3, [pc, #100]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4916      	ldr	r1, [pc, #88]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	4313      	orrs	r3, r2
 8002264:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d009      	beq.n	8002286 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002272:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	490e      	ldr	r1, [pc, #56]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	4313      	orrs	r3, r2
 8002284:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002286:	f000 f821 	bl	80022cc <HAL_RCC_GetSysClockFreq>
 800228a:	4602      	mov	r2, r0
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	490a      	ldr	r1, [pc, #40]	; (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002298:	5ccb      	ldrb	r3, [r1, r3]
 800229a:	fa22 f303 	lsr.w	r3, r2, r3
 800229e:	4a09      	ldr	r2, [pc, #36]	; (80022c4 <HAL_RCC_ClockConfig+0x1cc>)
 80022a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <HAL_RCC_ClockConfig+0x1d0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff f986 	bl	80015b8 <HAL_InitTick>

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40022000 	.word	0x40022000
 80022bc:	40021000 	.word	0x40021000
 80022c0:	08002c0c 	.word	0x08002c0c
 80022c4:	20000054 	.word	0x20000054
 80022c8:	20000058 	.word	0x20000058

080022cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022cc:	b490      	push	{r4, r7}
 80022ce:	b08a      	sub	sp, #40	; 0x28
 80022d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022d2:	4b29      	ldr	r3, [pc, #164]	; (8002378 <HAL_RCC_GetSysClockFreq+0xac>)
 80022d4:	1d3c      	adds	r4, r7, #4
 80022d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022dc:	f240 2301 	movw	r3, #513	; 0x201
 80022e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	2300      	movs	r3, #0
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022f6:	4b21      	ldr	r3, [pc, #132]	; (800237c <HAL_RCC_GetSysClockFreq+0xb0>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b04      	cmp	r3, #4
 8002304:	d002      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x40>
 8002306:	2b08      	cmp	r3, #8
 8002308:	d003      	beq.n	8002312 <HAL_RCC_GetSysClockFreq+0x46>
 800230a:	e02b      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800230c:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <HAL_RCC_GetSysClockFreq+0xb4>)
 800230e:	623b      	str	r3, [r7, #32]
      break;
 8002310:	e02b      	b.n	800236a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	0c9b      	lsrs	r3, r3, #18
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	3328      	adds	r3, #40	; 0x28
 800231c:	443b      	add	r3, r7
 800231e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002322:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d012      	beq.n	8002354 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800232e:	4b13      	ldr	r3, [pc, #76]	; (800237c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	0c5b      	lsrs	r3, r3, #17
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	3328      	adds	r3, #40	; 0x28
 800233a:	443b      	add	r3, r7
 800233c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002340:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	4a0e      	ldr	r2, [pc, #56]	; (8002380 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002346:	fb03 f202 	mul.w	r2, r3, r2
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
 8002352:	e004      	b.n	800235e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	4a0b      	ldr	r2, [pc, #44]	; (8002384 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002358:	fb02 f303 	mul.w	r3, r2, r3
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	623b      	str	r3, [r7, #32]
      break;
 8002362:	e002      	b.n	800236a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002366:	623b      	str	r3, [r7, #32]
      break;
 8002368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800236a:	6a3b      	ldr	r3, [r7, #32]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3728      	adds	r7, #40	; 0x28
 8002370:	46bd      	mov	sp, r7
 8002372:	bc90      	pop	{r4, r7}
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	08002bfc 	.word	0x08002bfc
 800237c:	40021000 	.word	0x40021000
 8002380:	007a1200 	.word	0x007a1200
 8002384:	003d0900 	.word	0x003d0900

08002388 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002390:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <RCC_Delay+0x34>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <RCC_Delay+0x38>)
 8002396:	fba2 2303 	umull	r2, r3, r2, r3
 800239a:	0a5b      	lsrs	r3, r3, #9
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	fb02 f303 	mul.w	r3, r2, r3
 80023a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023a4:	bf00      	nop
  }
  while (Delay --);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1e5a      	subs	r2, r3, #1
 80023aa:	60fa      	str	r2, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f9      	bne.n	80023a4 <RCC_Delay+0x1c>
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	20000054 	.word	0x20000054
 80023c0:	10624dd3 	.word	0x10624dd3

080023c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e041      	b.n	800245a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff f84c 	bl	8001488 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3304      	adds	r3, #4
 8002400:	4619      	mov	r1, r3
 8002402:	4610      	mov	r0, r2
 8002404:	f000 fa6a 	bl	80028dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d001      	beq.n	800247c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e035      	b.n	80024e8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a16      	ldr	r2, [pc, #88]	; (80024f4 <HAL_TIM_Base_Start_IT+0x90>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d009      	beq.n	80024b2 <HAL_TIM_Base_Start_IT+0x4e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a6:	d004      	beq.n	80024b2 <HAL_TIM_Base_Start_IT+0x4e>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a12      	ldr	r2, [pc, #72]	; (80024f8 <HAL_TIM_Base_Start_IT+0x94>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d111      	bne.n	80024d6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2b06      	cmp	r3, #6
 80024c2:	d010      	beq.n	80024e6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0201 	orr.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d4:	e007      	b.n	80024e6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0201 	orr.w	r2, r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40012c00 	.word	0x40012c00
 80024f8:	40000400 	.word	0x40000400

080024fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b02      	cmp	r3, #2
 8002510:	d122      	bne.n	8002558 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b02      	cmp	r3, #2
 800251e:	d11b      	bne.n	8002558 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f06f 0202 	mvn.w	r2, #2
 8002528:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f9b1 	bl	80028a6 <HAL_TIM_IC_CaptureCallback>
 8002544:	e005      	b.n	8002552 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f9a4 	bl	8002894 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f9b3 	bl	80028b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b04      	cmp	r3, #4
 8002564:	d122      	bne.n	80025ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b04      	cmp	r3, #4
 8002572:	d11b      	bne.n	80025ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0204 	mvn.w	r2, #4
 800257c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2202      	movs	r2, #2
 8002582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f987 	bl	80028a6 <HAL_TIM_IC_CaptureCallback>
 8002598:	e005      	b.n	80025a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f97a 	bl	8002894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f989 	bl	80028b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d122      	bne.n	8002600 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d11b      	bne.n	8002600 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0208 	mvn.w	r2, #8
 80025d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2204      	movs	r2, #4
 80025d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f95d 	bl	80028a6 <HAL_TIM_IC_CaptureCallback>
 80025ec:	e005      	b.n	80025fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f950 	bl	8002894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f95f 	bl	80028b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	2b10      	cmp	r3, #16
 800260c:	d122      	bne.n	8002654 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0310 	and.w	r3, r3, #16
 8002618:	2b10      	cmp	r3, #16
 800261a:	d11b      	bne.n	8002654 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0210 	mvn.w	r2, #16
 8002624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2208      	movs	r2, #8
 800262a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f933 	bl	80028a6 <HAL_TIM_IC_CaptureCallback>
 8002640:	e005      	b.n	800264e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f926 	bl	8002894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f935 	bl	80028b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b01      	cmp	r3, #1
 8002660:	d10e      	bne.n	8002680 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b01      	cmp	r3, #1
 800266e:	d107      	bne.n	8002680 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f06f 0201 	mvn.w	r2, #1
 8002678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7fe fb98 	bl	8000db0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268a:	2b80      	cmp	r3, #128	; 0x80
 800268c:	d10e      	bne.n	80026ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002698:	2b80      	cmp	r3, #128	; 0x80
 800269a:	d107      	bne.n	80026ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fa67 	bl	8002b7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b6:	2b40      	cmp	r3, #64	; 0x40
 80026b8:	d10e      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c4:	2b40      	cmp	r3, #64	; 0x40
 80026c6:	d107      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f8f9 	bl	80028ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f003 0320 	and.w	r3, r3, #32
 80026e2:	2b20      	cmp	r3, #32
 80026e4:	d10e      	bne.n	8002704 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f003 0320 	and.w	r3, r3, #32
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	d107      	bne.n	8002704 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0220 	mvn.w	r2, #32
 80026fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fa32 	bl	8002b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_TIM_ConfigClockSource+0x18>
 8002720:	2302      	movs	r3, #2
 8002722:	e0b3      	b.n	800288c <HAL_TIM_ConfigClockSource+0x180>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002742:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800274a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800275c:	d03e      	beq.n	80027dc <HAL_TIM_ConfigClockSource+0xd0>
 800275e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002762:	f200 8087 	bhi.w	8002874 <HAL_TIM_ConfigClockSource+0x168>
 8002766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800276a:	f000 8085 	beq.w	8002878 <HAL_TIM_ConfigClockSource+0x16c>
 800276e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002772:	d87f      	bhi.n	8002874 <HAL_TIM_ConfigClockSource+0x168>
 8002774:	2b70      	cmp	r3, #112	; 0x70
 8002776:	d01a      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0xa2>
 8002778:	2b70      	cmp	r3, #112	; 0x70
 800277a:	d87b      	bhi.n	8002874 <HAL_TIM_ConfigClockSource+0x168>
 800277c:	2b60      	cmp	r3, #96	; 0x60
 800277e:	d050      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x116>
 8002780:	2b60      	cmp	r3, #96	; 0x60
 8002782:	d877      	bhi.n	8002874 <HAL_TIM_ConfigClockSource+0x168>
 8002784:	2b50      	cmp	r3, #80	; 0x50
 8002786:	d03c      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0xf6>
 8002788:	2b50      	cmp	r3, #80	; 0x50
 800278a:	d873      	bhi.n	8002874 <HAL_TIM_ConfigClockSource+0x168>
 800278c:	2b40      	cmp	r3, #64	; 0x40
 800278e:	d058      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x136>
 8002790:	2b40      	cmp	r3, #64	; 0x40
 8002792:	d86f      	bhi.n	8002874 <HAL_TIM_ConfigClockSource+0x168>
 8002794:	2b30      	cmp	r3, #48	; 0x30
 8002796:	d064      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0x156>
 8002798:	2b30      	cmp	r3, #48	; 0x30
 800279a:	d86b      	bhi.n	8002874 <HAL_TIM_ConfigClockSource+0x168>
 800279c:	2b20      	cmp	r3, #32
 800279e:	d060      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0x156>
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	d867      	bhi.n	8002874 <HAL_TIM_ConfigClockSource+0x168>
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d05c      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0x156>
 80027a8:	2b10      	cmp	r3, #16
 80027aa:	d05a      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80027ac:	e062      	b.n	8002874 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6899      	ldr	r1, [r3, #8]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f000 f95c 	bl	8002a7a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	609a      	str	r2, [r3, #8]
      break;
 80027da:	e04e      	b.n	800287a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	6899      	ldr	r1, [r3, #8]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f000 f945 	bl	8002a7a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027fe:	609a      	str	r2, [r3, #8]
      break;
 8002800:	e03b      	b.n	800287a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6859      	ldr	r1, [r3, #4]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	461a      	mov	r2, r3
 8002810:	f000 f8bc 	bl	800298c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2150      	movs	r1, #80	; 0x50
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f913 	bl	8002a46 <TIM_ITRx_SetConfig>
      break;
 8002820:	e02b      	b.n	800287a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6859      	ldr	r1, [r3, #4]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	461a      	mov	r2, r3
 8002830:	f000 f8da 	bl	80029e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2160      	movs	r1, #96	; 0x60
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f903 	bl	8002a46 <TIM_ITRx_SetConfig>
      break;
 8002840:	e01b      	b.n	800287a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	6859      	ldr	r1, [r3, #4]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	461a      	mov	r2, r3
 8002850:	f000 f89c 	bl	800298c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2140      	movs	r1, #64	; 0x40
 800285a:	4618      	mov	r0, r3
 800285c:	f000 f8f3 	bl	8002a46 <TIM_ITRx_SetConfig>
      break;
 8002860:	e00b      	b.n	800287a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4619      	mov	r1, r3
 800286c:	4610      	mov	r0, r2
 800286e:	f000 f8ea 	bl	8002a46 <TIM_ITRx_SetConfig>
        break;
 8002872:	e002      	b.n	800287a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002874:	bf00      	nop
 8002876:	e000      	b.n	800287a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002878:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a25      	ldr	r2, [pc, #148]	; (8002984 <TIM_Base_SetConfig+0xa8>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d007      	beq.n	8002904 <TIM_Base_SetConfig+0x28>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fa:	d003      	beq.n	8002904 <TIM_Base_SetConfig+0x28>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a22      	ldr	r2, [pc, #136]	; (8002988 <TIM_Base_SetConfig+0xac>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d108      	bne.n	8002916 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a1a      	ldr	r2, [pc, #104]	; (8002984 <TIM_Base_SetConfig+0xa8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d007      	beq.n	800292e <TIM_Base_SetConfig+0x52>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002924:	d003      	beq.n	800292e <TIM_Base_SetConfig+0x52>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a17      	ldr	r2, [pc, #92]	; (8002988 <TIM_Base_SetConfig+0xac>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d108      	bne.n	8002940 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	4313      	orrs	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a07      	ldr	r2, [pc, #28]	; (8002984 <TIM_Base_SetConfig+0xa8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d103      	bne.n	8002974 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	615a      	str	r2, [r3, #20]
}
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	40012c00 	.word	0x40012c00
 8002988:	40000400 	.word	0x40000400

0800298c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	f023 0201 	bic.w	r2, r3, #1
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f023 030a 	bic.w	r3, r3, #10
 80029c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	621a      	str	r2, [r3, #32]
}
 80029de:	bf00      	nop
 80029e0:	371c      	adds	r7, #28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	f023 0210 	bic.w	r2, r3, #16
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	031b      	lsls	r3, r3, #12
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	621a      	str	r2, [r3, #32]
}
 8002a3c:	bf00      	nop
 8002a3e:	371c      	adds	r7, #28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b085      	sub	sp, #20
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f043 0307 	orr.w	r3, r3, #7
 8002a68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	609a      	str	r2, [r3, #8]
}
 8002a70:	bf00      	nop
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr

08002a7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b087      	sub	sp, #28
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	021a      	lsls	r2, r3, #8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	609a      	str	r2, [r3, #8]
}
 8002aae:	bf00      	nop
 8002ab0:	371c      	adds	r7, #28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e041      	b.n	8002b54 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a14      	ldr	r2, [pc, #80]	; (8002b60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d009      	beq.n	8002b28 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1c:	d004      	beq.n	8002b28 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a10      	ldr	r2, [pc, #64]	; (8002b64 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d10c      	bne.n	8002b42 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	40012c00 	.word	0x40012c00
 8002b64:	40000400 	.word	0x40000400

08002b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr

08002b7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <__libc_init_array>:
 8002b8c:	b570      	push	{r4, r5, r6, lr}
 8002b8e:	2600      	movs	r6, #0
 8002b90:	4d0c      	ldr	r5, [pc, #48]	; (8002bc4 <__libc_init_array+0x38>)
 8002b92:	4c0d      	ldr	r4, [pc, #52]	; (8002bc8 <__libc_init_array+0x3c>)
 8002b94:	1b64      	subs	r4, r4, r5
 8002b96:	10a4      	asrs	r4, r4, #2
 8002b98:	42a6      	cmp	r6, r4
 8002b9a:	d109      	bne.n	8002bb0 <__libc_init_array+0x24>
 8002b9c:	f000 f822 	bl	8002be4 <_init>
 8002ba0:	2600      	movs	r6, #0
 8002ba2:	4d0a      	ldr	r5, [pc, #40]	; (8002bcc <__libc_init_array+0x40>)
 8002ba4:	4c0a      	ldr	r4, [pc, #40]	; (8002bd0 <__libc_init_array+0x44>)
 8002ba6:	1b64      	subs	r4, r4, r5
 8002ba8:	10a4      	asrs	r4, r4, #2
 8002baa:	42a6      	cmp	r6, r4
 8002bac:	d105      	bne.n	8002bba <__libc_init_array+0x2e>
 8002bae:	bd70      	pop	{r4, r5, r6, pc}
 8002bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb4:	4798      	blx	r3
 8002bb6:	3601      	adds	r6, #1
 8002bb8:	e7ee      	b.n	8002b98 <__libc_init_array+0xc>
 8002bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bbe:	4798      	blx	r3
 8002bc0:	3601      	adds	r6, #1
 8002bc2:	e7f2      	b.n	8002baa <__libc_init_array+0x1e>
 8002bc4:	08002c1c 	.word	0x08002c1c
 8002bc8:	08002c1c 	.word	0x08002c1c
 8002bcc:	08002c1c 	.word	0x08002c1c
 8002bd0:	08002c20 	.word	0x08002c20

08002bd4 <memset>:
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	4402      	add	r2, r0
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d100      	bne.n	8002bde <memset+0xa>
 8002bdc:	4770      	bx	lr
 8002bde:	f803 1b01 	strb.w	r1, [r3], #1
 8002be2:	e7f9      	b.n	8002bd8 <memset+0x4>

08002be4 <_init>:
 8002be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be6:	bf00      	nop
 8002be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bea:	bc08      	pop	{r3}
 8002bec:	469e      	mov	lr, r3
 8002bee:	4770      	bx	lr

08002bf0 <_fini>:
 8002bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf2:	bf00      	nop
 8002bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf6:	bc08      	pop	{r3}
 8002bf8:	469e      	mov	lr, r3
 8002bfa:	4770      	bx	lr
