
Midterm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080025cc  080025cc  000125cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025ec  080025ec  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080025ec  080025ec  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025ec  080025ec  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025ec  080025ec  000125ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025f0  080025f0  000125f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080025f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000014  08002608  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002608  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000862f  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001987  00000000  00000000  0002866c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  00029ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000900  00000000  00000000  0002a9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c49  00000000  00000000  0002b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6ae  00000000  00000000  00041f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081e06  00000000  00000000  0004d5ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf3f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002794  00000000  00000000  000cf448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	080025b4 	.word	0x080025b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	080025b4 	.word	0x080025b4

0800014c <isButtonPressed>:
int KeyReg2[NUM_OF_BUTTONS];
int KeyReg3[NUM_OF_BUTTONS];
int button_flag[NUM_OF_BUTTONS];
int TimeOutForKeyPress[NUM_OF_BUTTONS];

int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000060 	.word	0x20000060

08000180 <subKeyProcess>:

void subKeyProcess(int index) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000060 	.word	0x20000060

080001a0 <clearButton>:

void clearButton() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, NORMAL_STATE);
 80001a4:	2201      	movs	r2, #1
 80001a6:	2102      	movs	r1, #2
 80001a8:	4807      	ldr	r0, [pc, #28]	; (80001c8 <clearButton+0x28>)
 80001aa:	f001 f9da 	bl	8001562 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INC_GPIO_Port, INC_Pin, NORMAL_STATE);
 80001ae:	2201      	movs	r2, #1
 80001b0:	2104      	movs	r1, #4
 80001b2:	4805      	ldr	r0, [pc, #20]	; (80001c8 <clearButton+0x28>)
 80001b4:	f001 f9d5 	bl	8001562 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEC_GPIO_Port, DEC_Pin, NORMAL_STATE);
 80001b8:	2201      	movs	r2, #1
 80001ba:	2108      	movs	r1, #8
 80001bc:	4802      	ldr	r0, [pc, #8]	; (80001c8 <clearButton+0x28>)
 80001be:	f001 f9d0 	bl	8001562 <HAL_GPIO_WritePin>
}
 80001c2:	bf00      	nop
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	40010800 	.word	0x40010800

080001cc <getKeyInput>:

void getKeyInput() {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
	clearButton();
 80001d2:	f7ff ffe5 	bl	80001a0 <clearButton>
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80001d6:	2300      	movs	r3, #0
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	e08e      	b.n	80002fa <getKeyInput+0x12e>
		KeyReg0[i] = KeyReg1[i];
 80001dc:	4a4b      	ldr	r2, [pc, #300]	; (800030c <getKeyInput+0x140>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e4:	494a      	ldr	r1, [pc, #296]	; (8000310 <getKeyInput+0x144>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001ec:	4a49      	ldr	r2, [pc, #292]	; (8000314 <getKeyInput+0x148>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f4:	4945      	ldr	r1, [pc, #276]	; (800030c <getKeyInput+0x140>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if (i == 0) {
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d10a      	bne.n	8000218 <getKeyInput+0x4c>
			KeyReg2[i] = HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin);
 8000202:	2102      	movs	r1, #2
 8000204:	4844      	ldr	r0, [pc, #272]	; (8000318 <getKeyInput+0x14c>)
 8000206:	f001 f995 	bl	8001534 <HAL_GPIO_ReadPin>
 800020a:	4603      	mov	r3, r0
 800020c:	4619      	mov	r1, r3
 800020e:	4a41      	ldr	r2, [pc, #260]	; (8000314 <getKeyInput+0x148>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000216:	e01a      	b.n	800024e <getKeyInput+0x82>
		} else if (i == 1) {
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2b01      	cmp	r3, #1
 800021c:	d10a      	bne.n	8000234 <getKeyInput+0x68>
			KeyReg2[i] = HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin);
 800021e:	2104      	movs	r1, #4
 8000220:	483d      	ldr	r0, [pc, #244]	; (8000318 <getKeyInput+0x14c>)
 8000222:	f001 f987 	bl	8001534 <HAL_GPIO_ReadPin>
 8000226:	4603      	mov	r3, r0
 8000228:	4619      	mov	r1, r3
 800022a:	4a3a      	ldr	r2, [pc, #232]	; (8000314 <getKeyInput+0x148>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000232:	e00c      	b.n	800024e <getKeyInput+0x82>
		} else if (i == 2) {
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b02      	cmp	r3, #2
 8000238:	d109      	bne.n	800024e <getKeyInput+0x82>
			KeyReg2[i] = HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin);
 800023a:	2108      	movs	r1, #8
 800023c:	4836      	ldr	r0, [pc, #216]	; (8000318 <getKeyInput+0x14c>)
 800023e:	f001 f979 	bl	8001534 <HAL_GPIO_ReadPin>
 8000242:	4603      	mov	r3, r0
 8000244:	4619      	mov	r1, r3
 8000246:	4a33      	ldr	r2, [pc, #204]	; (8000314 <getKeyInput+0x148>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 800024e:	4a30      	ldr	r2, [pc, #192]	; (8000310 <getKeyInput+0x144>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000256:	492d      	ldr	r1, [pc, #180]	; (800030c <getKeyInput+0x140>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800025e:	429a      	cmp	r2, r3
 8000260:	d148      	bne.n	80002f4 <getKeyInput+0x128>
 8000262:	4a2a      	ldr	r2, [pc, #168]	; (800030c <getKeyInput+0x140>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800026a:	492a      	ldr	r1, [pc, #168]	; (8000314 <getKeyInput+0x148>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000272:	429a      	cmp	r2, r3
 8000274:	d13e      	bne.n	80002f4 <getKeyInput+0x128>
			if (KeyReg3[i] != KeyReg2[i]) {
 8000276:	4a29      	ldr	r2, [pc, #164]	; (800031c <getKeyInput+0x150>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800027e:	4925      	ldr	r1, [pc, #148]	; (8000314 <getKeyInput+0x148>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000286:	429a      	cmp	r2, r3
 8000288:	d017      	beq.n	80002ba <getKeyInput+0xee>
				KeyReg3[i] = KeyReg2[i];
 800028a:	4a22      	ldr	r2, [pc, #136]	; (8000314 <getKeyInput+0x148>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000292:	4922      	ldr	r1, [pc, #136]	; (800031c <getKeyInput+0x150>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg2[i] == PRESSED_STATE) {
 800029a:	4a1e      	ldr	r2, [pc, #120]	; (8000314 <getKeyInput+0x148>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d126      	bne.n	80002f4 <getKeyInput+0x128>
					TimeOutForKeyPress[i] = 300;
 80002a6:	4a1e      	ldr	r2, [pc, #120]	; (8000320 <getKeyInput+0x154>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80002ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 80002b2:	6878      	ldr	r0, [r7, #4]
 80002b4:	f7ff ff64 	bl	8000180 <subKeyProcess>
 80002b8:	e01c      	b.n	80002f4 <getKeyInput+0x128>
				}
			} else {
				TimeOutForKeyPress[i]--;
 80002ba:	4a19      	ldr	r2, [pc, #100]	; (8000320 <getKeyInput+0x154>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c2:	1e5a      	subs	r2, r3, #1
 80002c4:	4916      	ldr	r1, [pc, #88]	; (8000320 <getKeyInput+0x154>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0) {
 80002cc:	4a14      	ldr	r2, [pc, #80]	; (8000320 <getKeyInput+0x154>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d10d      	bne.n	80002f4 <getKeyInput+0x128>
					if (KeyReg2[i] == PRESSED_STATE) {
 80002d8:	4a0e      	ldr	r2, [pc, #56]	; (8000314 <getKeyInput+0x148>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d102      	bne.n	80002ea <getKeyInput+0x11e>
						subKeyProcess(i);
 80002e4:	6878      	ldr	r0, [r7, #4]
 80002e6:	f7ff ff4b 	bl	8000180 <subKeyProcess>
					}
					TimeOutForKeyPress[i] = 100;
 80002ea:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <getKeyInput+0x154>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2164      	movs	r1, #100	; 0x64
 80002f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	3301      	adds	r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2b02      	cmp	r3, #2
 80002fe:	f77f af6d 	ble.w	80001dc <getKeyInput+0x10>
				}
			}
		}
	}
}
 8000302:	bf00      	nop
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	2000003c 	.word	0x2000003c
 8000310:	20000030 	.word	0x20000030
 8000314:	20000048 	.word	0x20000048
 8000318:	40010800 	.word	0x40010800
 800031c:	20000054 	.word	0x20000054
 8000320:	2000006c 	.word	0x2000006c

08000324 <display7SEG>:
 *  Created on: Nov 1, 2022
 *      Author: Linh
 */
#include "display7SEG.h"

void display7SEG(int num) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	switch (num) {
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2b09      	cmp	r3, #9
 8000330:	f200 8180 	bhi.w	8000634 <display7SEG+0x310>
 8000334:	a201      	add	r2, pc, #4	; (adr r2, 800033c <display7SEG+0x18>)
 8000336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800033a:	bf00      	nop
 800033c:	08000365 	.word	0x08000365
 8000340:	080003ad 	.word	0x080003ad
 8000344:	080003f5 	.word	0x080003f5
 8000348:	0800043d 	.word	0x0800043d
 800034c:	08000485 	.word	0x08000485
 8000350:	080004cd 	.word	0x080004cd
 8000354:	08000515 	.word	0x08000515
 8000358:	0800055d 	.word	0x0800055d
 800035c:	080005a5 	.word	0x080005a5
 8000360:	080005ed 	.word	0x080005ed
	case 0:
		HAL_GPIO_WritePin(LED7_0_GPIO_Port, LED7_0_Pin, RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2101      	movs	r1, #1
 8000368:	48c6      	ldr	r0, [pc, #792]	; (8000684 <display7SEG+0x360>)
 800036a:	f001 f8fa 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2102      	movs	r1, #2
 8000372:	48c4      	ldr	r0, [pc, #784]	; (8000684 <display7SEG+0x360>)
 8000374:	f001 f8f5 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2104      	movs	r1, #4
 800037c:	48c1      	ldr	r0, [pc, #772]	; (8000684 <display7SEG+0x360>)
 800037e:	f001 f8f0 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	2108      	movs	r1, #8
 8000386:	48bf      	ldr	r0, [pc, #764]	; (8000684 <display7SEG+0x360>)
 8000388:	f001 f8eb 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	2110      	movs	r1, #16
 8000390:	48bc      	ldr	r0, [pc, #752]	; (8000684 <display7SEG+0x360>)
 8000392:	f001 f8e6 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	2120      	movs	r1, #32
 800039a:	48ba      	ldr	r0, [pc, #744]	; (8000684 <display7SEG+0x360>)
 800039c:	f001 f8e1 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, SET);
 80003a0:	2201      	movs	r2, #1
 80003a2:	2140      	movs	r1, #64	; 0x40
 80003a4:	48b7      	ldr	r0, [pc, #732]	; (8000684 <display7SEG+0x360>)
 80003a6:	f001 f8dc 	bl	8001562 <HAL_GPIO_WritePin>
		break;
 80003aa:	e167      	b.n	800067c <display7SEG+0x358>
	case 1:
		HAL_GPIO_WritePin(LED7_0_GPIO_Port, LED7_0_Pin, SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2101      	movs	r1, #1
 80003b0:	48b4      	ldr	r0, [pc, #720]	; (8000684 <display7SEG+0x360>)
 80003b2:	f001 f8d6 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2102      	movs	r1, #2
 80003ba:	48b2      	ldr	r0, [pc, #712]	; (8000684 <display7SEG+0x360>)
 80003bc:	f001 f8d1 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	2104      	movs	r1, #4
 80003c4:	48af      	ldr	r0, [pc, #700]	; (8000684 <display7SEG+0x360>)
 80003c6:	f001 f8cc 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, SET);
 80003ca:	2201      	movs	r2, #1
 80003cc:	2108      	movs	r1, #8
 80003ce:	48ad      	ldr	r0, [pc, #692]	; (8000684 <display7SEG+0x360>)
 80003d0:	f001 f8c7 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, SET);
 80003d4:	2201      	movs	r2, #1
 80003d6:	2110      	movs	r1, #16
 80003d8:	48aa      	ldr	r0, [pc, #680]	; (8000684 <display7SEG+0x360>)
 80003da:	f001 f8c2 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, SET);
 80003de:	2201      	movs	r2, #1
 80003e0:	2120      	movs	r1, #32
 80003e2:	48a8      	ldr	r0, [pc, #672]	; (8000684 <display7SEG+0x360>)
 80003e4:	f001 f8bd 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, SET);
 80003e8:	2201      	movs	r2, #1
 80003ea:	2140      	movs	r1, #64	; 0x40
 80003ec:	48a5      	ldr	r0, [pc, #660]	; (8000684 <display7SEG+0x360>)
 80003ee:	f001 f8b8 	bl	8001562 <HAL_GPIO_WritePin>
		break;
 80003f2:	e143      	b.n	800067c <display7SEG+0x358>
	case 2:
		HAL_GPIO_WritePin(LED7_0_GPIO_Port, LED7_0_Pin, RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2101      	movs	r1, #1
 80003f8:	48a2      	ldr	r0, [pc, #648]	; (8000684 <display7SEG+0x360>)
 80003fa:	f001 f8b2 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2102      	movs	r1, #2
 8000402:	48a0      	ldr	r0, [pc, #640]	; (8000684 <display7SEG+0x360>)
 8000404:	f001 f8ad 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, SET);
 8000408:	2201      	movs	r2, #1
 800040a:	2104      	movs	r1, #4
 800040c:	489d      	ldr	r0, [pc, #628]	; (8000684 <display7SEG+0x360>)
 800040e:	f001 f8a8 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	2108      	movs	r1, #8
 8000416:	489b      	ldr	r0, [pc, #620]	; (8000684 <display7SEG+0x360>)
 8000418:	f001 f8a3 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	2110      	movs	r1, #16
 8000420:	4898      	ldr	r0, [pc, #608]	; (8000684 <display7SEG+0x360>)
 8000422:	f001 f89e 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, SET);
 8000426:	2201      	movs	r2, #1
 8000428:	2120      	movs	r1, #32
 800042a:	4896      	ldr	r0, [pc, #600]	; (8000684 <display7SEG+0x360>)
 800042c:	f001 f899 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	2140      	movs	r1, #64	; 0x40
 8000434:	4893      	ldr	r0, [pc, #588]	; (8000684 <display7SEG+0x360>)
 8000436:	f001 f894 	bl	8001562 <HAL_GPIO_WritePin>
		break;
 800043a:	e11f      	b.n	800067c <display7SEG+0x358>
	case 3:
		HAL_GPIO_WritePin(LED7_0_GPIO_Port, LED7_0_Pin, RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	2101      	movs	r1, #1
 8000440:	4890      	ldr	r0, [pc, #576]	; (8000684 <display7SEG+0x360>)
 8000442:	f001 f88e 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	2102      	movs	r1, #2
 800044a:	488e      	ldr	r0, [pc, #568]	; (8000684 <display7SEG+0x360>)
 800044c:	f001 f889 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	2104      	movs	r1, #4
 8000454:	488b      	ldr	r0, [pc, #556]	; (8000684 <display7SEG+0x360>)
 8000456:	f001 f884 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	2108      	movs	r1, #8
 800045e:	4889      	ldr	r0, [pc, #548]	; (8000684 <display7SEG+0x360>)
 8000460:	f001 f87f 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, SET);
 8000464:	2201      	movs	r2, #1
 8000466:	2110      	movs	r1, #16
 8000468:	4886      	ldr	r0, [pc, #536]	; (8000684 <display7SEG+0x360>)
 800046a:	f001 f87a 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, SET);
 800046e:	2201      	movs	r2, #1
 8000470:	2120      	movs	r1, #32
 8000472:	4884      	ldr	r0, [pc, #528]	; (8000684 <display7SEG+0x360>)
 8000474:	f001 f875 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	2140      	movs	r1, #64	; 0x40
 800047c:	4881      	ldr	r0, [pc, #516]	; (8000684 <display7SEG+0x360>)
 800047e:	f001 f870 	bl	8001562 <HAL_GPIO_WritePin>
		break;
 8000482:	e0fb      	b.n	800067c <display7SEG+0x358>
	case 4:
		HAL_GPIO_WritePin(LED7_0_GPIO_Port, LED7_0_Pin, SET);
 8000484:	2201      	movs	r2, #1
 8000486:	2101      	movs	r1, #1
 8000488:	487e      	ldr	r0, [pc, #504]	; (8000684 <display7SEG+0x360>)
 800048a:	f001 f86a 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, RESET);
 800048e:	2200      	movs	r2, #0
 8000490:	2102      	movs	r1, #2
 8000492:	487c      	ldr	r0, [pc, #496]	; (8000684 <display7SEG+0x360>)
 8000494:	f001 f865 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	2104      	movs	r1, #4
 800049c:	4879      	ldr	r0, [pc, #484]	; (8000684 <display7SEG+0x360>)
 800049e:	f001 f860 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, SET);
 80004a2:	2201      	movs	r2, #1
 80004a4:	2108      	movs	r1, #8
 80004a6:	4877      	ldr	r0, [pc, #476]	; (8000684 <display7SEG+0x360>)
 80004a8:	f001 f85b 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, SET);
 80004ac:	2201      	movs	r2, #1
 80004ae:	2110      	movs	r1, #16
 80004b0:	4874      	ldr	r0, [pc, #464]	; (8000684 <display7SEG+0x360>)
 80004b2:	f001 f856 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2120      	movs	r1, #32
 80004ba:	4872      	ldr	r0, [pc, #456]	; (8000684 <display7SEG+0x360>)
 80004bc:	f001 f851 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2140      	movs	r1, #64	; 0x40
 80004c4:	486f      	ldr	r0, [pc, #444]	; (8000684 <display7SEG+0x360>)
 80004c6:	f001 f84c 	bl	8001562 <HAL_GPIO_WritePin>
		break;
 80004ca:	e0d7      	b.n	800067c <display7SEG+0x358>
	case 5:
		HAL_GPIO_WritePin(LED7_0_GPIO_Port, LED7_0_Pin, RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2101      	movs	r1, #1
 80004d0:	486c      	ldr	r0, [pc, #432]	; (8000684 <display7SEG+0x360>)
 80004d2:	f001 f846 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, SET);
 80004d6:	2201      	movs	r2, #1
 80004d8:	2102      	movs	r1, #2
 80004da:	486a      	ldr	r0, [pc, #424]	; (8000684 <display7SEG+0x360>)
 80004dc:	f001 f841 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2104      	movs	r1, #4
 80004e4:	4867      	ldr	r0, [pc, #412]	; (8000684 <display7SEG+0x360>)
 80004e6:	f001 f83c 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2108      	movs	r1, #8
 80004ee:	4865      	ldr	r0, [pc, #404]	; (8000684 <display7SEG+0x360>)
 80004f0:	f001 f837 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2110      	movs	r1, #16
 80004f8:	4862      	ldr	r0, [pc, #392]	; (8000684 <display7SEG+0x360>)
 80004fa:	f001 f832 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	2120      	movs	r1, #32
 8000502:	4860      	ldr	r0, [pc, #384]	; (8000684 <display7SEG+0x360>)
 8000504:	f001 f82d 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2140      	movs	r1, #64	; 0x40
 800050c:	485d      	ldr	r0, [pc, #372]	; (8000684 <display7SEG+0x360>)
 800050e:	f001 f828 	bl	8001562 <HAL_GPIO_WritePin>
		break;
 8000512:	e0b3      	b.n	800067c <display7SEG+0x358>
	case 6:
		HAL_GPIO_WritePin(LED7_0_GPIO_Port, LED7_0_Pin, RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	2101      	movs	r1, #1
 8000518:	485a      	ldr	r0, [pc, #360]	; (8000684 <display7SEG+0x360>)
 800051a:	f001 f822 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, SET);
 800051e:	2201      	movs	r2, #1
 8000520:	2102      	movs	r1, #2
 8000522:	4858      	ldr	r0, [pc, #352]	; (8000684 <display7SEG+0x360>)
 8000524:	f001 f81d 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	2104      	movs	r1, #4
 800052c:	4855      	ldr	r0, [pc, #340]	; (8000684 <display7SEG+0x360>)
 800052e:	f001 f818 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2108      	movs	r1, #8
 8000536:	4853      	ldr	r0, [pc, #332]	; (8000684 <display7SEG+0x360>)
 8000538:	f001 f813 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	2110      	movs	r1, #16
 8000540:	4850      	ldr	r0, [pc, #320]	; (8000684 <display7SEG+0x360>)
 8000542:	f001 f80e 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	2120      	movs	r1, #32
 800054a:	484e      	ldr	r0, [pc, #312]	; (8000684 <display7SEG+0x360>)
 800054c:	f001 f809 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2140      	movs	r1, #64	; 0x40
 8000554:	484b      	ldr	r0, [pc, #300]	; (8000684 <display7SEG+0x360>)
 8000556:	f001 f804 	bl	8001562 <HAL_GPIO_WritePin>
		break;
 800055a:	e08f      	b.n	800067c <display7SEG+0x358>
	case 7:
		HAL_GPIO_WritePin(LED7_0_GPIO_Port, LED7_0_Pin, RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2101      	movs	r1, #1
 8000560:	4848      	ldr	r0, [pc, #288]	; (8000684 <display7SEG+0x360>)
 8000562:	f000 fffe 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2102      	movs	r1, #2
 800056a:	4846      	ldr	r0, [pc, #280]	; (8000684 <display7SEG+0x360>)
 800056c:	f000 fff9 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2104      	movs	r1, #4
 8000574:	4843      	ldr	r0, [pc, #268]	; (8000684 <display7SEG+0x360>)
 8000576:	f000 fff4 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, SET);
 800057a:	2201      	movs	r2, #1
 800057c:	2108      	movs	r1, #8
 800057e:	4841      	ldr	r0, [pc, #260]	; (8000684 <display7SEG+0x360>)
 8000580:	f000 ffef 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, SET);
 8000584:	2201      	movs	r2, #1
 8000586:	2110      	movs	r1, #16
 8000588:	483e      	ldr	r0, [pc, #248]	; (8000684 <display7SEG+0x360>)
 800058a:	f000 ffea 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2120      	movs	r1, #32
 8000592:	483c      	ldr	r0, [pc, #240]	; (8000684 <display7SEG+0x360>)
 8000594:	f000 ffe5 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2140      	movs	r1, #64	; 0x40
 800059c:	4839      	ldr	r0, [pc, #228]	; (8000684 <display7SEG+0x360>)
 800059e:	f000 ffe0 	bl	8001562 <HAL_GPIO_WritePin>
		break;
 80005a2:	e06b      	b.n	800067c <display7SEG+0x358>
	case 8:
		HAL_GPIO_WritePin(LED7_0_GPIO_Port, LED7_0_Pin, RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2101      	movs	r1, #1
 80005a8:	4836      	ldr	r0, [pc, #216]	; (8000684 <display7SEG+0x360>)
 80005aa:	f000 ffda 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2102      	movs	r1, #2
 80005b2:	4834      	ldr	r0, [pc, #208]	; (8000684 <display7SEG+0x360>)
 80005b4:	f000 ffd5 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2104      	movs	r1, #4
 80005bc:	4831      	ldr	r0, [pc, #196]	; (8000684 <display7SEG+0x360>)
 80005be:	f000 ffd0 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2108      	movs	r1, #8
 80005c6:	482f      	ldr	r0, [pc, #188]	; (8000684 <display7SEG+0x360>)
 80005c8:	f000 ffcb 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2110      	movs	r1, #16
 80005d0:	482c      	ldr	r0, [pc, #176]	; (8000684 <display7SEG+0x360>)
 80005d2:	f000 ffc6 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2120      	movs	r1, #32
 80005da:	482a      	ldr	r0, [pc, #168]	; (8000684 <display7SEG+0x360>)
 80005dc:	f000 ffc1 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2140      	movs	r1, #64	; 0x40
 80005e4:	4827      	ldr	r0, [pc, #156]	; (8000684 <display7SEG+0x360>)
 80005e6:	f000 ffbc 	bl	8001562 <HAL_GPIO_WritePin>
		break;
 80005ea:	e047      	b.n	800067c <display7SEG+0x358>
	case 9:
		HAL_GPIO_WritePin(LED7_0_GPIO_Port, LED7_0_Pin, RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2101      	movs	r1, #1
 80005f0:	4824      	ldr	r0, [pc, #144]	; (8000684 <display7SEG+0x360>)
 80005f2:	f000 ffb6 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2102      	movs	r1, #2
 80005fa:	4822      	ldr	r0, [pc, #136]	; (8000684 <display7SEG+0x360>)
 80005fc:	f000 ffb1 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2104      	movs	r1, #4
 8000604:	481f      	ldr	r0, [pc, #124]	; (8000684 <display7SEG+0x360>)
 8000606:	f000 ffac 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2108      	movs	r1, #8
 800060e:	481d      	ldr	r0, [pc, #116]	; (8000684 <display7SEG+0x360>)
 8000610:	f000 ffa7 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, SET);
 8000614:	2201      	movs	r2, #1
 8000616:	2110      	movs	r1, #16
 8000618:	481a      	ldr	r0, [pc, #104]	; (8000684 <display7SEG+0x360>)
 800061a:	f000 ffa2 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2120      	movs	r1, #32
 8000622:	4818      	ldr	r0, [pc, #96]	; (8000684 <display7SEG+0x360>)
 8000624:	f000 ff9d 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2140      	movs	r1, #64	; 0x40
 800062c:	4815      	ldr	r0, [pc, #84]	; (8000684 <display7SEG+0x360>)
 800062e:	f000 ff98 	bl	8001562 <HAL_GPIO_WritePin>
		break;
 8000632:	e023      	b.n	800067c <display7SEG+0x358>
	default:
		HAL_GPIO_WritePin(LED7_0_GPIO_Port, LED7_0_Pin, SET);
 8000634:	2201      	movs	r2, #1
 8000636:	2101      	movs	r1, #1
 8000638:	4812      	ldr	r0, [pc, #72]	; (8000684 <display7SEG+0x360>)
 800063a:	f000 ff92 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_1_GPIO_Port, LED7_1_Pin, SET);
 800063e:	2201      	movs	r2, #1
 8000640:	2102      	movs	r1, #2
 8000642:	4810      	ldr	r0, [pc, #64]	; (8000684 <display7SEG+0x360>)
 8000644:	f000 ff8d 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_2_GPIO_Port, LED7_2_Pin, SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2104      	movs	r1, #4
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <display7SEG+0x360>)
 800064e:	f000 ff88 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_3_GPIO_Port, LED7_3_Pin, SET);
 8000652:	2201      	movs	r2, #1
 8000654:	2108      	movs	r1, #8
 8000656:	480b      	ldr	r0, [pc, #44]	; (8000684 <display7SEG+0x360>)
 8000658:	f000 ff83 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_4_GPIO_Port, LED7_4_Pin, SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2110      	movs	r1, #16
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <display7SEG+0x360>)
 8000662:	f000 ff7e 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_5_GPIO_Port, LED7_5_Pin, SET);
 8000666:	2201      	movs	r2, #1
 8000668:	2120      	movs	r1, #32
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <display7SEG+0x360>)
 800066c:	f000 ff79 	bl	8001562 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_6_GPIO_Port, LED7_6_Pin, SET);
 8000670:	2201      	movs	r2, #1
 8000672:	2140      	movs	r1, #64	; 0x40
 8000674:	4803      	ldr	r0, [pc, #12]	; (8000684 <display7SEG+0x360>)
 8000676:	f000 ff74 	bl	8001562 <HAL_GPIO_WritePin>
		break;
 800067a:	bf00      	nop

	}
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40010c00 	.word	0x40010c00

08000688 <fsm_simple_buttons_run>:
 *      Author: Linh
 */

#include "fsm_simple_buttons.h"

void fsm_simple_buttons_run() {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	//Led toggle every 0.5s
	if (timer1_flag == 1) {
 800068c:	4ba3      	ldr	r3, [pc, #652]	; (800091c <fsm_simple_buttons_run+0x294>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d107      	bne.n	80006a4 <fsm_simple_buttons_run+0x1c>
		setTimer1(500);
 8000694:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000698:	f000 fb20 	bl	8000cdc <setTimer1>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800069c:	2120      	movs	r1, #32
 800069e:	48a0      	ldr	r0, [pc, #640]	; (8000920 <fsm_simple_buttons_run+0x298>)
 80006a0:	f000 ff77 	bl	8001592 <HAL_GPIO_TogglePin>
	}

	switch (status) {
 80006a4:	4b9f      	ldr	r3, [pc, #636]	; (8000924 <fsm_simple_buttons_run+0x29c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3b01      	subs	r3, #1
 80006aa:	2b04      	cmp	r3, #4
 80006ac:	f200 81e9 	bhi.w	8000a82 <fsm_simple_buttons_run+0x3fa>
 80006b0:	a201      	add	r2, pc, #4	; (adr r2, 80006b8 <fsm_simple_buttons_run+0x30>)
 80006b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b6:	bf00      	nop
 80006b8:	080006cd 	.word	0x080006cd
 80006bc:	080006e5 	.word	0x080006e5
 80006c0:	080007cb 	.word	0x080007cb
 80006c4:	080008b1 	.word	0x080008b1
 80006c8:	080009ab 	.word	0x080009ab
	case INIT:
		status = AUTO;
 80006cc:	4b95      	ldr	r3, [pc, #596]	; (8000924 <fsm_simple_buttons_run+0x29c>)
 80006ce:	2205      	movs	r2, #5
 80006d0:	601a      	str	r2, [r3, #0]
		counter = 9;
 80006d2:	4b95      	ldr	r3, [pc, #596]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 80006d4:	2209      	movs	r2, #9
 80006d6:	601a      	str	r2, [r3, #0]
		display7SEG(counter);
 80006d8:	4b93      	ldr	r3, [pc, #588]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff fe21 	bl	8000324 <display7SEG>
		break;
 80006e2:	e1d5      	b.n	8000a90 <fsm_simple_buttons_run+0x408>

	case RST:
		if (isButtonPressed(0) == 1) {
 80006e4:	2000      	movs	r0, #0
 80006e6:	f7ff fd31 	bl	800014c <isButtonPressed>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d10f      	bne.n	8000710 <fsm_simple_buttons_run+0x88>
			//RESET button is pressed
			status = RST;
 80006f0:	4b8c      	ldr	r3, [pc, #560]	; (8000924 <fsm_simple_buttons_run+0x29c>)
 80006f2:	2202      	movs	r2, #2
 80006f4:	601a      	str	r2, [r3, #0]
			setTimer2(10000);
 80006f6:	f242 7010 	movw	r0, #10000	; 0x2710
 80006fa:	f000 fb0b 	bl	8000d14 <setTimer2>
			counter = 0;
 80006fe:	4b8a      	ldr	r3, [pc, #552]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
			display7SEG(counter);
 8000704:	4b88      	ldr	r3, [pc, #544]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff fe0b 	bl	8000324 <display7SEG>
			display7SEG(counter);
			counter--;
			if (counter < 0)
				counter = 0;
		}
		break;
 800070e:	e1ba      	b.n	8000a86 <fsm_simple_buttons_run+0x3fe>
		} else if (isButtonPressed(1) == 1) {
 8000710:	2001      	movs	r0, #1
 8000712:	f7ff fd1b 	bl	800014c <isButtonPressed>
 8000716:	4603      	mov	r3, r0
 8000718:	2b01      	cmp	r3, #1
 800071a:	d118      	bne.n	800074e <fsm_simple_buttons_run+0xc6>
			status = INC;
 800071c:	4b81      	ldr	r3, [pc, #516]	; (8000924 <fsm_simple_buttons_run+0x29c>)
 800071e:	2203      	movs	r2, #3
 8000720:	601a      	str	r2, [r3, #0]
			setTimer2(10000);
 8000722:	f242 7010 	movw	r0, #10000	; 0x2710
 8000726:	f000 faf5 	bl	8000d14 <setTimer2>
			counter++;
 800072a:	4b7f      	ldr	r3, [pc, #508]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	3301      	adds	r3, #1
 8000730:	4a7d      	ldr	r2, [pc, #500]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 8000732:	6013      	str	r3, [r2, #0]
			if (counter > 9)
 8000734:	4b7c      	ldr	r3, [pc, #496]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b09      	cmp	r3, #9
 800073a:	dd02      	ble.n	8000742 <fsm_simple_buttons_run+0xba>
				counter = 0;
 800073c:	4b7a      	ldr	r3, [pc, #488]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
			display7SEG(counter);
 8000742:	4b79      	ldr	r3, [pc, #484]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fdec 	bl	8000324 <display7SEG>
		break;
 800074c:	e19b      	b.n	8000a86 <fsm_simple_buttons_run+0x3fe>
		} else if (isButtonPressed(2) == 1) {
 800074e:	2002      	movs	r0, #2
 8000750:	f7ff fcfc 	bl	800014c <isButtonPressed>
 8000754:	4603      	mov	r3, r0
 8000756:	2b01      	cmp	r3, #1
 8000758:	d118      	bne.n	800078c <fsm_simple_buttons_run+0x104>
			status = DEC;
 800075a:	4b72      	ldr	r3, [pc, #456]	; (8000924 <fsm_simple_buttons_run+0x29c>)
 800075c:	2204      	movs	r2, #4
 800075e:	601a      	str	r2, [r3, #0]
			setTimer2(10000);
 8000760:	f242 7010 	movw	r0, #10000	; 0x2710
 8000764:	f000 fad6 	bl	8000d14 <setTimer2>
			counter--;
 8000768:	4b6f      	ldr	r3, [pc, #444]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	3b01      	subs	r3, #1
 800076e:	4a6e      	ldr	r2, [pc, #440]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 8000770:	6013      	str	r3, [r2, #0]
			if (counter < 0)
 8000772:	4b6d      	ldr	r3, [pc, #436]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	da02      	bge.n	8000780 <fsm_simple_buttons_run+0xf8>
				counter = 9;
 800077a:	4b6b      	ldr	r3, [pc, #428]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 800077c:	2209      	movs	r2, #9
 800077e:	601a      	str	r2, [r3, #0]
			display7SEG(counter);
 8000780:	4b69      	ldr	r3, [pc, #420]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fdcd 	bl	8000324 <display7SEG>
		break;
 800078a:	e17c      	b.n	8000a86 <fsm_simple_buttons_run+0x3fe>
		} else if (timer2_flag == 1) {
 800078c:	4b67      	ldr	r3, [pc, #412]	; (800092c <fsm_simple_buttons_run+0x2a4>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b01      	cmp	r3, #1
 8000792:	f040 8178 	bne.w	8000a86 <fsm_simple_buttons_run+0x3fe>
			status = AUTO;
 8000796:	4b63      	ldr	r3, [pc, #396]	; (8000924 <fsm_simple_buttons_run+0x29c>)
 8000798:	2205      	movs	r2, #5
 800079a:	601a      	str	r2, [r3, #0]
			setTimer3(1000);
 800079c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a0:	f000 fad4 	bl	8000d4c <setTimer3>
			display7SEG(counter);
 80007a4:	4b60      	ldr	r3, [pc, #384]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fdbb 	bl	8000324 <display7SEG>
			counter--;
 80007ae:	4b5e      	ldr	r3, [pc, #376]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	4a5c      	ldr	r2, [pc, #368]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 80007b6:	6013      	str	r3, [r2, #0]
			if (counter < 0)
 80007b8:	4b5b      	ldr	r3, [pc, #364]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	f280 8162 	bge.w	8000a86 <fsm_simple_buttons_run+0x3fe>
				counter = 0;
 80007c2:	4b59      	ldr	r3, [pc, #356]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
		break;
 80007c8:	e15d      	b.n	8000a86 <fsm_simple_buttons_run+0x3fe>

	case INC:
		if (isButtonPressed(0) == 1) {
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff fcbe 	bl	800014c <isButtonPressed>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d10f      	bne.n	80007f6 <fsm_simple_buttons_run+0x16e>
			//RESET button is pressed
			status = RST;
 80007d6:	4b53      	ldr	r3, [pc, #332]	; (8000924 <fsm_simple_buttons_run+0x29c>)
 80007d8:	2202      	movs	r2, #2
 80007da:	601a      	str	r2, [r3, #0]
			setTimer2(10000);
 80007dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80007e0:	f000 fa98 	bl	8000d14 <setTimer2>
			counter = 0;
 80007e4:	4b50      	ldr	r3, [pc, #320]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
			display7SEG(counter);
 80007ea:	4b4f      	ldr	r3, [pc, #316]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fd98 	bl	8000324 <display7SEG>
			display7SEG(counter);
			counter--;
			if (counter < 0)
				counter = 0;
		}
		break;
 80007f4:	e149      	b.n	8000a8a <fsm_simple_buttons_run+0x402>
		} else if (isButtonPressed(1) == 1) {
 80007f6:	2001      	movs	r0, #1
 80007f8:	f7ff fca8 	bl	800014c <isButtonPressed>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d118      	bne.n	8000834 <fsm_simple_buttons_run+0x1ac>
			status = INC;
 8000802:	4b48      	ldr	r3, [pc, #288]	; (8000924 <fsm_simple_buttons_run+0x29c>)
 8000804:	2203      	movs	r2, #3
 8000806:	601a      	str	r2, [r3, #0]
			setTimer2(10000);
 8000808:	f242 7010 	movw	r0, #10000	; 0x2710
 800080c:	f000 fa82 	bl	8000d14 <setTimer2>
			counter++;
 8000810:	4b45      	ldr	r3, [pc, #276]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	3301      	adds	r3, #1
 8000816:	4a44      	ldr	r2, [pc, #272]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 8000818:	6013      	str	r3, [r2, #0]
			if (counter > 9)
 800081a:	4b43      	ldr	r3, [pc, #268]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b09      	cmp	r3, #9
 8000820:	dd02      	ble.n	8000828 <fsm_simple_buttons_run+0x1a0>
				counter = 0;
 8000822:	4b41      	ldr	r3, [pc, #260]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
			display7SEG(counter);
 8000828:	4b3f      	ldr	r3, [pc, #252]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fd79 	bl	8000324 <display7SEG>
		break;
 8000832:	e12a      	b.n	8000a8a <fsm_simple_buttons_run+0x402>
		} else if (isButtonPressed(2) == 1) {
 8000834:	2002      	movs	r0, #2
 8000836:	f7ff fc89 	bl	800014c <isButtonPressed>
 800083a:	4603      	mov	r3, r0
 800083c:	2b01      	cmp	r3, #1
 800083e:	d118      	bne.n	8000872 <fsm_simple_buttons_run+0x1ea>
			status = DEC;
 8000840:	4b38      	ldr	r3, [pc, #224]	; (8000924 <fsm_simple_buttons_run+0x29c>)
 8000842:	2204      	movs	r2, #4
 8000844:	601a      	str	r2, [r3, #0]
			setTimer2(10000);
 8000846:	f242 7010 	movw	r0, #10000	; 0x2710
 800084a:	f000 fa63 	bl	8000d14 <setTimer2>
			counter--;
 800084e:	4b36      	ldr	r3, [pc, #216]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	3b01      	subs	r3, #1
 8000854:	4a34      	ldr	r2, [pc, #208]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 8000856:	6013      	str	r3, [r2, #0]
			if (counter < 0)
 8000858:	4b33      	ldr	r3, [pc, #204]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	da02      	bge.n	8000866 <fsm_simple_buttons_run+0x1de>
				counter = 9;
 8000860:	4b31      	ldr	r3, [pc, #196]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 8000862:	2209      	movs	r2, #9
 8000864:	601a      	str	r2, [r3, #0]
			display7SEG(counter);
 8000866:	4b30      	ldr	r3, [pc, #192]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fd5a 	bl	8000324 <display7SEG>
		break;
 8000870:	e10b      	b.n	8000a8a <fsm_simple_buttons_run+0x402>
		} else if (timer2_flag == 1) {
 8000872:	4b2e      	ldr	r3, [pc, #184]	; (800092c <fsm_simple_buttons_run+0x2a4>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2b01      	cmp	r3, #1
 8000878:	f040 8107 	bne.w	8000a8a <fsm_simple_buttons_run+0x402>
			status = AUTO;
 800087c:	4b29      	ldr	r3, [pc, #164]	; (8000924 <fsm_simple_buttons_run+0x29c>)
 800087e:	2205      	movs	r2, #5
 8000880:	601a      	str	r2, [r3, #0]
			setTimer3(1000);
 8000882:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000886:	f000 fa61 	bl	8000d4c <setTimer3>
			display7SEG(counter);
 800088a:	4b27      	ldr	r3, [pc, #156]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fd48 	bl	8000324 <display7SEG>
			counter--;
 8000894:	4b24      	ldr	r3, [pc, #144]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3b01      	subs	r3, #1
 800089a:	4a23      	ldr	r2, [pc, #140]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 800089c:	6013      	str	r3, [r2, #0]
			if (counter < 0)
 800089e:	4b22      	ldr	r3, [pc, #136]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	f280 80f1 	bge.w	8000a8a <fsm_simple_buttons_run+0x402>
				counter = 0;
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
		break;
 80008ae:	e0ec      	b.n	8000a8a <fsm_simple_buttons_run+0x402>

	case DEC:
		if (isButtonPressed(0) == 1) {
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff fc4b 	bl	800014c <isButtonPressed>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d10f      	bne.n	80008dc <fsm_simple_buttons_run+0x254>
			//RESET button is pressed
			status = RST;
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <fsm_simple_buttons_run+0x29c>)
 80008be:	2202      	movs	r2, #2
 80008c0:	601a      	str	r2, [r3, #0]
			setTimer2(10000);
 80008c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80008c6:	f000 fa25 	bl	8000d14 <setTimer2>
			counter = 0;
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
			display7SEG(counter);
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fd25 	bl	8000324 <display7SEG>
			display7SEG(counter);
			counter--;
			if (counter < 0)
				counter = 0;
		}
		break;
 80008da:	e0d8      	b.n	8000a8e <fsm_simple_buttons_run+0x406>
		} else if (isButtonPressed(1) == 1) {
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff fc35 	bl	800014c <isButtonPressed>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d123      	bne.n	8000930 <fsm_simple_buttons_run+0x2a8>
			status = INC;
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <fsm_simple_buttons_run+0x29c>)
 80008ea:	2203      	movs	r2, #3
 80008ec:	601a      	str	r2, [r3, #0]
			setTimer2(10000);
 80008ee:	f242 7010 	movw	r0, #10000	; 0x2710
 80008f2:	f000 fa0f 	bl	8000d14 <setTimer2>
			counter++;
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	3301      	adds	r3, #1
 80008fc:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 80008fe:	6013      	str	r3, [r2, #0]
			if (counter > 9)
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b09      	cmp	r3, #9
 8000906:	dd02      	ble.n	800090e <fsm_simple_buttons_run+0x286>
				counter = 0;
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
			display7SEG(counter);
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <fsm_simple_buttons_run+0x2a0>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fd06 	bl	8000324 <display7SEG>
		break;
 8000918:	e0b9      	b.n	8000a8e <fsm_simple_buttons_run+0x406>
 800091a:	bf00      	nop
 800091c:	200000c0 	.word	0x200000c0
 8000920:	40010800 	.word	0x40010800
 8000924:	20000000 	.word	0x20000000
 8000928:	20000004 	.word	0x20000004
 800092c:	200000c8 	.word	0x200000c8
		} else if (isButtonPressed(2) == 1) {
 8000930:	2002      	movs	r0, #2
 8000932:	f7ff fc0b 	bl	800014c <isButtonPressed>
 8000936:	4603      	mov	r3, r0
 8000938:	2b01      	cmp	r3, #1
 800093a:	d118      	bne.n	800096e <fsm_simple_buttons_run+0x2e6>
			status = DEC;
 800093c:	4b55      	ldr	r3, [pc, #340]	; (8000a94 <fsm_simple_buttons_run+0x40c>)
 800093e:	2204      	movs	r2, #4
 8000940:	601a      	str	r2, [r3, #0]
			setTimer2(10000);
 8000942:	f242 7010 	movw	r0, #10000	; 0x2710
 8000946:	f000 f9e5 	bl	8000d14 <setTimer2>
			counter--;
 800094a:	4b53      	ldr	r3, [pc, #332]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	3b01      	subs	r3, #1
 8000950:	4a51      	ldr	r2, [pc, #324]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 8000952:	6013      	str	r3, [r2, #0]
			if (counter < 0)
 8000954:	4b50      	ldr	r3, [pc, #320]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	da02      	bge.n	8000962 <fsm_simple_buttons_run+0x2da>
				counter = 9;
 800095c:	4b4e      	ldr	r3, [pc, #312]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 800095e:	2209      	movs	r2, #9
 8000960:	601a      	str	r2, [r3, #0]
			display7SEG(counter);
 8000962:	4b4d      	ldr	r3, [pc, #308]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fcdc 	bl	8000324 <display7SEG>
		break;
 800096c:	e08f      	b.n	8000a8e <fsm_simple_buttons_run+0x406>
		} else if (timer2_flag == 1) {
 800096e:	4b4b      	ldr	r3, [pc, #300]	; (8000a9c <fsm_simple_buttons_run+0x414>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b01      	cmp	r3, #1
 8000974:	f040 808b 	bne.w	8000a8e <fsm_simple_buttons_run+0x406>
			status = AUTO;
 8000978:	4b46      	ldr	r3, [pc, #280]	; (8000a94 <fsm_simple_buttons_run+0x40c>)
 800097a:	2205      	movs	r2, #5
 800097c:	601a      	str	r2, [r3, #0]
			setTimer3(1000);
 800097e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000982:	f000 f9e3 	bl	8000d4c <setTimer3>
			display7SEG(counter);
 8000986:	4b44      	ldr	r3, [pc, #272]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fcca 	bl	8000324 <display7SEG>
			counter--;
 8000990:	4b41      	ldr	r3, [pc, #260]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	3b01      	subs	r3, #1
 8000996:	4a40      	ldr	r2, [pc, #256]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 8000998:	6013      	str	r3, [r2, #0]
			if (counter < 0)
 800099a:	4b3f      	ldr	r3, [pc, #252]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	da75      	bge.n	8000a8e <fsm_simple_buttons_run+0x406>
				counter = 0;
 80009a2:	4b3d      	ldr	r3, [pc, #244]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
		break;
 80009a8:	e071      	b.n	8000a8e <fsm_simple_buttons_run+0x406>

	case AUTO:
		if (timer3_flag == 1) {
 80009aa:	4b3d      	ldr	r3, [pc, #244]	; (8000aa0 <fsm_simple_buttons_run+0x418>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d114      	bne.n	80009dc <fsm_simple_buttons_run+0x354>
			setTimer3(1000);
 80009b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b6:	f000 f9c9 	bl	8000d4c <setTimer3>
			display7SEG(counter);
 80009ba:	4b37      	ldr	r3, [pc, #220]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fcb0 	bl	8000324 <display7SEG>
			counter--;
 80009c4:	4b34      	ldr	r3, [pc, #208]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	3b01      	subs	r3, #1
 80009ca:	4a33      	ldr	r2, [pc, #204]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 80009cc:	6013      	str	r3, [r2, #0]
			if (counter < 0)
 80009ce:	4b32      	ldr	r3, [pc, #200]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	da02      	bge.n	80009dc <fsm_simple_buttons_run+0x354>
				counter = 0;
 80009d6:	4b30      	ldr	r3, [pc, #192]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
		}

		if (isButtonPressed(0) == 1) {
 80009dc:	2000      	movs	r0, #0
 80009de:	f7ff fbb5 	bl	800014c <isButtonPressed>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d10f      	bne.n	8000a08 <fsm_simple_buttons_run+0x380>
			//RESET button is pressed
			status = RST;
 80009e8:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <fsm_simple_buttons_run+0x40c>)
 80009ea:	2202      	movs	r2, #2
 80009ec:	601a      	str	r2, [r3, #0]
			setTimer2(10000);
 80009ee:	f242 7010 	movw	r0, #10000	; 0x2710
 80009f2:	f000 f98f 	bl	8000d14 <setTimer2>
			counter = 0;
 80009f6:	4b28      	ldr	r3, [pc, #160]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
			display7SEG(counter);
 80009fc:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fc8f 	bl	8000324 <display7SEG>
				counter = 9;
			display7SEG(counter);
		}

	default:
		break;
 8000a06:	e03c      	b.n	8000a82 <fsm_simple_buttons_run+0x3fa>
		} else if (isButtonPressed(1) == 1) {
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f7ff fb9f 	bl	800014c <isButtonPressed>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d118      	bne.n	8000a46 <fsm_simple_buttons_run+0x3be>
			status = INC;
 8000a14:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <fsm_simple_buttons_run+0x40c>)
 8000a16:	2203      	movs	r2, #3
 8000a18:	601a      	str	r2, [r3, #0]
			setTimer2(10000);
 8000a1a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a1e:	f000 f979 	bl	8000d14 <setTimer2>
			counter++;
 8000a22:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	3301      	adds	r3, #1
 8000a28:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 8000a2a:	6013      	str	r3, [r2, #0]
			if (counter > 9)
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b09      	cmp	r3, #9
 8000a32:	dd02      	ble.n	8000a3a <fsm_simple_buttons_run+0x3b2>
				counter = 0;
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
			display7SEG(counter);
 8000a3a:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fc70 	bl	8000324 <display7SEG>
		break;
 8000a44:	e01d      	b.n	8000a82 <fsm_simple_buttons_run+0x3fa>
		} else if (isButtonPressed(2) == 1) {
 8000a46:	2002      	movs	r0, #2
 8000a48:	f7ff fb80 	bl	800014c <isButtonPressed>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d117      	bne.n	8000a82 <fsm_simple_buttons_run+0x3fa>
			status = DEC;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <fsm_simple_buttons_run+0x40c>)
 8000a54:	2204      	movs	r2, #4
 8000a56:	601a      	str	r2, [r3, #0]
			setTimer2(10000);
 8000a58:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a5c:	f000 f95a 	bl	8000d14 <setTimer2>
			counter--;
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	3b01      	subs	r3, #1
 8000a66:	4a0c      	ldr	r2, [pc, #48]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 8000a68:	6013      	str	r3, [r2, #0]
			if (counter < 0)
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	da02      	bge.n	8000a78 <fsm_simple_buttons_run+0x3f0>
				counter = 9;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 8000a74:	2209      	movs	r2, #9
 8000a76:	601a      	str	r2, [r3, #0]
			display7SEG(counter);
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <fsm_simple_buttons_run+0x410>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fc51 	bl	8000324 <display7SEG>
		break;
 8000a82:	bf00      	nop
 8000a84:	e004      	b.n	8000a90 <fsm_simple_buttons_run+0x408>
		break;
 8000a86:	bf00      	nop
 8000a88:	e002      	b.n	8000a90 <fsm_simple_buttons_run+0x408>
		break;
 8000a8a:	bf00      	nop
 8000a8c:	e000      	b.n	8000a90 <fsm_simple_buttons_run+0x408>
		break;
 8000a8e:	bf00      	nop
	}
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000004 	.word	0x20000004
 8000a9c:	200000c8 	.word	0x200000c8
 8000aa0:	200000d0 	.word	0x200000d0

08000aa4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000aa8:	f000 fa58 	bl	8000f5c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000aac:	f000 f81e 	bl	8000aec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ab0:	f000 f8a4 	bl	8000bfc <MX_GPIO_Init>
	MX_TIM2_Init();
 8000ab4:	f000 f856 	bl	8000b64 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000ab8:	4809      	ldr	r0, [pc, #36]	; (8000ae0 <main+0x3c>)
 8000aba:	f001 f9bb 	bl	8001e34 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	status = INIT;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <main+0x40>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	601a      	str	r2, [r3, #0]
	setTimer1(500);
 8000ac4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ac8:	f000 f908 	bl	8000cdc <setTimer1>
	setTimer2(10000);
 8000acc:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ad0:	f000 f920 	bl	8000d14 <setTimer2>
	counter = 9;
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <main+0x44>)
 8000ad6:	2209      	movs	r2, #9
 8000ad8:	601a      	str	r2, [r3, #0]

	while (1) {
		fsm_simple_buttons_run();
 8000ada:	f7ff fdd5 	bl	8000688 <fsm_simple_buttons_run>
 8000ade:	e7fc      	b.n	8000ada <main+0x36>
 8000ae0:	20000078 	.word	0x20000078
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000004 	.word	0x20000004

08000aec <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b090      	sub	sp, #64	; 0x40
 8000af0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000af2:	f107 0318 	add.w	r3, r7, #24
 8000af6:	2228      	movs	r2, #40	; 0x28
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 fd52 	bl	80025a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b12:	2301      	movs	r3, #1
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b16:	2310      	movs	r3, #16
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b1e:	f107 0318 	add.w	r3, r7, #24
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 fd4e 	bl	80015c4 <HAL_RCC_OscConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0x46>
		Error_Handler();
 8000b2e:	f000 f8cf 	bl	8000cd0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b32:	230f      	movs	r3, #15
 8000b34:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 ffbc 	bl	8001ac8 <HAL_RCC_ClockConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0x6e>
		Error_Handler();
 8000b56:	f000 f8bb 	bl	8000cd0 <Error_Handler>
	}
}
 8000b5a:	bf00      	nop
 8000b5c:	3740      	adds	r7, #64	; 0x40
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b78:	463b      	mov	r3, r7
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000b82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b86:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7999;
 8000b88:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000b8a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b8e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b90:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9;
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000b98:	2209      	movs	r2, #9
 8000b9a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000ba8:	4813      	ldr	r0, [pc, #76]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000baa:	f001 f8f3 	bl	8001d94 <HAL_TIM_Base_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM2_Init+0x54>
		Error_Handler();
 8000bb4:	f000 f88c 	bl	8000cd0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bbc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000bc6:	f001 fa89 	bl	80020dc <HAL_TIM_ConfigClockSource>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM2_Init+0x70>
		Error_Handler();
 8000bd0:	f000 f87e 	bl	8000cd0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000bdc:	463b      	mov	r3, r7
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000be2:	f001 fc51 	bl	8002488 <HAL_TIMEx_MasterConfigSynchronization>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000bec:	f000 f870 	bl	8000cd0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000078 	.word	0x20000078

08000bfc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b26      	ldr	r3, [pc, #152]	; (8000cac <MX_GPIO_Init+0xb0>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a25      	ldr	r2, [pc, #148]	; (8000cac <MX_GPIO_Init+0xb0>)
 8000c16:	f043 0304 	orr.w	r3, r3, #4
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b23      	ldr	r3, [pc, #140]	; (8000cac <MX_GPIO_Init+0xb0>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c28:	4b20      	ldr	r3, [pc, #128]	; (8000cac <MX_GPIO_Init+0xb0>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4a1f      	ldr	r2, [pc, #124]	; (8000cac <MX_GPIO_Init+0xb0>)
 8000c2e:	f043 0308 	orr.w	r3, r3, #8
 8000c32:	6193      	str	r3, [r2, #24]
 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <MX_GPIO_Init+0xb0>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f003 0308 	and.w	r3, r3, #8
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2120      	movs	r1, #32
 8000c44:	481a      	ldr	r0, [pc, #104]	; (8000cb0 <MX_GPIO_Init+0xb4>)
 8000c46:	f000 fc8c 	bl	8001562 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	217f      	movs	r1, #127	; 0x7f
 8000c4e:	4819      	ldr	r0, [pc, #100]	; (8000cb4 <MX_GPIO_Init+0xb8>)
 8000c50:	f000 fc87 	bl	8001562 <HAL_GPIO_WritePin>
			LED7_0_Pin | LED7_1_Pin | LED7_2_Pin | LED7_3_Pin | LED7_4_Pin
					| LED7_5_Pin | LED7_6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : RESET_Pin INC_Pin DEC_Pin */
	GPIO_InitStruct.Pin = RESET_Pin | INC_Pin | DEC_Pin;
 8000c54:	230e      	movs	r3, #14
 8000c56:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	4619      	mov	r1, r3
 8000c66:	4812      	ldr	r0, [pc, #72]	; (8000cb0 <MX_GPIO_Init+0xb4>)
 8000c68:	f000 fae8 	bl	800123c <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_RED_Pin */
	GPIO_InitStruct.Pin = LED_RED_Pin;
 8000c6c:	2320      	movs	r3, #32
 8000c6e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 0308 	add.w	r3, r7, #8
 8000c80:	4619      	mov	r1, r3
 8000c82:	480b      	ldr	r0, [pc, #44]	; (8000cb0 <MX_GPIO_Init+0xb4>)
 8000c84:	f000 fada 	bl	800123c <HAL_GPIO_Init>

	/*Configure GPIO pins : LED7_0_Pin LED7_1_Pin LED7_2_Pin LED7_3_Pin
	 LED7_4_Pin LED7_5_Pin LED7_6_Pin */
	GPIO_InitStruct.Pin = LED7_0_Pin | LED7_1_Pin | LED7_2_Pin | LED7_3_Pin
 8000c88:	237f      	movs	r3, #127	; 0x7f
 8000c8a:	60bb      	str	r3, [r7, #8]
			| LED7_4_Pin | LED7_5_Pin | LED7_6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2302      	movs	r3, #2
 8000c96:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_GPIO_Init+0xb8>)
 8000ca0:	f000 facc 	bl	800123c <HAL_GPIO_Init>

}
 8000ca4:	bf00      	nop
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40010800 	.word	0x40010800
 8000cb4:	40010c00 	.word	0x40010c00

08000cb8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	timerRun();
 8000cc0:	f000 f860 	bl	8000d84 <timerRun>
	getKeyInput();
 8000cc4:	f7ff fa82 	bl	80001cc <getKeyInput>

}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd4:	b672      	cpsid	i
}
 8000cd6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000cd8:	e7fe      	b.n	8000cd8 <Error_Handler+0x8>
	...

08000cdc <setTimer1>:
int timer2_flag = 0;
int timer2_counter = 0;
int timer3_flag = 0;
int timer3_counter = 0;

void setTimer1(int duration) {
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TICK;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <setTimer1+0x2c>)
 8000ce8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cec:	1092      	asrs	r2, r2, #2
 8000cee:	17db      	asrs	r3, r3, #31
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	4a06      	ldr	r2, [pc, #24]	; (8000d0c <setTimer1+0x30>)
 8000cf4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <setTimer1+0x34>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	66666667 	.word	0x66666667
 8000d0c:	200000c4 	.word	0x200000c4
 8000d10:	200000c0 	.word	0x200000c0

08000d14 <setTimer2>:

void setTimer2(int duration) {
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TICK;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a08      	ldr	r2, [pc, #32]	; (8000d40 <setTimer2+0x2c>)
 8000d20:	fb82 1203 	smull	r1, r2, r2, r3
 8000d24:	1092      	asrs	r2, r2, #2
 8000d26:	17db      	asrs	r3, r3, #31
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <setTimer2+0x30>)
 8000d2c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <setTimer2+0x34>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	66666667 	.word	0x66666667
 8000d44:	200000cc 	.word	0x200000cc
 8000d48:	200000c8 	.word	0x200000c8

08000d4c <setTimer3>:

void setTimer3(int duration) {
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TICK;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a08      	ldr	r2, [pc, #32]	; (8000d78 <setTimer3+0x2c>)
 8000d58:	fb82 1203 	smull	r1, r2, r2, r3
 8000d5c:	1092      	asrs	r2, r2, #2
 8000d5e:	17db      	asrs	r3, r3, #31
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <setTimer3+0x30>)
 8000d64:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <setTimer3+0x34>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	66666667 	.word	0x66666667
 8000d7c:	200000d4 	.word	0x200000d4
 8000d80:	200000d0 	.word	0x200000d0

08000d84 <timerRun>:

void timerRun() {
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000d88:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <timerRun+0x78>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	dd04      	ble.n	8000d9a <timerRun+0x16>
		timer1_counter--;
 8000d90:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <timerRun+0x78>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	3b01      	subs	r3, #1
 8000d96:	4a19      	ldr	r2, [pc, #100]	; (8000dfc <timerRun+0x78>)
 8000d98:	6013      	str	r3, [r2, #0]
	}
	if (timer1_counter <= 0) {
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <timerRun+0x78>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	dc04      	bgt.n	8000dac <timerRun+0x28>
		timer1_flag++;
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <timerRun+0x7c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	4a15      	ldr	r2, [pc, #84]	; (8000e00 <timerRun+0x7c>)
 8000daa:	6013      	str	r3, [r2, #0]
	}
	if (timer2_counter > 0) {
 8000dac:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <timerRun+0x80>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	dd04      	ble.n	8000dbe <timerRun+0x3a>
		timer2_counter--;
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <timerRun+0x80>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <timerRun+0x80>)
 8000dbc:	6013      	str	r3, [r2, #0]
	}
	if (timer2_counter <= 0) {
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <timerRun+0x80>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	dc04      	bgt.n	8000dd0 <timerRun+0x4c>
		timer2_flag++;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <timerRun+0x84>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <timerRun+0x84>)
 8000dce:	6013      	str	r3, [r2, #0]
	}
	if (timer3_counter > 0) {
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <timerRun+0x88>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	dd04      	ble.n	8000de2 <timerRun+0x5e>
		timer3_counter--;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <timerRun+0x88>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <timerRun+0x88>)
 8000de0:	6013      	str	r3, [r2, #0]
	}
	if (timer3_counter <= 0) {
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <timerRun+0x88>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	dc04      	bgt.n	8000df4 <timerRun+0x70>
		timer3_flag++;
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <timerRun+0x8c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	3301      	adds	r3, #1
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <timerRun+0x8c>)
 8000df2:	6013      	str	r3, [r2, #0]
	}
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	200000c4 	.word	0x200000c4
 8000e00:	200000c0 	.word	0x200000c0
 8000e04:	200000cc 	.word	0x200000cc
 8000e08:	200000c8 	.word	0x200000c8
 8000e0c:	200000d4 	.word	0x200000d4
 8000e10:	200000d0 	.word	0x200000d0

08000e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_MspInit+0x40>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <HAL_MspInit+0x40>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6193      	str	r3, [r2, #24]
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_MspInit+0x40>)
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_MspInit+0x40>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_MspInit+0x40>)
 8000e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	61d3      	str	r3, [r2, #28]
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_MspInit+0x40>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	40021000 	.word	0x40021000

08000e58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e68:	d113      	bne.n	8000e92 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_TIM_Base_MspInit+0x44>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <HAL_TIM_Base_MspInit+0x44>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	61d3      	str	r3, [r2, #28]
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_TIM_Base_MspInit+0x44>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	201c      	movs	r0, #28
 8000e88:	f000 f9a1 	bl	80011ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e8c:	201c      	movs	r0, #28
 8000e8e:	f000 f9ba 	bl	8001206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <HardFault_Handler+0x4>

08000eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <MemManage_Handler+0x4>

08000eb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ebe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr

08000eca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr

08000ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr

08000ee2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee6:	f000 f87f 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <TIM2_IRQHandler+0x10>)
 8000ef6:	f000 ffe9 	bl	8001ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000078 	.word	0x20000078

08000f04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f12:	490d      	ldr	r1, [pc, #52]	; (8000f48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f18:	e002      	b.n	8000f20 <LoopCopyDataInit>

08000f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1e:	3304      	adds	r3, #4

08000f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f24:	d3f9      	bcc.n	8000f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f26:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f28:	4c0a      	ldr	r4, [pc, #40]	; (8000f54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f2c:	e001      	b.n	8000f32 <LoopFillZerobss>

08000f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f30:	3204      	adds	r2, #4

08000f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f34:	d3fb      	bcc.n	8000f2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f36:	f7ff ffe5 	bl	8000f04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3a:	f001 fb0f 	bl	800255c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f3e:	f7ff fdb1 	bl	8000aa4 <main>
  bx lr
 8000f42:	4770      	bx	lr
  ldr r0, =_sdata
 8000f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f48:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000f4c:	080025f4 	.word	0x080025f4
  ldr r2, =_sbss
 8000f50:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000f54:	200000dc 	.word	0x200000dc

08000f58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f58:	e7fe      	b.n	8000f58 <ADC1_2_IRQHandler>
	...

08000f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_Init+0x28>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <HAL_Init+0x28>)
 8000f66:	f043 0310 	orr.w	r3, r3, #16
 8000f6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 f923 	bl	80011b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f72:	200f      	movs	r0, #15
 8000f74:	f000 f808 	bl	8000f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f78:	f7ff ff4c 	bl	8000e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40022000 	.word	0x40022000

08000f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_InitTick+0x54>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x58>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f93b 	bl	8001222 <HAL_SYSTICK_Config>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00e      	b.n	8000fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	d80a      	bhi.n	8000fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f000 f903 	bl	80011ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc8:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <HAL_InitTick+0x5c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e000      	b.n	8000fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000010 	.word	0x20000010
 8000fe4:	2000000c 	.word	0x2000000c

08000fe8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <HAL_IncTick+0x1c>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b05      	ldr	r3, [pc, #20]	; (8001008 <HAL_IncTick+0x20>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a03      	ldr	r2, [pc, #12]	; (8001008 <HAL_IncTick+0x20>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	20000010 	.word	0x20000010
 8001008:	200000d8 	.word	0x200000d8

0800100c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return uwTick;
 8001010:	4b02      	ldr	r3, [pc, #8]	; (800101c <HAL_GetTick+0x10>)
 8001012:	681b      	ldr	r3, [r3, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	200000d8 	.word	0x200000d8

08001020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800103c:	4013      	ands	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800104c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001052:	4a04      	ldr	r2, [pc, #16]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	60d3      	str	r3, [r2, #12]
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <__NVIC_GetPriorityGrouping+0x18>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	f003 0307 	and.w	r3, r3, #7
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	2b00      	cmp	r3, #0
 8001094:	db0b      	blt.n	80010ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	f003 021f 	and.w	r2, r3, #31
 800109c:	4906      	ldr	r1, [pc, #24]	; (80010b8 <__NVIC_EnableIRQ+0x34>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	095b      	lsrs	r3, r3, #5
 80010a4:	2001      	movs	r0, #1
 80010a6:	fa00 f202 	lsl.w	r2, r0, r2
 80010aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100

080010bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db0a      	blt.n	80010e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	490c      	ldr	r1, [pc, #48]	; (8001108 <__NVIC_SetPriority+0x4c>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	440b      	add	r3, r1
 80010e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e4:	e00a      	b.n	80010fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <__NVIC_SetPriority+0x50>)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	3b04      	subs	r3, #4
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	761a      	strb	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f1c3 0307 	rsb	r3, r3, #7
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf28      	it	cs
 800112e:	2304      	movcs	r3, #4
 8001130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3304      	adds	r3, #4
 8001136:	2b06      	cmp	r3, #6
 8001138:	d902      	bls.n	8001140 <NVIC_EncodePriority+0x30>
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3b03      	subs	r3, #3
 800113e:	e000      	b.n	8001142 <NVIC_EncodePriority+0x32>
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	f04f 32ff 	mov.w	r2, #4294967295
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	401a      	ands	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001158:	f04f 31ff 	mov.w	r1, #4294967295
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43d9      	mvns	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	4313      	orrs	r3, r2
         );
}
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001184:	d301      	bcc.n	800118a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001186:	2301      	movs	r3, #1
 8001188:	e00f      	b.n	80011aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118a:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <SysTick_Config+0x40>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001192:	210f      	movs	r1, #15
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f7ff ff90 	bl	80010bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <SysTick_Config+0x40>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <SysTick_Config+0x40>)
 80011a4:	2207      	movs	r2, #7
 80011a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	e000e010 	.word	0xe000e010

080011b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff2d 	bl	8001020 <__NVIC_SetPriorityGrouping>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e0:	f7ff ff42 	bl	8001068 <__NVIC_GetPriorityGrouping>
 80011e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	6978      	ldr	r0, [r7, #20]
 80011ec:	f7ff ff90 	bl	8001110 <NVIC_EncodePriority>
 80011f0:	4602      	mov	r2, r0
 80011f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff5f 	bl	80010bc <__NVIC_SetPriority>
}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff35 	bl	8001084 <__NVIC_EnableIRQ>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ffa2 	bl	8001174 <SysTick_Config>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800123c:	b480      	push	{r7}
 800123e:	b08b      	sub	sp, #44	; 0x2c
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124e:	e161      	b.n	8001514 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001250:	2201      	movs	r2, #1
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	69fa      	ldr	r2, [r7, #28]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	429a      	cmp	r2, r3
 800126a:	f040 8150 	bne.w	800150e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	4a97      	ldr	r2, [pc, #604]	; (80014d0 <HAL_GPIO_Init+0x294>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d05e      	beq.n	8001336 <HAL_GPIO_Init+0xfa>
 8001278:	4a95      	ldr	r2, [pc, #596]	; (80014d0 <HAL_GPIO_Init+0x294>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d875      	bhi.n	800136a <HAL_GPIO_Init+0x12e>
 800127e:	4a95      	ldr	r2, [pc, #596]	; (80014d4 <HAL_GPIO_Init+0x298>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d058      	beq.n	8001336 <HAL_GPIO_Init+0xfa>
 8001284:	4a93      	ldr	r2, [pc, #588]	; (80014d4 <HAL_GPIO_Init+0x298>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d86f      	bhi.n	800136a <HAL_GPIO_Init+0x12e>
 800128a:	4a93      	ldr	r2, [pc, #588]	; (80014d8 <HAL_GPIO_Init+0x29c>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d052      	beq.n	8001336 <HAL_GPIO_Init+0xfa>
 8001290:	4a91      	ldr	r2, [pc, #580]	; (80014d8 <HAL_GPIO_Init+0x29c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d869      	bhi.n	800136a <HAL_GPIO_Init+0x12e>
 8001296:	4a91      	ldr	r2, [pc, #580]	; (80014dc <HAL_GPIO_Init+0x2a0>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d04c      	beq.n	8001336 <HAL_GPIO_Init+0xfa>
 800129c:	4a8f      	ldr	r2, [pc, #572]	; (80014dc <HAL_GPIO_Init+0x2a0>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d863      	bhi.n	800136a <HAL_GPIO_Init+0x12e>
 80012a2:	4a8f      	ldr	r2, [pc, #572]	; (80014e0 <HAL_GPIO_Init+0x2a4>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d046      	beq.n	8001336 <HAL_GPIO_Init+0xfa>
 80012a8:	4a8d      	ldr	r2, [pc, #564]	; (80014e0 <HAL_GPIO_Init+0x2a4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d85d      	bhi.n	800136a <HAL_GPIO_Init+0x12e>
 80012ae:	2b12      	cmp	r3, #18
 80012b0:	d82a      	bhi.n	8001308 <HAL_GPIO_Init+0xcc>
 80012b2:	2b12      	cmp	r3, #18
 80012b4:	d859      	bhi.n	800136a <HAL_GPIO_Init+0x12e>
 80012b6:	a201      	add	r2, pc, #4	; (adr r2, 80012bc <HAL_GPIO_Init+0x80>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	08001337 	.word	0x08001337
 80012c0:	08001311 	.word	0x08001311
 80012c4:	08001323 	.word	0x08001323
 80012c8:	08001365 	.word	0x08001365
 80012cc:	0800136b 	.word	0x0800136b
 80012d0:	0800136b 	.word	0x0800136b
 80012d4:	0800136b 	.word	0x0800136b
 80012d8:	0800136b 	.word	0x0800136b
 80012dc:	0800136b 	.word	0x0800136b
 80012e0:	0800136b 	.word	0x0800136b
 80012e4:	0800136b 	.word	0x0800136b
 80012e8:	0800136b 	.word	0x0800136b
 80012ec:	0800136b 	.word	0x0800136b
 80012f0:	0800136b 	.word	0x0800136b
 80012f4:	0800136b 	.word	0x0800136b
 80012f8:	0800136b 	.word	0x0800136b
 80012fc:	0800136b 	.word	0x0800136b
 8001300:	08001319 	.word	0x08001319
 8001304:	0800132d 	.word	0x0800132d
 8001308:	4a76      	ldr	r2, [pc, #472]	; (80014e4 <HAL_GPIO_Init+0x2a8>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d013      	beq.n	8001336 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800130e:	e02c      	b.n	800136a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	623b      	str	r3, [r7, #32]
          break;
 8001316:	e029      	b.n	800136c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	3304      	adds	r3, #4
 800131e:	623b      	str	r3, [r7, #32]
          break;
 8001320:	e024      	b.n	800136c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	3308      	adds	r3, #8
 8001328:	623b      	str	r3, [r7, #32]
          break;
 800132a:	e01f      	b.n	800136c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	330c      	adds	r3, #12
 8001332:	623b      	str	r3, [r7, #32]
          break;
 8001334:	e01a      	b.n	800136c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d102      	bne.n	8001344 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800133e:	2304      	movs	r3, #4
 8001340:	623b      	str	r3, [r7, #32]
          break;
 8001342:	e013      	b.n	800136c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d105      	bne.n	8001358 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800134c:	2308      	movs	r3, #8
 800134e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	611a      	str	r2, [r3, #16]
          break;
 8001356:	e009      	b.n	800136c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001358:	2308      	movs	r3, #8
 800135a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69fa      	ldr	r2, [r7, #28]
 8001360:	615a      	str	r2, [r3, #20]
          break;
 8001362:	e003      	b.n	800136c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
          break;
 8001368:	e000      	b.n	800136c <HAL_GPIO_Init+0x130>
          break;
 800136a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	2bff      	cmp	r3, #255	; 0xff
 8001370:	d801      	bhi.n	8001376 <HAL_GPIO_Init+0x13a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	e001      	b.n	800137a <HAL_GPIO_Init+0x13e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3304      	adds	r3, #4
 800137a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	2bff      	cmp	r3, #255	; 0xff
 8001380:	d802      	bhi.n	8001388 <HAL_GPIO_Init+0x14c>
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	e002      	b.n	800138e <HAL_GPIO_Init+0x152>
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	3b08      	subs	r3, #8
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	210f      	movs	r1, #15
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	401a      	ands	r2, r3
 80013a0:	6a39      	ldr	r1, [r7, #32]
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	fa01 f303 	lsl.w	r3, r1, r3
 80013a8:	431a      	orrs	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 80a9 	beq.w	800150e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013bc:	4b4a      	ldr	r3, [pc, #296]	; (80014e8 <HAL_GPIO_Init+0x2ac>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a49      	ldr	r2, [pc, #292]	; (80014e8 <HAL_GPIO_Init+0x2ac>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b47      	ldr	r3, [pc, #284]	; (80014e8 <HAL_GPIO_Init+0x2ac>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013d4:	4a45      	ldr	r2, [pc, #276]	; (80014ec <HAL_GPIO_Init+0x2b0>)
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	3302      	adds	r3, #2
 80013dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	220f      	movs	r2, #15
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	4013      	ands	r3, r2
 80013f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a3d      	ldr	r2, [pc, #244]	; (80014f0 <HAL_GPIO_Init+0x2b4>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d00d      	beq.n	800141c <HAL_GPIO_Init+0x1e0>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a3c      	ldr	r2, [pc, #240]	; (80014f4 <HAL_GPIO_Init+0x2b8>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d007      	beq.n	8001418 <HAL_GPIO_Init+0x1dc>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a3b      	ldr	r2, [pc, #236]	; (80014f8 <HAL_GPIO_Init+0x2bc>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d101      	bne.n	8001414 <HAL_GPIO_Init+0x1d8>
 8001410:	2302      	movs	r3, #2
 8001412:	e004      	b.n	800141e <HAL_GPIO_Init+0x1e2>
 8001414:	2303      	movs	r3, #3
 8001416:	e002      	b.n	800141e <HAL_GPIO_Init+0x1e2>
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <HAL_GPIO_Init+0x1e2>
 800141c:	2300      	movs	r3, #0
 800141e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001420:	f002 0203 	and.w	r2, r2, #3
 8001424:	0092      	lsls	r2, r2, #2
 8001426:	4093      	lsls	r3, r2
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	4313      	orrs	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800142e:	492f      	ldr	r1, [pc, #188]	; (80014ec <HAL_GPIO_Init+0x2b0>)
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	3302      	adds	r3, #2
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d006      	beq.n	8001456 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001448:	4b2c      	ldr	r3, [pc, #176]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	492b      	ldr	r1, [pc, #172]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
 8001454:	e006      	b.n	8001464 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001456:	4b29      	ldr	r3, [pc, #164]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	43db      	mvns	r3, r3
 800145e:	4927      	ldr	r1, [pc, #156]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 8001460:	4013      	ands	r3, r2
 8001462:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d006      	beq.n	800147e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	4921      	ldr	r1, [pc, #132]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
 800147c:	e006      	b.n	800148c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800147e:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	43db      	mvns	r3, r3
 8001486:	491d      	ldr	r1, [pc, #116]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 8001488:	4013      	ands	r3, r2
 800148a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d006      	beq.n	80014a6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	4917      	ldr	r1, [pc, #92]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	608b      	str	r3, [r1, #8]
 80014a4:	e006      	b.n	80014b4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	4913      	ldr	r1, [pc, #76]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d01f      	beq.n	8001500 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	490d      	ldr	r1, [pc, #52]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	60cb      	str	r3, [r1, #12]
 80014cc:	e01f      	b.n	800150e <HAL_GPIO_Init+0x2d2>
 80014ce:	bf00      	nop
 80014d0:	10320000 	.word	0x10320000
 80014d4:	10310000 	.word	0x10310000
 80014d8:	10220000 	.word	0x10220000
 80014dc:	10210000 	.word	0x10210000
 80014e0:	10120000 	.word	0x10120000
 80014e4:	10110000 	.word	0x10110000
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40010000 	.word	0x40010000
 80014f0:	40010800 	.word	0x40010800
 80014f4:	40010c00 	.word	0x40010c00
 80014f8:	40011000 	.word	0x40011000
 80014fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_GPIO_Init+0x2f4>)
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	43db      	mvns	r3, r3
 8001508:	4909      	ldr	r1, [pc, #36]	; (8001530 <HAL_GPIO_Init+0x2f4>)
 800150a:	4013      	ands	r3, r2
 800150c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	3301      	adds	r3, #1
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	fa22 f303 	lsr.w	r3, r2, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	f47f ae96 	bne.w	8001250 <HAL_GPIO_Init+0x14>
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	372c      	adds	r7, #44	; 0x2c
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	40010400 	.word	0x40010400

08001534 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	887b      	ldrh	r3, [r7, #2]
 8001546:	4013      	ands	r3, r2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e001      	b.n	8001556 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr

08001562 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	460b      	mov	r3, r1
 800156c:	807b      	strh	r3, [r7, #2]
 800156e:	4613      	mov	r3, r2
 8001570:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001572:	787b      	ldrb	r3, [r7, #1]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001578:	887a      	ldrh	r2, [r7, #2]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800157e:	e003      	b.n	8001588 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001580:	887b      	ldrh	r3, [r7, #2]
 8001582:	041a      	lsls	r2, r3, #16
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	611a      	str	r2, [r3, #16]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr

08001592 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001592:	b480      	push	{r7}
 8001594:	b085      	sub	sp, #20
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	460b      	mov	r3, r1
 800159c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015a4:	887a      	ldrh	r2, [r7, #2]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4013      	ands	r3, r2
 80015aa:	041a      	lsls	r2, r3, #16
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	887b      	ldrh	r3, [r7, #2]
 80015b2:	400b      	ands	r3, r1
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	611a      	str	r2, [r3, #16]
}
 80015ba:	bf00      	nop
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e272      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 8087 	beq.w	80016f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015e4:	4b92      	ldr	r3, [pc, #584]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 030c 	and.w	r3, r3, #12
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d00c      	beq.n	800160a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015f0:	4b8f      	ldr	r3, [pc, #572]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 030c 	and.w	r3, r3, #12
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d112      	bne.n	8001622 <HAL_RCC_OscConfig+0x5e>
 80015fc:	4b8c      	ldr	r3, [pc, #560]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001608:	d10b      	bne.n	8001622 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160a:	4b89      	ldr	r3, [pc, #548]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d06c      	beq.n	80016f0 <HAL_RCC_OscConfig+0x12c>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d168      	bne.n	80016f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e24c      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800162a:	d106      	bne.n	800163a <HAL_RCC_OscConfig+0x76>
 800162c:	4b80      	ldr	r3, [pc, #512]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a7f      	ldr	r2, [pc, #508]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	e02e      	b.n	8001698 <HAL_RCC_OscConfig+0xd4>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0x98>
 8001642:	4b7b      	ldr	r3, [pc, #492]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a7a      	ldr	r2, [pc, #488]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b78      	ldr	r3, [pc, #480]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a77      	ldr	r2, [pc, #476]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001654:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e01d      	b.n	8001698 <HAL_RCC_OscConfig+0xd4>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001664:	d10c      	bne.n	8001680 <HAL_RCC_OscConfig+0xbc>
 8001666:	4b72      	ldr	r3, [pc, #456]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a71      	ldr	r2, [pc, #452]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 800166c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	4b6f      	ldr	r3, [pc, #444]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a6e      	ldr	r2, [pc, #440]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e00b      	b.n	8001698 <HAL_RCC_OscConfig+0xd4>
 8001680:	4b6b      	ldr	r3, [pc, #428]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a6a      	ldr	r2, [pc, #424]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	4b68      	ldr	r3, [pc, #416]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a67      	ldr	r2, [pc, #412]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001696:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d013      	beq.n	80016c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff fcb4 	bl	800100c <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a8:	f7ff fcb0 	bl	800100c <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b64      	cmp	r3, #100	; 0x64
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e200      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ba:	4b5d      	ldr	r3, [pc, #372]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0xe4>
 80016c6:	e014      	b.n	80016f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c8:	f7ff fca0 	bl	800100c <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d0:	f7ff fc9c 	bl	800100c <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b64      	cmp	r3, #100	; 0x64
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e1ec      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e2:	4b53      	ldr	r3, [pc, #332]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x10c>
 80016ee:	e000      	b.n	80016f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d063      	beq.n	80017c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016fe:	4b4c      	ldr	r3, [pc, #304]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 030c 	and.w	r3, r3, #12
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00b      	beq.n	8001722 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800170a:	4b49      	ldr	r3, [pc, #292]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	2b08      	cmp	r3, #8
 8001714:	d11c      	bne.n	8001750 <HAL_RCC_OscConfig+0x18c>
 8001716:	4b46      	ldr	r3, [pc, #280]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d116      	bne.n	8001750 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001722:	4b43      	ldr	r3, [pc, #268]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d005      	beq.n	800173a <HAL_RCC_OscConfig+0x176>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d001      	beq.n	800173a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e1c0      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173a:	4b3d      	ldr	r3, [pc, #244]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	4939      	ldr	r1, [pc, #228]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 800174a:	4313      	orrs	r3, r2
 800174c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174e:	e03a      	b.n	80017c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d020      	beq.n	800179a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001758:	4b36      	ldr	r3, [pc, #216]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175e:	f7ff fc55 	bl	800100c <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001766:	f7ff fc51 	bl	800100c <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e1a1      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001778:	4b2d      	ldr	r3, [pc, #180]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001784:	4b2a      	ldr	r3, [pc, #168]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	4927      	ldr	r1, [pc, #156]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001794:	4313      	orrs	r3, r2
 8001796:	600b      	str	r3, [r1, #0]
 8001798:	e015      	b.n	80017c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800179a:	4b26      	ldr	r3, [pc, #152]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a0:	f7ff fc34 	bl	800100c <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a8:	f7ff fc30 	bl	800100c <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e180      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ba:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d03a      	beq.n	8001848 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d019      	beq.n	800180e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017da:	4b17      	ldr	r3, [pc, #92]	; (8001838 <HAL_RCC_OscConfig+0x274>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e0:	f7ff fc14 	bl	800100c <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e8:	f7ff fc10 	bl	800100c <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e160      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001806:	2001      	movs	r0, #1
 8001808:	f000 faa6 	bl	8001d58 <RCC_Delay>
 800180c:	e01c      	b.n	8001848 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_RCC_OscConfig+0x274>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001814:	f7ff fbfa 	bl	800100c <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800181a:	e00f      	b.n	800183c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181c:	f7ff fbf6 	bl	800100c <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d908      	bls.n	800183c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e146      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000
 8001834:	42420000 	.word	0x42420000
 8001838:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183c:	4b92      	ldr	r3, [pc, #584]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1e9      	bne.n	800181c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 80a6 	beq.w	80019a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185a:	4b8b      	ldr	r3, [pc, #556]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10d      	bne.n	8001882 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	4b88      	ldr	r3, [pc, #544]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	4a87      	ldr	r2, [pc, #540]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 800186c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001870:	61d3      	str	r3, [r2, #28]
 8001872:	4b85      	ldr	r3, [pc, #532]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800187e:	2301      	movs	r3, #1
 8001880:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001882:	4b82      	ldr	r3, [pc, #520]	; (8001a8c <HAL_RCC_OscConfig+0x4c8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188a:	2b00      	cmp	r3, #0
 800188c:	d118      	bne.n	80018c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800188e:	4b7f      	ldr	r3, [pc, #508]	; (8001a8c <HAL_RCC_OscConfig+0x4c8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a7e      	ldr	r2, [pc, #504]	; (8001a8c <HAL_RCC_OscConfig+0x4c8>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189a:	f7ff fbb7 	bl	800100c <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a2:	f7ff fbb3 	bl	800100c <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b64      	cmp	r3, #100	; 0x64
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e103      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b4:	4b75      	ldr	r3, [pc, #468]	; (8001a8c <HAL_RCC_OscConfig+0x4c8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d106      	bne.n	80018d6 <HAL_RCC_OscConfig+0x312>
 80018c8:	4b6f      	ldr	r3, [pc, #444]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	4a6e      	ldr	r2, [pc, #440]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6213      	str	r3, [r2, #32]
 80018d4:	e02d      	b.n	8001932 <HAL_RCC_OscConfig+0x36e>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x334>
 80018de:	4b6a      	ldr	r3, [pc, #424]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	4a69      	ldr	r2, [pc, #420]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	6213      	str	r3, [r2, #32]
 80018ea:	4b67      	ldr	r3, [pc, #412]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4a66      	ldr	r2, [pc, #408]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	f023 0304 	bic.w	r3, r3, #4
 80018f4:	6213      	str	r3, [r2, #32]
 80018f6:	e01c      	b.n	8001932 <HAL_RCC_OscConfig+0x36e>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	2b05      	cmp	r3, #5
 80018fe:	d10c      	bne.n	800191a <HAL_RCC_OscConfig+0x356>
 8001900:	4b61      	ldr	r3, [pc, #388]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	4a60      	ldr	r2, [pc, #384]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001906:	f043 0304 	orr.w	r3, r3, #4
 800190a:	6213      	str	r3, [r2, #32]
 800190c:	4b5e      	ldr	r3, [pc, #376]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	4a5d      	ldr	r2, [pc, #372]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6213      	str	r3, [r2, #32]
 8001918:	e00b      	b.n	8001932 <HAL_RCC_OscConfig+0x36e>
 800191a:	4b5b      	ldr	r3, [pc, #364]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	4a5a      	ldr	r2, [pc, #360]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	6213      	str	r3, [r2, #32]
 8001926:	4b58      	ldr	r3, [pc, #352]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	4a57      	ldr	r2, [pc, #348]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 800192c:	f023 0304 	bic.w	r3, r3, #4
 8001930:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d015      	beq.n	8001966 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193a:	f7ff fb67 	bl	800100c <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001940:	e00a      	b.n	8001958 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001942:	f7ff fb63 	bl	800100c <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001950:	4293      	cmp	r3, r2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e0b1      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001958:	4b4b      	ldr	r3, [pc, #300]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0ee      	beq.n	8001942 <HAL_RCC_OscConfig+0x37e>
 8001964:	e014      	b.n	8001990 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001966:	f7ff fb51 	bl	800100c <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196c:	e00a      	b.n	8001984 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196e:	f7ff fb4d 	bl	800100c <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	f241 3288 	movw	r2, #5000	; 0x1388
 800197c:	4293      	cmp	r3, r2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e09b      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001984:	4b40      	ldr	r3, [pc, #256]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1ee      	bne.n	800196e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001990:	7dfb      	ldrb	r3, [r7, #23]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d105      	bne.n	80019a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001996:	4b3c      	ldr	r3, [pc, #240]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	4a3b      	ldr	r2, [pc, #236]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 8087 	beq.w	8001aba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ac:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d061      	beq.n	8001a7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d146      	bne.n	8001a4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c0:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <HAL_RCC_OscConfig+0x4cc>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c6:	f7ff fb21 	bl	800100c <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ce:	f7ff fb1d 	bl	800100c <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e06d      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e0:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1f0      	bne.n	80019ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f4:	d108      	bne.n	8001a08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019f6:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	4921      	ldr	r1, [pc, #132]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a08:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a19      	ldr	r1, [r3, #32]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	491b      	ldr	r1, [pc, #108]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_RCC_OscConfig+0x4cc>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a26:	f7ff faf1 	bl	800100c <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2e:	f7ff faed 	bl	800100c <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e03d      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0x46a>
 8001a4c:	e035      	b.n	8001aba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <HAL_RCC_OscConfig+0x4cc>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7ff fada 	bl	800100c <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5c:	f7ff fad6 	bl	800100c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e026      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x498>
 8001a7a:	e01e      	b.n	8001aba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d107      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e019      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40007000 	.word	0x40007000
 8001a90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_RCC_OscConfig+0x500>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0d0      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001adc:	4b6a      	ldr	r3, [pc, #424]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d910      	bls.n	8001b0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b67      	ldr	r3, [pc, #412]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 0207 	bic.w	r2, r3, #7
 8001af2:	4965      	ldr	r1, [pc, #404]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afa:	4b63      	ldr	r3, [pc, #396]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0b8      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d020      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b24:	4b59      	ldr	r3, [pc, #356]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	4a58      	ldr	r2, [pc, #352]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b3c:	4b53      	ldr	r3, [pc, #332]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	4a52      	ldr	r2, [pc, #328]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b48:	4b50      	ldr	r3, [pc, #320]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	494d      	ldr	r1, [pc, #308]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d040      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6e:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d115      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e07f      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b86:	4b41      	ldr	r3, [pc, #260]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d109      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e073      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b96:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e06b      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba6:	4b39      	ldr	r3, [pc, #228]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f023 0203 	bic.w	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4936      	ldr	r1, [pc, #216]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb8:	f7ff fa28 	bl	800100c <HAL_GetTick>
 8001bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc0:	f7ff fa24 	bl	800100c <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e053      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 020c 	and.w	r2, r3, #12
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d1eb      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be8:	4b27      	ldr	r3, [pc, #156]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d210      	bcs.n	8001c18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 0207 	bic.w	r2, r3, #7
 8001bfe:	4922      	ldr	r1, [pc, #136]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e032      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c24:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	4916      	ldr	r1, [pc, #88]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d009      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c42:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	490e      	ldr	r1, [pc, #56]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c56:	f000 f821 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	490a      	ldr	r1, [pc, #40]	; (8001c90 <HAL_RCC_ClockConfig+0x1c8>)
 8001c68:	5ccb      	ldrb	r3, [r1, r3]
 8001c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6e:	4a09      	ldr	r2, [pc, #36]	; (8001c94 <HAL_RCC_ClockConfig+0x1cc>)
 8001c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_RCC_ClockConfig+0x1d0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff f986 	bl	8000f88 <HAL_InitTick>

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40022000 	.word	0x40022000
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	080025dc 	.word	0x080025dc
 8001c94:	20000008 	.word	0x20000008
 8001c98:	2000000c 	.word	0x2000000c

08001c9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c9c:	b490      	push	{r4, r7}
 8001c9e:	b08a      	sub	sp, #40	; 0x28
 8001ca0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ca2:	4b29      	ldr	r3, [pc, #164]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xac>)
 8001ca4:	1d3c      	adds	r4, r7, #4
 8001ca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ca8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cac:	f240 2301 	movw	r3, #513	; 0x201
 8001cb0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cc6:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d002      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x40>
 8001cd6:	2b08      	cmp	r3, #8
 8001cd8:	d003      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x46>
 8001cda:	e02b      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cdc:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cde:	623b      	str	r3, [r7, #32]
      break;
 8001ce0:	e02b      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	0c9b      	lsrs	r3, r3, #18
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	3328      	adds	r3, #40	; 0x28
 8001cec:	443b      	add	r3, r7
 8001cee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cf2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d012      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cfe:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	0c5b      	lsrs	r3, r3, #17
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	3328      	adds	r3, #40	; 0x28
 8001d0a:	443b      	add	r3, r7
 8001d0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d10:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d16:	fb03 f202 	mul.w	r2, r3, r2
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
 8001d22:	e004      	b.n	8001d2e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	4a0b      	ldr	r2, [pc, #44]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d28:	fb02 f303 	mul.w	r3, r2, r3
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	623b      	str	r3, [r7, #32]
      break;
 8001d32:	e002      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d36:	623b      	str	r3, [r7, #32]
      break;
 8001d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3728      	adds	r7, #40	; 0x28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc90      	pop	{r4, r7}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	080025cc 	.word	0x080025cc
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	007a1200 	.word	0x007a1200
 8001d54:	003d0900 	.word	0x003d0900

08001d58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d60:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <RCC_Delay+0x34>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <RCC_Delay+0x38>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	0a5b      	lsrs	r3, r3, #9
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d74:	bf00      	nop
  }
  while (Delay --);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1e5a      	subs	r2, r3, #1
 8001d7a:	60fa      	str	r2, [r7, #12]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1f9      	bne.n	8001d74 <RCC_Delay+0x1c>
}
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	20000008 	.word	0x20000008
 8001d90:	10624dd3 	.word	0x10624dd3

08001d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e041      	b.n	8001e2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d106      	bne.n	8001dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff f84c 	bl	8000e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f000 fa6a 	bl	80022ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d001      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e035      	b.n	8001eb8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a16      	ldr	r2, [pc, #88]	; (8001ec4 <HAL_TIM_Base_Start_IT+0x90>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d009      	beq.n	8001e82 <HAL_TIM_Base_Start_IT+0x4e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e76:	d004      	beq.n	8001e82 <HAL_TIM_Base_Start_IT+0x4e>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <HAL_TIM_Base_Start_IT+0x94>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d111      	bne.n	8001ea6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2b06      	cmp	r3, #6
 8001e92:	d010      	beq.n	8001eb6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea4:	e007      	b.n	8001eb6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 0201 	orr.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40012c00 	.word	0x40012c00
 8001ec8:	40000400 	.word	0x40000400

08001ecc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d122      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d11b      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0202 	mvn.w	r2, #2
 8001ef8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f9b1 	bl	8002276 <HAL_TIM_IC_CaptureCallback>
 8001f14:	e005      	b.n	8001f22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f9a4 	bl	8002264 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f9b3 	bl	8002288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d122      	bne.n	8001f7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d11b      	bne.n	8001f7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0204 	mvn.w	r2, #4
 8001f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2202      	movs	r2, #2
 8001f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f987 	bl	8002276 <HAL_TIM_IC_CaptureCallback>
 8001f68:	e005      	b.n	8001f76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f97a 	bl	8002264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f989 	bl	8002288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d122      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d11b      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0208 	mvn.w	r2, #8
 8001fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f95d 	bl	8002276 <HAL_TIM_IC_CaptureCallback>
 8001fbc:	e005      	b.n	8001fca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f950 	bl	8002264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f95f 	bl	8002288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f003 0310 	and.w	r3, r3, #16
 8001fda:	2b10      	cmp	r3, #16
 8001fdc:	d122      	bne.n	8002024 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	2b10      	cmp	r3, #16
 8001fea:	d11b      	bne.n	8002024 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0210 	mvn.w	r2, #16
 8001ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f933 	bl	8002276 <HAL_TIM_IC_CaptureCallback>
 8002010:	e005      	b.n	800201e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f926 	bl	8002264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f935 	bl	8002288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b01      	cmp	r3, #1
 8002030:	d10e      	bne.n	8002050 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d107      	bne.n	8002050 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0201 	mvn.w	r2, #1
 8002048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fe34 	bl	8000cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205a:	2b80      	cmp	r3, #128	; 0x80
 800205c:	d10e      	bne.n	800207c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002068:	2b80      	cmp	r3, #128	; 0x80
 800206a:	d107      	bne.n	800207c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 fa67 	bl	800254a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002086:	2b40      	cmp	r3, #64	; 0x40
 8002088:	d10e      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002094:	2b40      	cmp	r3, #64	; 0x40
 8002096:	d107      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f8f9 	bl	800229a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0320 	and.w	r3, r3, #32
 80020b2:	2b20      	cmp	r3, #32
 80020b4:	d10e      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	2b20      	cmp	r3, #32
 80020c2:	d107      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0220 	mvn.w	r2, #32
 80020cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 fa32 	bl	8002538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_TIM_ConfigClockSource+0x18>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e0b3      	b.n	800225c <HAL_TIM_ConfigClockSource+0x180>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002112:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800211a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800212c:	d03e      	beq.n	80021ac <HAL_TIM_ConfigClockSource+0xd0>
 800212e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002132:	f200 8087 	bhi.w	8002244 <HAL_TIM_ConfigClockSource+0x168>
 8002136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800213a:	f000 8085 	beq.w	8002248 <HAL_TIM_ConfigClockSource+0x16c>
 800213e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002142:	d87f      	bhi.n	8002244 <HAL_TIM_ConfigClockSource+0x168>
 8002144:	2b70      	cmp	r3, #112	; 0x70
 8002146:	d01a      	beq.n	800217e <HAL_TIM_ConfigClockSource+0xa2>
 8002148:	2b70      	cmp	r3, #112	; 0x70
 800214a:	d87b      	bhi.n	8002244 <HAL_TIM_ConfigClockSource+0x168>
 800214c:	2b60      	cmp	r3, #96	; 0x60
 800214e:	d050      	beq.n	80021f2 <HAL_TIM_ConfigClockSource+0x116>
 8002150:	2b60      	cmp	r3, #96	; 0x60
 8002152:	d877      	bhi.n	8002244 <HAL_TIM_ConfigClockSource+0x168>
 8002154:	2b50      	cmp	r3, #80	; 0x50
 8002156:	d03c      	beq.n	80021d2 <HAL_TIM_ConfigClockSource+0xf6>
 8002158:	2b50      	cmp	r3, #80	; 0x50
 800215a:	d873      	bhi.n	8002244 <HAL_TIM_ConfigClockSource+0x168>
 800215c:	2b40      	cmp	r3, #64	; 0x40
 800215e:	d058      	beq.n	8002212 <HAL_TIM_ConfigClockSource+0x136>
 8002160:	2b40      	cmp	r3, #64	; 0x40
 8002162:	d86f      	bhi.n	8002244 <HAL_TIM_ConfigClockSource+0x168>
 8002164:	2b30      	cmp	r3, #48	; 0x30
 8002166:	d064      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0x156>
 8002168:	2b30      	cmp	r3, #48	; 0x30
 800216a:	d86b      	bhi.n	8002244 <HAL_TIM_ConfigClockSource+0x168>
 800216c:	2b20      	cmp	r3, #32
 800216e:	d060      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0x156>
 8002170:	2b20      	cmp	r3, #32
 8002172:	d867      	bhi.n	8002244 <HAL_TIM_ConfigClockSource+0x168>
 8002174:	2b00      	cmp	r3, #0
 8002176:	d05c      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0x156>
 8002178:	2b10      	cmp	r3, #16
 800217a:	d05a      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800217c:	e062      	b.n	8002244 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6899      	ldr	r1, [r3, #8]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f000 f95c 	bl	800244a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	609a      	str	r2, [r3, #8]
      break;
 80021aa:	e04e      	b.n	800224a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	6899      	ldr	r1, [r3, #8]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f000 f945 	bl	800244a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021ce:	609a      	str	r2, [r3, #8]
      break;
 80021d0:	e03b      	b.n	800224a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	6859      	ldr	r1, [r3, #4]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	461a      	mov	r2, r3
 80021e0:	f000 f8bc 	bl	800235c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2150      	movs	r1, #80	; 0x50
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 f913 	bl	8002416 <TIM_ITRx_SetConfig>
      break;
 80021f0:	e02b      	b.n	800224a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	6859      	ldr	r1, [r3, #4]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	461a      	mov	r2, r3
 8002200:	f000 f8da 	bl	80023b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2160      	movs	r1, #96	; 0x60
 800220a:	4618      	mov	r0, r3
 800220c:	f000 f903 	bl	8002416 <TIM_ITRx_SetConfig>
      break;
 8002210:	e01b      	b.n	800224a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	6859      	ldr	r1, [r3, #4]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	461a      	mov	r2, r3
 8002220:	f000 f89c 	bl	800235c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2140      	movs	r1, #64	; 0x40
 800222a:	4618      	mov	r0, r3
 800222c:	f000 f8f3 	bl	8002416 <TIM_ITRx_SetConfig>
      break;
 8002230:	e00b      	b.n	800224a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4619      	mov	r1, r3
 800223c:	4610      	mov	r0, r2
 800223e:	f000 f8ea 	bl	8002416 <TIM_ITRx_SetConfig>
        break;
 8002242:	e002      	b.n	800224a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002244:	bf00      	nop
 8002246:	e000      	b.n	800224a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002248:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr

08002276 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr

0800229a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a25      	ldr	r2, [pc, #148]	; (8002354 <TIM_Base_SetConfig+0xa8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d007      	beq.n	80022d4 <TIM_Base_SetConfig+0x28>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ca:	d003      	beq.n	80022d4 <TIM_Base_SetConfig+0x28>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a22      	ldr	r2, [pc, #136]	; (8002358 <TIM_Base_SetConfig+0xac>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d108      	bne.n	80022e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a1a      	ldr	r2, [pc, #104]	; (8002354 <TIM_Base_SetConfig+0xa8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d007      	beq.n	80022fe <TIM_Base_SetConfig+0x52>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f4:	d003      	beq.n	80022fe <TIM_Base_SetConfig+0x52>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a17      	ldr	r2, [pc, #92]	; (8002358 <TIM_Base_SetConfig+0xac>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d108      	bne.n	8002310 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	4313      	orrs	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a07      	ldr	r2, [pc, #28]	; (8002354 <TIM_Base_SetConfig+0xa8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d103      	bne.n	8002344 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	615a      	str	r2, [r3, #20]
}
 800234a:	bf00      	nop
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	40012c00 	.word	0x40012c00
 8002358:	40000400 	.word	0x40000400

0800235c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	f023 0201 	bic.w	r2, r3, #1
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f023 030a 	bic.w	r3, r3, #10
 8002398:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4313      	orrs	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	621a      	str	r2, [r3, #32]
}
 80023ae:	bf00      	nop
 80023b0:	371c      	adds	r7, #28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr

080023b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f023 0210 	bic.w	r2, r3, #16
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	031b      	lsls	r3, r3, #12
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	621a      	str	r2, [r3, #32]
}
 800240c:	bf00      	nop
 800240e:	371c      	adds	r7, #28
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr

08002416 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002416:	b480      	push	{r7}
 8002418:	b085      	sub	sp, #20
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	f043 0307 	orr.w	r3, r3, #7
 8002438:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	609a      	str	r2, [r3, #8]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800244a:	b480      	push	{r7}
 800244c:	b087      	sub	sp, #28
 800244e:	af00      	add	r7, sp, #0
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002464:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	021a      	lsls	r2, r3, #8
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	431a      	orrs	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	4313      	orrs	r3, r2
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4313      	orrs	r3, r2
 8002476:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	609a      	str	r2, [r3, #8]
}
 800247e:	bf00      	nop
 8002480:	371c      	adds	r7, #28
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr

08002488 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800249c:	2302      	movs	r3, #2
 800249e:	e041      	b.n	8002524 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a14      	ldr	r2, [pc, #80]	; (8002530 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d009      	beq.n	80024f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ec:	d004      	beq.n	80024f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a10      	ldr	r2, [pc, #64]	; (8002534 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d10c      	bne.n	8002512 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	4313      	orrs	r3, r2
 8002508:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40012c00 	.word	0x40012c00
 8002534:	40000400 	.word	0x40000400

08002538 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr

0800254a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <__libc_init_array>:
 800255c:	b570      	push	{r4, r5, r6, lr}
 800255e:	2600      	movs	r6, #0
 8002560:	4d0c      	ldr	r5, [pc, #48]	; (8002594 <__libc_init_array+0x38>)
 8002562:	4c0d      	ldr	r4, [pc, #52]	; (8002598 <__libc_init_array+0x3c>)
 8002564:	1b64      	subs	r4, r4, r5
 8002566:	10a4      	asrs	r4, r4, #2
 8002568:	42a6      	cmp	r6, r4
 800256a:	d109      	bne.n	8002580 <__libc_init_array+0x24>
 800256c:	f000 f822 	bl	80025b4 <_init>
 8002570:	2600      	movs	r6, #0
 8002572:	4d0a      	ldr	r5, [pc, #40]	; (800259c <__libc_init_array+0x40>)
 8002574:	4c0a      	ldr	r4, [pc, #40]	; (80025a0 <__libc_init_array+0x44>)
 8002576:	1b64      	subs	r4, r4, r5
 8002578:	10a4      	asrs	r4, r4, #2
 800257a:	42a6      	cmp	r6, r4
 800257c:	d105      	bne.n	800258a <__libc_init_array+0x2e>
 800257e:	bd70      	pop	{r4, r5, r6, pc}
 8002580:	f855 3b04 	ldr.w	r3, [r5], #4
 8002584:	4798      	blx	r3
 8002586:	3601      	adds	r6, #1
 8002588:	e7ee      	b.n	8002568 <__libc_init_array+0xc>
 800258a:	f855 3b04 	ldr.w	r3, [r5], #4
 800258e:	4798      	blx	r3
 8002590:	3601      	adds	r6, #1
 8002592:	e7f2      	b.n	800257a <__libc_init_array+0x1e>
 8002594:	080025ec 	.word	0x080025ec
 8002598:	080025ec 	.word	0x080025ec
 800259c:	080025ec 	.word	0x080025ec
 80025a0:	080025f0 	.word	0x080025f0

080025a4 <memset>:
 80025a4:	4603      	mov	r3, r0
 80025a6:	4402      	add	r2, r0
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d100      	bne.n	80025ae <memset+0xa>
 80025ac:	4770      	bx	lr
 80025ae:	f803 1b01 	strb.w	r1, [r3], #1
 80025b2:	e7f9      	b.n	80025a8 <memset+0x4>

080025b4 <_init>:
 80025b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025b6:	bf00      	nop
 80025b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ba:	bc08      	pop	{r3}
 80025bc:	469e      	mov	lr, r3
 80025be:	4770      	bx	lr

080025c0 <_fini>:
 80025c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025c2:	bf00      	nop
 80025c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025c6:	bc08      	pop	{r3}
 80025c8:	469e      	mov	lr, r3
 80025ca:	4770      	bx	lr
